
// ---- _global_ --------------------------------------------------------------------------


// ---- sap --------------------------------------------------------------------------


// ---- sap.m --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.toString = function() { return ""; };
/**
 * 
 * Returns invalid date value of UI5
 * @deprecated Since 1.12 UI5 returns null for invalid date
 * @returns {null}
 * @public
 * @since 1.10
 * 
 * @memberOf sap.m
 */
sap.m.getInvalidDate = function() { return null; };

/**
 * 
 * Finds default locale settings once and returns always the same.
 * We should not need to create new instance to get same locale settings
 * This method keep the locale instance in the scope and returns the same after first run
 * @return {Object} sap.ui.core.Locale instane
 * @public
 * @since 1.10
 * 
 * @memberOf sap.m
 */
sap.m.getLocale = function() { return null; };

/**
 * 
 * Finds default locale data once and returns always the same
 * @return {Object} sap.ui.core.LocaleData instance
 * @public
 * @since 1.10
 * 
 * @memberOf sap.m
 */
sap.m.getLocaleData = function() { return null; };

/**
 * 
 * Checks if the given parameter is a valid JsDate Object
 * @param {any} value Any variable to test.
 * @return {boolean}
 * @public
 * @since 1.10
 * 
 * @memberOf sap.m
 */
sap.m.isDate = function(value) { return false; };


// ---- sap.m.ActionListItem --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ActionListItem.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ActionListItem should be used to fire actions when tapped.
 * @extends sap.m.ListItemBase
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.ActionListItem = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.m.ActionListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ActionListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>text</code>.
 * Text of the action list item.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.ActionListItem.prototype.getText = function() { return ""; };

/**
 * 
 * Setter for property <code>text</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.ActionListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionListItem.prototype.setText = function(sText) { return new sap.m.ActionListItem(); };


// ---- sap.m.ActionSelect --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ActionSelect.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getButtons buttons} : string | sap.m.Button</li></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.Select#constructor sap.m.Select}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The ActionSelect control provides a list of predefined items that allows end users to choose options and additionally trigger some actions.
 * @extends sap.m.Select
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.16
 * 
 */
sap.m.ActionSelect = function(sId,mSettings) {};
/**
 * 
 * Called after the ActionSelect pop-up is render.
 * @override
 * @protected
 * 
 */
sap.m.ActionSelect.prototype.onAfterRenderingPopup = null

/**
 * 
 * @param {string | sap.m.Button} vButton
 *    Id of a button which becomes an additional target of this <code>buttons</code> association.
 *    Alternatively, a button instance may be given. 
 * @return {sap.m.ActionSelect} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSelect.prototype.addButton = function(vButton) { return new sap.m.ActionSelect(); };

/**
 * 
 * Creates a new subclass of class sap.m.ActionSelect with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ActionSelect.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Buttons to be added to the ActionSelect content.
 * @return {string[]}
 * @public
 * 
 */
sap.m.ActionSelect.prototype.getButtons = function() { return new Array(); };

/**
 * 
 * Remove all buttons from the ActionSelect.
 * @returns {string[]} An array with the ids of the removed elements (might be empty).
 * @public
 * 
 */
sap.m.ActionSelect.prototype.removeAllButtons = function() { return new Array(); };

/**
 * 
 * Button to be removed from the ActionSelect content.
 * @param {int | string | sap.m.Button} vButton The button to remove or its index or id.
 * @returns {string} The id of the removed button or null.
 * @public
 * 
 */
sap.m.ActionSelect.prototype.removeButton = function(vButton) { return ""; };


// ---- sap.m.ActionSheet --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ActionSheet.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPlacement placement} : sap.m.PlacementType (default: sap.m.PlacementType.Bottom)</li>
 * <li>{@link #getShowCancelButton showCancelButton} : boolean (default: true)</li>
 * <li>{@link #getCancelButtonText cancelButtonText} : string</li>
 * <li>{@link #getTitle title} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getButtons buttons} : sap.m.Button[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.ActionSheet#event:cancelButtonTap cancelButtonTap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ActionSheet#event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ActionSheet#event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ActionSheet#event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ActionSheet#event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ActionSheet#event:cancelButtonPress cancelButtonPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ActionSheet is a special kind of control which contains one or more sap.m.Button(s) and the ActionSheet will be closed when one of the buttons is tapped. It looks similar as a sap.m.Dialog in iPhone and Android while as a sap.m.Popover in iPad.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.9.1
 * 
 */
sap.m.ActionSheet = function(sId,mSettings) {};
/**
 * 
 * This event will be fired after the ActionSheet is closed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.ActionSheet.prototype.afterClose = function(oControlEvent) { return null; };

/**
 * 
 * This event will be fired after the ActionSheet is opened. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.ActionSheet.prototype.afterOpen = function(oControlEvent) { return null; };

/**
 * 
 * This event will be fired before the ActionSheet is closed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.ActionSheet.prototype.beforeClose = function(oControlEvent) { return null; };

/**
 * 
 * This event will be fired before the ActionSheet is opened. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.ActionSheet.prototype.beforeOpen = function(oControlEvent) { return null; };

/**
 * 
 * This event is fired when the cancelButton is clicked. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by clicking outside. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.ActionSheet.prototype.cancelButtonPress = function(oControlEvent) { return null; };

/**
 * 
 * This event is fired when the cancelButton is tapped. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by tapping outside. (This event is deprecated, use the press event instead) 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.ActionSheet.prototype.cancelButtonTap = function(oControlEvent) { return null; };

/**
 * 
 * Adds some button <code>oButton</code> 
 * to the aggregation named <code>buttons</code>.
 * @param {sap.m.Button}
 *            oButton the button to add; if empty, nothing is inserted
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.addButton = function(oButton) { return new sap.m.ActionSheet(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'afterClose' event of this <code>sap.m.ActionSheet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ActionSheet</code>.<br/> itself. 
 * </p><p>
 * This event will be fired after the ActionSheet is closed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.attachAfterClose = function(oData,fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'afterOpen' event of this <code>sap.m.ActionSheet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ActionSheet</code>.<br/> itself. 
 * </p><p>
 * This event will be fired after the ActionSheet is opened. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.attachAfterOpen = function(oData,fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'beforeClose' event of this <code>sap.m.ActionSheet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ActionSheet</code>.<br/> itself. 
 * </p><p>
 * This event will be fired before the ActionSheet is closed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.attachBeforeClose = function(oData,fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'beforeOpen' event of this <code>sap.m.ActionSheet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ActionSheet</code>.<br/> itself. 
 * </p><p>
 * This event will be fired before the ActionSheet is opened. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.attachBeforeOpen = function(oData,fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'cancelButtonPress' event of this <code>sap.m.ActionSheet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ActionSheet</code>.<br/> itself. 
 * </p><p>
 * This event is fired when the cancelButton is clicked. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by clicking outside. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.attachCancelButtonPress = function(oData,fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'cancelButtonTap' event of this <code>sap.m.ActionSheet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ActionSheet</code>.<br/> itself. 
 * </p><p>
 * This event is fired when the cancelButton is tapped. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by tapping outside. (This event is deprecated, use the press event instead) 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.attachCancelButtonTap = function(oData,fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * 
 * Calling this method will make the ActionSheet disappear from the screen.
 * @type void
 * @public
 */
sap.m.ActionSheet.prototype.close = function() { return null; };

/**
 * 
 * Destroys all the buttons in the aggregation 
 * named <code>buttons</code>.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.destroyButtons = function() { return new sap.m.ActionSheet(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'afterClose' event of this <code>sap.m.ActionSheet</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.detachAfterClose = function(fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'afterOpen' event of this <code>sap.m.ActionSheet</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.detachAfterOpen = function(fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'beforeClose' event of this <code>sap.m.ActionSheet</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.detachBeforeClose = function(fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'beforeOpen' event of this <code>sap.m.ActionSheet</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.detachBeforeOpen = function(fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'cancelButtonPress' event of this <code>sap.m.ActionSheet</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.detachCancelButtonPress = function(fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'cancelButtonTap' event of this <code>sap.m.ActionSheet</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.detachCancelButtonTap = function(fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * 
 * Creates a new subclass of class sap.m.ActionSheet with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ActionSheet.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event afterClose to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ActionSheet.prototype.fireAfterClose = function(mArguments) { return new sap.m.ActionSheet(); };

/**
 * 
 * Fire event afterOpen to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ActionSheet.prototype.fireAfterOpen = function(mArguments) { return new sap.m.ActionSheet(); };

/**
 * 
 * Fire event beforeClose to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ActionSheet.prototype.fireBeforeClose = function(mArguments) { return new sap.m.ActionSheet(); };

/**
 * 
 * Fire event beforeOpen to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ActionSheet.prototype.fireBeforeOpen = function(mArguments) { return new sap.m.ActionSheet(); };

/**
 * 
 * Fire event cancelButtonPress to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ActionSheet.prototype.fireCancelButtonPress = function(mArguments) { return new sap.m.ActionSheet(); };

/**
 * 
 * Fire event cancelButtonTap to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ActionSheet.prototype.fireCancelButtonTap = function(mArguments) { return new sap.m.ActionSheet(); };

/**
 * 
 * Getter for aggregation <code>buttons</code>.<br/>
 * These buttons are added to the content area in ActionSheet control. When button is tapped, the ActionSheet is closed before the tap event listener is called.
 * @return {sap.m.Button[]}
 * @public
 * 
 */
sap.m.ActionSheet.prototype.getButtons = function() { return new Array(); };

/**
 * 
 * Getter for property <code>cancelButtonText</code>.
 * This is the text displayed in the cancelButton. Default value is "Cancel", and it's translated according to the current locale setting. This property will be ignored when running either in iPad or showCancelButton is set to false.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>cancelButtonText</code>
 * @public
 * 
 */
sap.m.ActionSheet.prototype.getCancelButtonText = function() { return ""; };

/**
 * 
 * Getter for property <code>placement</code>.
 * The ActionSheet behaves as a sap.m.Popover in iPad and this property is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. The default value is sap.m.PlacementType.Bottom.
 * </p><p>
 * Default value is <code>Bottom</code>
 * @return {sap.m.PlacementType} the value of property <code>placement</code>
 * @public
 * 
 */
sap.m.ActionSheet.prototype.getPlacement = function() { return new sap.m.PlacementType(); };

/**
 * 
 * Getter for property <code>showCancelButton</code>.
 * If this is set to true, there will be a cancel button shown below the action buttons. There won't be any cancel button shown in iPad regardless of this property. The default value is set to true.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showCancelButton</code>
 * @public
 * 
 */
sap.m.ActionSheet.prototype.getShowCancelButton = function() { return false; };

/**
 * 
 * Getter for property <code>title</code>.
 * Title will be show in the header area in iPhone and every Android devices. This property will be ignored in iPad.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.ActionSheet.prototype.getTitle = function() { return ""; };

/**
 * 
 * Checks for the provided <code>sap.m.Button</code> in the aggregation named <code>buttons</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Button}
 *            oButton the button whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ActionSheet.prototype.indexOfButton = function(oButton) { return 0; };

/**
 * 
 * Inserts a button into the aggregation named <code>buttons</code>.
 * @param {sap.m.Button}
 *          oButton the button to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the button should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the button is inserted at 
 *             the last position        
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.insertButton = function(oButton,iIndex) { return new sap.m.ActionSheet(); };

/**
 * 
 * The method checks if the ActionSheet is open. It returns true when the ActionSheet is currently open (this includes opening and closing animations), otherwise it returns false.
 * @type boolean
 * @public
 */
sap.m.ActionSheet.prototype.isOpen = function() { return false; };

/**
 * 
 * Calling this method will make the ActionSheet visible on the screen.
 * @param {object} 
 *         oControl
 *         The ActionSheet behaves as a sap.m.Popover in iPad and the control parameter is the object to which the popover will be placed. It can be not only a UI5 control, but also an existing dom reference. The side of the placement depends on the placement property set in the popover. In other platforms, ActionSheet behaves as a standard dialog and this parameter is ignored because dialog is aligned to the screen.
 * @type void
 * @public
 */
sap.m.ActionSheet.prototype.openBy = function(oControl) { return null; };

/**
 * 
 * Removes all the controls in the aggregation named <code>buttons</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Button[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ActionSheet.prototype.removeAllButtons = function() { return new Array(); };

/**
 * 
 * Removes an button from the aggregation named <code>buttons</code>.
 * @param {int | string | sap.m.Button} vButton the button to remove or its index or id
 * @return {sap.m.Button} the removed button or null
 * @public
 * 
 */
sap.m.ActionSheet.prototype.removeButton = function(vButton) { return new sap.m.Button(); };

/**
 * 
 * Setter for property <code>cancelButtonText</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sCancelButtonText  new value for property <code>cancelButtonText</code>
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.setCancelButtonText = function(sCancelButtonText) { return new sap.m.ActionSheet(); };

/**
 * 
 * Setter for property <code>placement</code>.
 * </p><p>
 * Default value is <code>Bottom</code> 
 * @param {sap.m.PlacementType} oPlacement  new value for property <code>placement</code>
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.setPlacement = function(oPlacement) { return new sap.m.ActionSheet(); };

/**
 * 
 * Setter for property <code>showCancelButton</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bShowCancelButton  new value for property <code>showCancelButton</code>
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.setShowCancelButton = function(bShowCancelButton) { return new sap.m.ActionSheet(); };

/**
 * 
 * Setter for property <code>title</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.setTitle = function(sTitle) { return new sap.m.ActionSheet(); };


// ---- sap.m.App --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new App.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHomeIcon homeIcon} : any</li>
 * <li>{@link #getBackgroundColor backgroundColor} : string</li>
 * <li>{@link #getBackgroundImage backgroundImage} : sap.ui.core.URI</li>
 * <li>{@link #getBackgroundRepeat backgroundRepeat} : boolean (default: false)</li>
 * <li>{@link #getBackgroundOpacity backgroundOpacity} : float (default: 1)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.App#event:orientationChange orientationChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.NavContainer#constructor sap.m.NavContainer}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * App is the root element of a UI5 mobile application. It inherits from NavContainer and thus provides its navigation capabilities.
 * It also adds certain header tags to the HTML page which are considered useful for mobile apps.
 * @extends sap.m.NavContainer
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.App = function(sId,mSettings) {};
/**
 * 
 * Fired when the orientation (portrait/landscape) of the device is changed. 
 * @event
 * @deprecated Since version 1.20.0. 
 * use sap.ui.Device.orientation.attachHandler(...)
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.landscape Whether the device is in landscape orientation.
 * @public
 */
sap.m.App.prototype.orientationChange = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'orientationChange' event of this <code>sap.m.App</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.App</code>.<br/> itself. 
 * </p><p>
 * Fired when the orientation (portrait/landscape) of the device is changed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.App</code>.<br/> itself.
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20.0. 
 * use sap.ui.Device.orientation.attachHandler(...)
 * 
 */
sap.m.App.prototype.attachOrientationChange = function(oData,fnFunction,oListener) { return new sap.m.App(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'orientationChange' event of this <code>sap.m.App</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20.0. 
 * use sap.ui.Device.orientation.attachHandler(...)
 * 
 */
sap.m.App.prototype.detachOrientationChange = function(fnFunction,oListener) { return new sap.m.App(); };

/**
 * 
 * Creates a new subclass of class sap.m.App with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.App.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event orientationChange to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'landscape' of type <code>boolean</code> Whether the device is in landscape orientation.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.20.0. 
 * use sap.ui.Device.orientation.attachHandler(...)
 * 
 */
sap.m.App.prototype.fireOrientationChange = function(mArguments) { return new sap.m.App(); };

/**
 * 
 * Getter for property <code>backgroundColor</code>.
 * Background color of the App. If set, this color will override the default background defined by the theme. So this should only be set when really required.
 * Any configured background image will be placed above this colored background. But any theme adaptation in the Theme Designer will override this setting.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>backgroundColor</code>
 * @public
 * @since 1.11.2
 * 
 */
sap.m.App.prototype.getBackgroundColor = function() { return ""; };

/**
 * 
 * Getter for property <code>backgroundImage</code>.
 * Background image of the App. If set, this image will override the default background defined by the theme. So this should only be set when really required.
 * This background image will be placed above any color set for the background. But any theme adaptation in the Theme Designer will override this image setting.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>backgroundImage</code>
 * @public
 * @since 1.11.2
 * 
 */
sap.m.App.prototype.getBackgroundImage = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>backgroundOpacity</code>.
 * Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
 * This can be used to make the application content better readable by making the background image partly transparent.
 * </p><p>
 * Default value is <code>1</code>
 * @return {float} the value of property <code>backgroundOpacity</code>
 * @public
 * @since 1.11.2
 * 
 */
sap.m.App.prototype.getBackgroundOpacity = function() { return 0.0; };

/**
 * 
 * Getter for property <code>backgroundRepeat</code>.
 * Whether the background image (if configured) should be proportionally stretched to cover the whole App (false) or whether it should be tiled (true).
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>backgroundRepeat</code>
 * @public
 * @since 1.11.2
 * 
 */
sap.m.App.prototype.getBackgroundRepeat = function() { return false; };

/**
 * 
 * Getter for property <code>homeIcon</code>.
 * The icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
 * </p><p>
 * Note that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.
 * </p><p>
 * This icon must be in PNG format. The property can either hold the URL of one single icon which is used for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the different required sizes.
 * </p><p>
 * A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting because the file can contain different images for different resolutions.
 * </p><p>
 * One example is:
 * </p><p>
 * app.setHomeIcon({
 * 'phone':'phone-icon.png',
 * 'phone@2':'phone-retina.png',
 * 'tablet':'tablet-icon.png',
 * 'tablet@2':'tablet-retina.png',
 * 'icon':'desktop.ico'
 * });
 * </p><p>
 * The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet.
 * If an object is given but one of the sizes is not given, the largest given icon will be used for this size.
 * </p><p>
 * On Android these icons may or may not be used by the device. Apparently chances can be improved by adding glare effect and rounded corners, setting the file name so it ends with "-precomposed.png" and setting the "homeIconPrecomposed" property to "true".
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {any} the value of property <code>homeIcon</code>
 * @public
 * 
 */
sap.m.App.prototype.getHomeIcon = function() { return null; };

/**
 * 
 * Setter for property <code>backgroundColor</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sBackgroundColor  new value for property <code>backgroundColor</code>
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * 
 */
sap.m.App.prototype.setBackgroundColor = function(sBackgroundColor) { return new sap.m.App(); };

/**
 * 
 * Setter for property <code>backgroundImage</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sBackgroundImage  new value for property <code>backgroundImage</code>
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * 
 */
sap.m.App.prototype.setBackgroundImage = function(sBackgroundImage) { return new sap.m.App(); };

/**
 * 
 * Setter for property <code>backgroundOpacity</code>.
 * </p><p>
 * Default value is <code>1</code> 
 * @param {float} fBackgroundOpacity  new value for property <code>backgroundOpacity</code>
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * 
 */
sap.m.App.prototype.setBackgroundOpacity = function(fBackgroundOpacity) { return new sap.m.App(); };

/**
 * 
 * Setter for property <code>backgroundRepeat</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bBackgroundRepeat  new value for property <code>backgroundRepeat</code>
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * 
 */
sap.m.App.prototype.setBackgroundRepeat = function(bBackgroundRepeat) { return new sap.m.App(); };

/**
 * 
 * Setter for property <code>homeIcon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {any} oHomeIcon  new value for property <code>homeIcon</code>
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.App.prototype.setHomeIcon = function(oHomeIcon) { return new sap.m.App(); };


// ---- sap.m.BackgroundDesign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.BackgroundDesign.toString = function() { return ""; };

// ---- sap.m.BackgroundHelper --------------------------------------------------------------------------

/**
 * 
 * Adds CSS classes and styles to the given RenderManager, depending on the given configuration for background color and background image.
 * To be called by control renderers supporting the global themable background image within their root tag, before they call writeClasses() and writeStyles().
 * @param {sap.ui.core.RenderManager} rm the RenderManager
 * @param {String} [sBgColor] a configured custom background color for the control, if any
 * @param {sap.ui.core.URI} [sBgImgUrl] the configured custom background image for the control, if any
 * @returns
 * @protected
 * 
 * @memberOf sap.m.BackgroundHelper
 */
sap.m.BackgroundHelper.addBackgroundColorStyles = function(rm,sBgColor,sBgImgUrl) { return null; };

/**
 * 
 * Renders an HTML tag into the given RenderManager which carries the background image which is either configured and given or coming from the current theme.
 * Should be called right after the opening root tag has been completed, so this is the first child element inside the control.
 * @param rm the RenderManager
 * @param {sap.ui.core.Control} oControl the control within which the tag will be rendered; its ID will be used to generate the element ID
 * @param {String}  sCssClass a css class to add to the element
 * @param {sap.ui.core.URI}  [sBgImgUrl] the image of a configured background image; if this is not given, the theme background will be used and also the other settings are ignored.
 * @param {boolean} [bRepeat] whether the background image should be repeated/tiled (or stretched)
 * @param {float}   [fOpacity] the background image opacity, if any
 * @returns
 * @protected
 * 
 * @memberOf sap.m.BackgroundHelper
 */
sap.m.BackgroundHelper.renderBackgroundImageTag = function(rm,oControl,sCssClass,sBgImgUrl,bRepeat,fOpacity) { return null; };


// ---- sap.m.Bar --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new Bar.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnableFlexBox enableFlexBox} : boolean (default: false)</li>
 * <li>{@link #getTranslucent translucent} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContentLeft contentLeft} : sap.ui.core.Control[]</li>
 * <li>{@link #getContentMiddle contentMiddle} : sap.ui.core.Control[]</li>
 * <li>{@link #getContentRight contentRight} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A bar that may be used as a header of a page. It has the capability to center a content like a title, while having few controls on the left and right side.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.Bar = function(sId,mSettings) {};
/**
 * 
 * Adds some contentLeft <code>oContentLeft</code> 
 * to the aggregation named <code>contentLeft</code>.
 * @param {sap.ui.core.Control}
 *            oContentLeft the contentLeft to add; if empty, nothing is inserted
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Bar.prototype.addContentLeft = function(oContentLeft) { return new sap.m.Bar(); };

/**
 * 
 * Adds some contentMiddle <code>oContentMiddle</code> 
 * to the aggregation named <code>contentMiddle</code>.
 * @param {sap.ui.core.Control}
 *            oContentMiddle the contentMiddle to add; if empty, nothing is inserted
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Bar.prototype.addContentMiddle = function(oContentMiddle) { return new sap.m.Bar(); };

/**
 * 
 * Adds some contentRight <code>oContentRight</code> 
 * to the aggregation named <code>contentRight</code>.
 * @param {sap.ui.core.Control}
 *            oContentRight the contentRight to add; if empty, nothing is inserted
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Bar.prototype.addContentRight = function(oContentRight) { return new sap.m.Bar(); };

/**
 * 
 * Destroys all the contentLeft in the aggregation 
 * named <code>contentLeft</code>.
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Bar.prototype.destroyContentLeft = function() { return new sap.m.Bar(); };

/**
 * 
 * Destroys all the contentMiddle in the aggregation 
 * named <code>contentMiddle</code>.
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Bar.prototype.destroyContentMiddle = function() { return new sap.m.Bar(); };

/**
 * 
 * Destroys all the contentRight in the aggregation 
 * named <code>contentRight</code>.
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Bar.prototype.destroyContentRight = function() { return new sap.m.Bar(); };

/**
 * 
 * Creates a new subclass of class sap.m.Bar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Bar.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>contentLeft</code>.<br/>
 * this is the left content area, usually containing a button or an app icon. If this is overlapped by the right content, its content will disappear and text will show an elipsis.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.Bar.prototype.getContentLeft = function() { return new Array(); };

/**
 * 
 * Getter for aggregation <code>contentMiddle</code>.<br/>
 * This is the middle content area. Controls such as label, segmented buttons or select should be placed here. Content that is placed here will be centrally positioned, if there is enough space. If the right or left content overlaps the middle content, the middle content will be centered in the space between the left and the right content.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.Bar.prototype.getContentMiddle = function() { return new Array(); };

/**
 * 
 * Getter for aggregation <code>contentRight</code>.<br/>
 * this is the right content area. Controls such as action buttons or search field could be placed here.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.Bar.prototype.getContentRight = function() { return new Array(); };

/**
 * 
 * Getter for property <code>enableFlexBox</code>.
 * If this flag is set to true, contentMiddle will be rendered as a HBox and layoutData can be used to allocate available space
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>enableFlexBox</code>
 * @public
 * @deprecated Since version 1.16. 
 * This property is no longer supported, instead, contentMiddle will always occupy 100% width when no contentLeft and contentRight are being set.
 * 
 */
sap.m.Bar.prototype.getEnableFlexBox = function() { return false; };

/**
 * 
 * Getter for property <code>translucent</code>.
 * A boolean value indicating whether the bar is partially translucent.
 * It is only applied for touch devices.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>translucent</code>
 * @public
 * @since 1.12
 * @deprecated Since version 1.18.6. 
 * This property has no effect since release 1.18.6 and should not be used. Translucent bar may overlay an input and make it difficult to edit.
 * 
 */
sap.m.Bar.prototype.getTranslucent = function() { return false; };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>contentLeft</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *            oContentLeft the contentLeft whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Bar.prototype.indexOfContentLeft = function(oContentLeft) { return 0; };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>contentMiddle</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *            oContentMiddle the contentMiddle whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Bar.prototype.indexOfContentMiddle = function(oContentMiddle) { return 0; };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>contentRight</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *            oContentRight the contentRight whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Bar.prototype.indexOfContentRight = function(oContentRight) { return 0; };

/**
 * 
 * Inserts a contentLeft into the aggregation named <code>contentLeft</code>.
 * @param {sap.ui.core.Control}
 *          oContentLeft the contentLeft to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the contentLeft should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the contentLeft is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the contentLeft is inserted at 
 *             the last position        
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Bar.prototype.insertContentLeft = function(oContentLeft,iIndex) { return new sap.m.Bar(); };

/**
 * 
 * Inserts a contentMiddle into the aggregation named <code>contentMiddle</code>.
 * @param {sap.ui.core.Control}
 *          oContentMiddle the contentMiddle to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the contentMiddle should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the contentMiddle is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the contentMiddle is inserted at 
 *             the last position        
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Bar.prototype.insertContentMiddle = function(oContentMiddle,iIndex) { return new sap.m.Bar(); };

/**
 * 
 * Inserts a contentRight into the aggregation named <code>contentRight</code>.
 * @param {sap.ui.core.Control}
 *          oContentRight the contentRight to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the contentRight should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the contentRight is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the contentRight is inserted at 
 *             the last position        
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Bar.prototype.insertContentRight = function(oContentRight,iIndex) { return new sap.m.Bar(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>contentLeft</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Bar.prototype.removeAllContentLeft = function() { return new Array(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>contentMiddle</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Bar.prototype.removeAllContentMiddle = function() { return new Array(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>contentRight</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Bar.prototype.removeAllContentRight = function() { return new Array(); };

/**
 * 
 * Removes an contentLeft from the aggregation named <code>contentLeft</code>.
 * @param {int | string | sap.ui.core.Control} vContentLeft the contentLeft to remove or its index or id
 * @return {sap.ui.core.Control} the removed contentLeft or null
 * @public
 * 
 */
sap.m.Bar.prototype.removeContentLeft = function(vContentLeft) { return new sap.ui.core.Control(); };

/**
 * 
 * Removes an contentMiddle from the aggregation named <code>contentMiddle</code>.
 * @param {int | string | sap.ui.core.Control} vContentMiddle the contentMiddle to remove or its index or id
 * @return {sap.ui.core.Control} the removed contentMiddle or null
 * @public
 * 
 */
sap.m.Bar.prototype.removeContentMiddle = function(vContentMiddle) { return new sap.ui.core.Control(); };

/**
 * 
 * Removes an contentRight from the aggregation named <code>contentRight</code>.
 * @param {int | string | sap.ui.core.Control} vContentRight the contentRight to remove or its index or id
 * @return {sap.ui.core.Control} the removed contentRight or null
 * @public
 * 
 */
sap.m.Bar.prototype.removeContentRight = function(vContentRight) { return new sap.ui.core.Control(); };

/**
 * 
 * Setter for property <code>enableFlexBox</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bEnableFlexBox  new value for property <code>enableFlexBox</code>
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.16. 
 * This property is no longer supported, instead, contentMiddle will always occupy 100% width when no contentLeft and contentRight are being set.
 * 
 */
sap.m.Bar.prototype.setEnableFlexBox = function(bEnableFlexBox) { return new sap.m.Bar(); };

/**
 * 
 * Setter for property <code>translucent</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bTranslucent  new value for property <code>translucent</code>
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @since 1.12
 * @deprecated Since version 1.18.6. 
 * This property has no effect since release 1.18.6 and should not be used. Translucent bar may overlay an input and make it difficult to edit.
 * 
 */
sap.m.Bar.prototype.setTranslucent = function(bTranslucent) { return new sap.m.Bar(); };


// ---- sap.m.BusyDialog --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new BusyDialog.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getCustomIcon customIcon} : sap.ui.core.URI</li>
 * <li>{@link #getCustomIconRotationSpeed customIconRotationSpeed} : int (default: 1000)</li>
 * <li>{@link #getCustomIconDensityAware customIconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getCustomIconWidth customIconWidth} : sap.ui.core.CSSSize (default: "30px")</li>
 * <li>{@link #getCustomIconHeight customIconHeight} : sap.ui.core.CSSSize (default: "44px")</li>
 * <li>{@link #getCancelButtonText cancelButtonText} : string</li>
 * <li>{@link #getShowCancelButton showCancelButton} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.BusyDialog#event:close close} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Busy Dialog is used to indicate that the system is busy with some task and the user has to wait. During this time the UI is blocked.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.BusyDialog = function(sId,mSettings) {};
/**
 * 
 * This event will be fired when the busy dialog is closed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.BusyDialog.prototype.close = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'close' event of this <code>sap.m.BusyDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.BusyDialog</code>.<br/> itself. 
 * </p><p>
 * This event will be fired when the busy dialog is closed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.BusyDialog</code>.<br/> itself.
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyDialog.prototype.attachClose = function(oData,fnFunction,oListener) { return new sap.m.BusyDialog(); };

/**
 * 
 * Closes the dialog
 * @public
 */
sap.m.BusyDialog.prototype.close = function() { return null; };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'close' event of this <code>sap.m.BusyDialog</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyDialog.prototype.detachClose = function(fnFunction,oListener) { return new sap.m.BusyDialog(); };

/**
 * 
 * Creates a new subclass of class sap.m.BusyDialog with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.BusyDialog.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event close to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.BusyDialog.prototype.fireClose = function(mArguments) { return new sap.m.BusyDialog(); };

/**
 * 
 * Getter for property <code>cancelButtonText</code>.
 * The text of the cancel button. The default text is "Cancel" (translated to the respective language).
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>cancelButtonText</code>
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getCancelButtonText = function() { return ""; };

/**
 * 
 * Getter for property <code>customIcon</code>.
 * Icon that is displayed in the dialog header. This icon is invisible in iOS platform and it's density aware that you can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screen.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>customIcon</code>
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getCustomIcon = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>customIconDensityAware</code>.
 * If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.
 * </p><p>
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * </p><p>
 * If bandwidth is the key for the application, set this value to false.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>customIconDensityAware</code>
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getCustomIconDensityAware = function() { return false; };

/**
 * 
 * Getter for property <code>customIconHeight</code>.
 * Height of the provided icon. By default 44px are used.
 * </p><p>
 * Default value is <code>"44px"</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>customIconHeight</code>
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getCustomIconHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for property <code>customIconRotationSpeed</code>.
 * Defines the rotation speed of the given image. If a gif is used, the speed has to be set to 0. The unit is in ms.
 * </p><p>
 * Default value is <code>1000</code>
 * @return {int} the value of property <code>customIconRotationSpeed</code>
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getCustomIconRotationSpeed = function() { return 0; };

/**
 * 
 * Getter for property <code>customIconWidth</code>.
 * Width of the provided icon. By default 44px are used.
 * </p><p>
 * Default value is <code>"30px"</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>customIconWidth</code>
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getCustomIconWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for property <code>showCancelButton</code>.
 * A cancel button will be rendered inside the busy dialog if this property is set to true.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showCancelButton</code>
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getShowCancelButton = function() { return false; };

/**
 * 
 * Getter for property <code>text</code>.
 * Optional text shown inside the popup.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getText = function() { return ""; };

/**
 * 
 * Getter for property <code>title</code>.
 * Sets a title to the busy dialog. Default is no title.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getTitle = function() { return ""; };

/**
 * 
 * Opens the dialog
 * @public
 */
sap.m.BusyDialog.prototype.open = function() { return null; };

/**
 * 
 * Setter for property <code>cancelButtonText</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sCancelButtonText  new value for property <code>cancelButtonText</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setCancelButtonText = function(sCancelButtonText) { return new sap.m.BusyDialog(); };

/**
 * 
 * Setter for property <code>customIcon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sCustomIcon  new value for property <code>customIcon</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setCustomIcon = function(sCustomIcon) { return new sap.m.BusyDialog(); };

/**
 * 
 * Setter for property <code>customIconDensityAware</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bCustomIconDensityAware  new value for property <code>customIconDensityAware</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setCustomIconDensityAware = function(bCustomIconDensityAware) { return new sap.m.BusyDialog(); };

/**
 * 
 * Setter for property <code>customIconHeight</code>.
 * </p><p>
 * Default value is <code>"44px"</code> 
 * @param {sap.ui.core.CSSSize} sCustomIconHeight  new value for property <code>customIconHeight</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setCustomIconHeight = function(sCustomIconHeight) { return new sap.m.BusyDialog(); };

/**
 * 
 * Setter for property <code>customIconRotationSpeed</code>.
 * </p><p>
 * Default value is <code>1000</code> 
 * @param {int} iCustomIconRotationSpeed  new value for property <code>customIconRotationSpeed</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setCustomIconRotationSpeed = function(iCustomIconRotationSpeed) { return new sap.m.BusyDialog(); };

/**
 * 
 * Setter for property <code>customIconWidth</code>.
 * </p><p>
 * Default value is <code>"30px"</code> 
 * @param {sap.ui.core.CSSSize} sCustomIconWidth  new value for property <code>customIconWidth</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setCustomIconWidth = function(sCustomIconWidth) { return new sap.m.BusyDialog(); };

/**
 * 
 * Setter for property <code>showCancelButton</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bShowCancelButton  new value for property <code>showCancelButton</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setShowCancelButton = function(bShowCancelButton) { return new sap.m.BusyDialog(); };

/**
 * 
 * Setter for property <code>text</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setText = function(sText) { return new sap.m.BusyDialog(); };

/**
 * 
 * Setter for property <code>title</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setTitle = function(sTitle) { return new sap.m.BusyDialog(); };


// ---- sap.m.BusyIndicator --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new BusyIndicator.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getCustomIcon customIcon} : sap.ui.core.URI</li>
 * <li>{@link #getCustomIconRotationSpeed customIconRotationSpeed} : int (default: 1000)</li>
 * <li>{@link #getCustomIconDensityAware customIconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getCustomIconWidth customIconWidth} : sap.ui.core.CSSSize (default: "44px")</li>
 * <li>{@link #getCustomIconHeight customIconHeight} : sap.ui.core.CSSSize (default: "44px")</li>
 * <li>{@link #getSize size} : sap.ui.core.CSSSize</li>
 * <li>{@link #getDesign design} : string (default: 'auto')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Control to indicate that the system is busy with some task and the user has to wait. When no image or gif is provided, the control renders the platforms native indicator using css.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.BusyIndicator = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.m.BusyIndicator with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.BusyIndicator.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>customIcon</code>.
 * Icon url if an icon is used as the busy indicator.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>customIcon</code>
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getCustomIcon = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>customIconDensityAware</code>.
 * If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.
 * </p><p>
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * </p><p>
 * If bandwidth is the key for the application, set this value to false.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>customIconDensityAware</code>
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getCustomIconDensityAware = function() { return false; };

/**
 * 
 * Getter for property <code>customIconHeight</code>.
 * Height of the provided icon. By default 44px are used.
 * </p><p>
 * Default value is <code>"44px"</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>customIconHeight</code>
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getCustomIconHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for property <code>customIconRotationSpeed</code>.
 * Defines the rotation speed of the given image. If a .gif is used, the speed has to be set to 0. The unit is in ms.
 * </p><p>
 * Default value is <code>1000</code>
 * @return {int} the value of property <code>customIconRotationSpeed</code>
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getCustomIconRotationSpeed = function() { return 0; };

/**
 * 
 * Getter for property <code>customIconWidth</code>.
 * Width of the provided icon. By default 44px are used.
 * </p><p>
 * Default value is <code>"44px"</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>customIconWidth</code>
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getCustomIconWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for property <code>design</code>.
 * The design defines how the BusyIndicator should look like. There are 3 possiblities:
 * auto: automatically sets the design according to the context
 * dark: dark theme, useful within a light context
 * light: light theme, useful within a dark context
 * </p><p>
 * Default value is <code>auto</code>
 * @return {string} the value of property <code>design</code>
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getDesign = function() { return ""; };

/**
 * 
 * Getter for property <code>size</code>.
 * Defines the size of the busy indicator.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>size</code>
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getSize = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for property <code>text</code>.
 * Defines the text displayed next to the busy indicator (optional)
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getText = function() { return ""; };

/**
 * 
 * Getter for property <code>textDirection</code>.
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 * </p><p>
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code>
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set to false to make the control invisible.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>customIcon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sCustomIcon  new value for property <code>customIcon</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setCustomIcon = function(sCustomIcon) { return new sap.m.BusyIndicator(); };

/**
 * 
 * Setter for property <code>customIconDensityAware</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bCustomIconDensityAware  new value for property <code>customIconDensityAware</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setCustomIconDensityAware = function(bCustomIconDensityAware) { return new sap.m.BusyIndicator(); };

/**
 * 
 * Setter for property <code>customIconHeight</code>.
 * </p><p>
 * Default value is <code>"44px"</code> 
 * @param {sap.ui.core.CSSSize} sCustomIconHeight  new value for property <code>customIconHeight</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setCustomIconHeight = function(sCustomIconHeight) { return new sap.m.BusyIndicator(); };

/**
 * 
 * Setter for property <code>customIconRotationSpeed</code>.
 * </p><p>
 * Default value is <code>1000</code> 
 * @param {int} iCustomIconRotationSpeed  new value for property <code>customIconRotationSpeed</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setCustomIconRotationSpeed = function(iCustomIconRotationSpeed) { return new sap.m.BusyIndicator(); };

/**
 * 
 * Setter for property <code>customIconWidth</code>.
 * </p><p>
 * Default value is <code>"44px"</code> 
 * @param {sap.ui.core.CSSSize} sCustomIconWidth  new value for property <code>customIconWidth</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setCustomIconWidth = function(sCustomIconWidth) { return new sap.m.BusyIndicator(); };

/**
 * 
 * Setter for property <code>design</code>.
 * </p><p>
 * Default value is <code>auto</code> 
 * @param {string} sDesign  new value for property <code>design</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setDesign = function(sDesign) { return new sap.m.BusyIndicator(); };

/**
 * 
 * Setter for property <code>size</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSSize} sSize  new value for property <code>size</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setSize = function(sSize) { return new sap.m.BusyIndicator(); };

/**
 * 
 * Setter for property <code>text</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setText = function(sText) { return new sap.m.BusyIndicator(); };

/**
 * 
 * Setter for property <code>textDirection</code>.
 * </p><p>
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code> 
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setTextDirection = function(oTextDirection) { return new sap.m.BusyIndicator(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code>
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * </p><p>
 * The MessageBar.API.js "setVisible" function is enhanced in order to
 * toggle the "visibility:hidden;" attribute over the control.
 */
sap.m.BusyIndicator.prototype.setVisible = function(bVisible) { return new sap.m.BusyIndicator(); };


// ---- sap.m.Button --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new Button.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getType type} : sap.m.ButtonType (default: sap.m.ButtonType.Default)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconFirst iconFirst} : boolean (default: true)</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Button#event:tap tap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Button#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Enables users to trigger actions. For the button UI, you can define some text or an icon, or both.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.Button = function(sId,mSettings) {};
/**
 * 
 * Event is fired when the user clicks on the control. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.Button.prototype.press = function(oControlEvent) { return null; };

/**
 * 
 * Event is fired when the user taps the control. (This event is deprecated, use the press event instead) 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.Button.prototype.tap = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Button</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Button</code>.<br/> itself. 
 * </p><p>
 * Event is fired when the user clicks on the control. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Button</code>.<br/> itself.
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.Button(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.Button</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Button</code>.<br/> itself. 
 * </p><p>
 * Event is fired when the user taps the control. (This event is deprecated, use the press event instead) 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Button</code>.<br/> itself.
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.attachTap = function(oData,fnFunction,oListener) { return new sap.m.Button(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Button</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.Button(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.Button</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.detachTap = function(fnFunction,oListener) { return new sap.m.Button(); };

/**
 * 
 * Creates a new subclass of class sap.m.Button with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Button.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event press to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Button.prototype.firePress = function(mArguments) { return new sap.m.Button(); };

/**
 * 
 * Fire event tap to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Button.prototype.fireTap = function(mArguments) { return new sap.m.Button(); };

/**
 * 
 * Getter for property <code>activeIcon</code>.
 * The source property when this icon is tapped. Graphical element is changed to the new source as long as the icon is tapped.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>activeIcon</code>
 * @public
 * 
 */
sap.m.Button.prototype.getActiveIcon = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>enabled</code>.
 * Boolean property to enable the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.Button.prototype.getEnabled = function() { return false; };

/**
 * 
 * Getter for property <code>icon</code>.
 * Icon to be displayed as graphical element within the button. This can be an image or an icon from the icon font.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.m.Button.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * </p><p>
 * If only one version of image is provided, set this value to false to avoid the attempt of fetching density perfect image.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * 
 */
sap.m.Button.prototype.getIconDensityAware = function() { return false; };

/**
 * 
 * Getter for property <code>iconFirst</code>.
 * If set to true (default), the display sequence is 1. icon 2. control text
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconFirst</code>
 * @public
 * 
 */
sap.m.Button.prototype.getIconFirst = function() { return false; };

/**
 * 
 * Getter for property <code>text</code>.
 * Button text
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.Button.prototype.getText = function() { return ""; };

/**
 * 
 * Getter for property <code>type</code>.
 * Type of a button (e.g. Default, Accept, Reject, Back, etc.)
 * </p><p>
 * Default value is <code>Default</code>
 * @return {sap.m.ButtonType} the value of property <code>type</code>
 * @public
 * 
 */
sap.m.Button.prototype.getType = function() { return new sap.m.ButtonType(); };

/**
 * 
 * Getter for property <code>visible</code>.
 * Invisible buttons are not rendered
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.Button.prototype.getVisible = function() { return false; };

/**
 * 
 * Getter for property <code>width</code>.
 * Defines the width of the button.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.Button.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Setter for property <code>activeIcon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sActiveIcon  new value for property <code>activeIcon</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.setActiveIcon = function(sActiveIcon) { return new sap.m.Button(); };

/**
 * 
 * Setter for property <code>enabled</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.setEnabled = function(bEnabled) { return new sap.m.Button(); };

/**
 * 
 * Setter for property <code>icon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.setIcon = function(sIcon) { return new sap.m.Button(); };

/**
 * 
 * Setter for property <code>iconDensityAware</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.Button(); };

/**
 * 
 * Setter for property <code>iconFirst</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bIconFirst  new value for property <code>iconFirst</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.setIconFirst = function(bIconFirst) { return new sap.m.Button(); };

/**
 * 
 * Setter for property <code>text</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.setText = function(sText) { return new sap.m.Button(); };

/**
 * 
 * Setter for property <code>type</code>.
 * </p><p>
 * Default value is <code>Default</code> 
 * @param {sap.m.ButtonType} oType  new value for property <code>type</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.setType = function(oType) { return new sap.m.Button(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.setVisible = function(bVisible) { return new sap.m.Button(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.setWidth = function(sWidth) { return new sap.m.Button(); };


// ---- sap.m.ButtonType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ButtonType.toString = function() { return ""; };

// ---- sap.m.Carousel --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new Carousel.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getLoop loop} : boolean (default: false)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getShowPageIndicator showPageIndicator} : boolean (default: true)</li>
 * <li>{@link #getPageIndicatorPlacement pageIndicatorPlacement} : sap.m.PlacementType (default: sap.m.PlacementType.Bottom)</li>
 * <li>{@link #getShowBusyIndicator showBusyIndicator} : boolean (default: true)</li>
 * <li>{@link #getBusyIndicatorSize busyIndicatorSize} : sap.ui.core.CSSSize (default: '6em')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getPages pages} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getActivePage activePage} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Carousel#event:loadPage loadPage} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Carousel#event:unloadPage unloadPage} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Carousel#event:pageChanged pageChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The Carousel control can be used to navigate through a list of sap.m controls just like flipping through the pages of a book by swiping right or left. An indicator shows the current position within the control list. When displayed in a desktop browser, a left- and right-arrow button is displayed on the carousel's sides, which can be used to navigate through the carousel.
 * </p><p>
 * Note: when displa Internet Explorer 9, page changes are not animated.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.Carousel = function(sId,mSettings) {};
/**
 * 
 * Carousel requires a new page to be loaded. This event may be used to fill the content of that page 
 * @event
 * @deprecated Since version 1.18.7. 
 * Since 1.18.7 pages are no longer loaded or unloaded
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.pageId Id of the page which will be loaded
 * @public
 */
sap.m.Carousel.prototype.loadPage = function(oControlEvent) { return null; };

/**
 * 
 * This event is fired after a carousel swipe has been completed. It is triggered both by physical swipe events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId' functions. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.oldActivePageId Id of the page which was active before the page change.
 * @param {string} oControlEvent.getParameters.newActivePageId Id of the page which is active after the page change.
 * @public
 */
sap.m.Carousel.prototype.pageChanged = function(oControlEvent) { return null; };

/**
 * 
 * Carousel does not display a page any longer and unloads it. This event may be used to clean up the content of that page. 
 * @event
 * @deprecated Since version 1.18.7. 
 * Since 1.18.7 pages are no longer loaded or unloaded
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.pageId Id of the page which will be unloaded
 * @public
 */
sap.m.Carousel.prototype.unloadPage = function(oControlEvent) { return null; };

/**
 * 
 * Adds some page <code>oPage</code> 
 * to the aggregation named <code>pages</code>.
 * @param {sap.ui.core.Control}
 *            oPage the page to add; if empty, nothing is inserted
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Carousel.prototype.addPage = function(oPage) { return new sap.m.Carousel(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'loadPage' event of this <code>sap.m.Carousel</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Carousel</code>.<br/> itself. 
 * </p><p>
 * Carousel requires a new page to be loaded. This event may be used to fill the content of that page 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code>.<br/> itself.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.18.7. 
 * Since 1.18.7 pages are no longer loaded or unloaded
 * 
 */
sap.m.Carousel.prototype.attachLoadPage = function(oData,fnFunction,oListener) { return new sap.m.Carousel(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'pageChanged' event of this <code>sap.m.Carousel</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Carousel</code>.<br/> itself. 
 * </p><p>
 * This event is fired after a carousel swipe has been completed. It is triggered both by physical swipe events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId' functions. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code>.<br/> itself.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Carousel.prototype.attachPageChanged = function(oData,fnFunction,oListener) { return new sap.m.Carousel(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'unloadPage' event of this <code>sap.m.Carousel</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Carousel</code>.<br/> itself. 
 * </p><p>
 * Carousel does not display a page any longer and unloads it. This event may be used to clean up the content of that page. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code>.<br/> itself.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.18.7. 
 * Since 1.18.7 pages are no longer loaded or unloaded
 * 
 */
sap.m.Carousel.prototype.attachUnloadPage = function(oData,fnFunction,oListener) { return new sap.m.Carousel(); };

/**
 * 
 * Destroys all the pages in the aggregation 
 * named <code>pages</code>.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Carousel.prototype.destroyPages = function() { return new sap.m.Carousel(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'loadPage' event of this <code>sap.m.Carousel</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.18.7. 
 * Since 1.18.7 pages are no longer loaded or unloaded
 * 
 */
sap.m.Carousel.prototype.detachLoadPage = function(fnFunction,oListener) { return new sap.m.Carousel(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'pageChanged' event of this <code>sap.m.Carousel</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Carousel.prototype.detachPageChanged = function(fnFunction,oListener) { return new sap.m.Carousel(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'unloadPage' event of this <code>sap.m.Carousel</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.18.7. 
 * Since 1.18.7 pages are no longer loaded or unloaded
 * 
 */
sap.m.Carousel.prototype.detachUnloadPage = function(fnFunction,oListener) { return new sap.m.Carousel(); };

/**
 * 
 * Creates a new subclass of class sap.m.Carousel with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Carousel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event loadPage to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'pageId' of type <code>string</code> Id of the page which will be loaded</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.18.7. 
 * Since 1.18.7 pages are no longer loaded or unloaded
 * 
 */
sap.m.Carousel.prototype.fireLoadPage = function(mArguments) { return new sap.m.Carousel(); };

/**
 * 
 * Fire event pageChanged to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'oldActivePageId' of type <code>string</code> Id of the page which was active before the page change.</li>
 * <li>'newActivePageId' of type <code>string</code> Id of the page which is active after the page change.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Carousel.prototype.firePageChanged = function(mArguments) { return new sap.m.Carousel(); };

/**
 * 
 * Fire event unloadPage to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'pageId' of type <code>string</code> Id of the page which will be unloaded</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.18.7. 
 * Since 1.18.7 pages are no longer loaded or unloaded
 * 
 */
sap.m.Carousel.prototype.fireUnloadPage = function(mArguments) { return new sap.m.Carousel(); };

/**
 * 
 * Provides getter and setter for the currently displayed page. For the setter, argument may be the control itself, which must be member of the carousel's page list, or the control's id.
 * The getter will return the control id
 * @return {string} Id of the element which is the current target of the <code>activePage</code> association, or null
 * @public
 * 
 */
sap.m.Carousel.prototype.getActivePage = function() { return ""; };

/**
 * 
 * API method to retrieve the carousel's busy indicator size.
 * This property has been deprecated since 1.18.6. Always returns an empty string.
 * @deprecated
 * @public
 */
sap.m.Carousel.prototype.getBusyIndicatorSize = function() { return null; };

/**
 * 
 * Getter for property <code>height</code>.
 * The height of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.
 * </p><p>
 * Default value is <code>100%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.m.Carousel.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for property <code>loop</code>.
 * Defines whether the carousel should loop, i.e show the first page after the last page is reached and vice versa.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>loop</code>
 * @public
 * 
 */
sap.m.Carousel.prototype.getLoop = function() { return false; };

/**
 * 
 * Getter for property <code>pageIndicatorPlacement</code>.
 * Defines where the carousel's page indicator is displayed. Possible values are sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. Other values are ignored and the default value will be applied. The default value is sap.m.PlacementType.Bottom.
 * </p><p>
 * Default value is <code>Bottom</code>
 * @return {sap.m.PlacementType} the value of property <code>pageIndicatorPlacement</code>
 * @public
 * 
 */
sap.m.Carousel.prototype.getPageIndicatorPlacement = function() { return new sap.m.PlacementType(); };

/**
 * 
 * Getter for aggregation <code>pages</code>.<br/>
 * The content which the carousel displays.
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for Carousel.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.Carousel.prototype.getPages = function() { return new Array(); };

/**
 * 
 * API method to check whether the carousel should display the busy indicators.
 * This property has been deprecated since 1.18.7. Always returns false,
 * @deprecated
 * @public
 */
sap.m.Carousel.prototype.getShowBusyIndicator = function() { return null; };

/**
 * 
 * Getter for property <code>showPageIndicator</code>.
 * Show or hide carousel's page indicator.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showPageIndicator</code>
 * @public
 * 
 */
sap.m.Carousel.prototype.getShowPageIndicator = function() { return false; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Shows or hides the carousel.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.Carousel.prototype.getVisible = function() { return false; };

/**
 * 
 * Getter for property <code>width</code>.
 * The width of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.
 * </p><p>
 * Default value is <code>100%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.Carousel.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>pages</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *            oPage the page whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Carousel.prototype.indexOfPage = function(oPage) { return 0; };

/**
 * 
 * Inserts a page into the aggregation named <code>pages</code>.
 * @param {sap.ui.core.Control}
 *          oPage the page to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the page should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the page is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the page is inserted at 
 *             the last position        
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Carousel.prototype.insertPage = function(oPage,iIndex) { return new sap.m.Carousel(); };

/**
 * 
 * API method to show the previous page in the page list.
 * @public
 */
sap.m.Carousel.prototype.next = function() { return null; };

/**
 * 
 * API method to show the next page in the page list.
 * @public
 */
sap.m.Carousel.prototype.previous = function() { return null; };

/**
 * 
 * Removes all the controls in the aggregation named <code>pages</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Carousel.prototype.removeAllPages = function() { return new Array(); };

/**
 * 
 * Removes an page from the aggregation named <code>pages</code>.
 * @param {int | string | sap.ui.core.Control} vPage the page to remove or its index or id
 * @return {sap.ui.core.Control} the removed page or null
 * @public
 * 
 */
sap.m.Carousel.prototype.removePage = function(vPage) { return new sap.ui.core.Control(); };

/**
 * 
 * API method to set the carousel's busy indicator size.
 * This property has been deprecated since 1.18.7. Does nothing and returns the carousel reference.
 * @deprecated
 * @public
 */
sap.m.Carousel.prototype.setBusyIndicatorSize = function() { return null; };

/**
 * 
 * API method to set the carousel's height
 * @param oHeight the new height as CSSSize
 * @public
 * @override
 */
sap.m.Carousel.prototype.setHeight = function(oHeight) { return null; };

/**
 * 
 * API method to set whether the carousel should loop, i.e
 * show the first page after the last page is reached and vice 
 * versa.
 * @param bLoop the new loop property
 * @public
 * @override
 */
sap.m.Carousel.prototype.setLoop = function(bLoop) { return null; };

/**
 * 
 * API method to place the page inidicator. 
 * @param sPlacement either sap.m.PlacementType.Top or sap.m.PlacementType.Bottom
 * @public
 * @override
 */
sap.m.Carousel.prototype.setPageIndicatorPlacement = function(sPlacement) { return null; };

/**
 * 
 * API method to set whether the carousel should display the busy indicators.
 * This property has been deprecated since 1.18.7. Does nothing and returns the carousel reference.
 * @deprecated
 * @public
 */
sap.m.Carousel.prototype.setShowBusyIndicator = function() { return null; };

/**
 * 
 * API method to set whether the carousel should display the page indicator
 * @param bShowPageIndicator the new show property
 * @public
 * @override
 */
sap.m.Carousel.prototype.setShowPageIndicator = function(bShowPageIndicator) { return null; };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Carousel.prototype.setVisible = function(bVisible) { return new sap.m.Carousel(); };

/**
 * 
 * API method to set the carousel's width
 * @param oWidth the new width as CSSSize
 * @public
 * @override
 */
sap.m.Carousel.prototype.setWidth = function(oWidth) { return null; };


// ---- sap.m.CheckBox --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new CheckBox.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '')</li>
 * <li>{@link #getActiveHandling activeHandling} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.CheckBox#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * CheckBox control
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.CheckBox = function(sId,mSettings) {};
/**
 * 
 * Event is triggered when the control status is changed by the user by selecting or deselecting the checkbox. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.selected Checks whether the CheckBox is flagged or not flagged.
 * @public
 */
sap.m.CheckBox.prototype.select = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.CheckBox</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.CheckBox</code>.<br/> itself. 
 * </p><p>
 * Event is triggered when the control status is changed by the user by selecting or deselecting the checkbox. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.CheckBox</code>.<br/> itself.
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CheckBox.prototype.attachSelect = function(oData,fnFunction,oListener) { return new sap.m.CheckBox(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.CheckBox</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CheckBox.prototype.detachSelect = function(fnFunction,oListener) { return new sap.m.CheckBox(); };

/**
 * 
 * Creates a new subclass of class sap.m.CheckBox with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.CheckBox.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event select to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'selected' of type <code>boolean</code> Checks whether the CheckBox is flagged or not flagged.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.CheckBox.prototype.fireSelect = function(mArguments) { return new sap.m.CheckBox(); };

/**
 * 
 * Getter for property <code>activeHandling</code>.
 * this is a flag to switch on activeHandling, when it is switched off, there will not be visual changes on active state. Default value is 'true'
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>activeHandling</code>
 * @public
 * 
 */
sap.m.CheckBox.prototype.getActiveHandling = function() { return false; };

/**
 * 
 * Getter for property <code>enabled</code>.
 * Using this property, the control could be disabled, if required.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.CheckBox.prototype.getEnabled = function() { return false; };

/**
 * 
 * Getter for property <code>name</code>.
 * The 'name' property to be used in the HTML code, for example for HTML forms that send data to the server via submit.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>name</code>
 * @public
 * 
 */
sap.m.CheckBox.prototype.getName = function() { return ""; };

/**
 * 
 * Getter for property <code>selected</code>.
 * Contains the state of the control whether it is flagged with a check mark, or not
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * 
 */
sap.m.CheckBox.prototype.getSelected = function() { return false; };

/**
 * 
 * Getter for property <code>text</code>.
 * Defines the text displayed next to the check box
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.CheckBox.prototype.getText = function() { return ""; };

/**
 * 
 * Getter for property <code>textDirection</code>.
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 * </p><p>
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code>
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * 
 */
sap.m.CheckBox.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * 
 * Getter for property <code>visible</code>.
 * Invisible control is not rendered
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.CheckBox.prototype.getVisible = function() { return false; };

/**
 * 
 * Getter for property <code>width</code>.
 * Width of Label
 * </p><p>
 * Default value is <code>''</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.CheckBox.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Setter for property <code>activeHandling</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bActiveHandling  new value for property <code>activeHandling</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CheckBox.prototype.setActiveHandling = function(bActiveHandling) { return new sap.m.CheckBox(); };

/**
 * 
 * Setter for property <code>enabled</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CheckBox.prototype.setEnabled = function(bEnabled) { return new sap.m.CheckBox(); };

/**
 * 
 * Setter for property <code>name</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CheckBox.prototype.setName = function(sName) { return new sap.m.CheckBox(); };

/**
 * 
 * Setter for property <code>selected</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bSelected  new value for property <code>selected</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CheckBox.prototype.setSelected = function(bSelected) { return new sap.m.CheckBox(); };

/**
 * 
 * Setter for property <code>text</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CheckBox.prototype.setText = function(sText) { return new sap.m.CheckBox(); };

/**
 * 
 * Setter for property <code>textDirection</code>.
 * </p><p>
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code> 
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CheckBox.prototype.setTextDirection = function(oTextDirection) { return new sap.m.CheckBox(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CheckBox.prototype.setVisible = function(bVisible) { return new sap.m.CheckBox(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is <code>''</code> 
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CheckBox.prototype.setWidth = function(sWidth) { return new sap.m.CheckBox(); };


// ---- sap.m.Column --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new Column.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHAlign hAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li>
 * <li>{@link #getVAlign vAlign} : sap.ui.core.VerticalAlign (default: sap.ui.core.VerticalAlign.Inherit)</li>
 * <li>{@link #getStyleClass styleClass} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getMinScreenWidth minScreenWidth} : string</li>
 * <li>{@link #getDemandPopin demandPopin} : boolean (default: false)</li>
 * <li>{@link #getPopinHAlign popinHAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li>
 * <li>{@link #getPopinDisplay popinDisplay} : sap.m.PopinDisplay (default: sap.m.PopinDisplay.Block)</li>
 * <li>{@link #getMergeDuplicates mergeDuplicates} : boolean (default: false)</li>
 * <li>{@link #getMergeFunctionName mergeFunctionName} : string (default: 'getText')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getHeader header} <strong>(default aggregation)</strong> : sap.ui.core.Control</li>
 * <li>{@link #getFooter footer} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The column allows to define column specific properties that will be applied when rendering the List.
 * @extends sap.ui.core.Element
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.12
 * 
 */
sap.m.Column = function(sId,mSettings) {};
/**
 * 
 * Checks if box-sizing border-box works for columns
 * Most of the browser does not respect this CSS property, even buggy
 * https://bugs.webkit.org/show_bug.cgi?id=18565
 * @protected
 * @readonly
 * @static
 */
sap.m.Column.hasBorderBoxSupport = null

/**
 * 
 * Apply text alignment of the Column to Text/Label/Link...
 * </p><p>
 * TODO: This is so ugly to check content functions
 * instead we should document how to use our controls
 * to inherit text-alignment and we should add a new
 * sap.ui.core.TextAlign type called "Inherit"
 * @protected *
 * @param {sap.ui.core.Control} oControl List control
 * @param {String} [sAlign] TextAlign enumeration
 * @return {sap.ui.core.Control} oControl
 */
sap.m.Column.prototype.applyAlignTo = function(oControl,sAlign) { return new sap.ui.core.Control(); };

/**
 * 
 * Clears the last value of the column if mergeDuplicates property is true
 * @returns {sap.m.Column}
 * @since 1.20.4
 * @protected
 */
sap.m.Column.prototype.clearLastValue = function() { return new sap.m.Column(); };

/**
 * 
 * Destroys the footer in the aggregation 
 * named <code>footer</code>.
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Column.prototype.destroyFooter = function() { return new sap.m.Column(); };

/**
 * 
 * Destroys the header in the aggregation 
 * named <code>header</code>.
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Column.prototype.destroyHeader = function() { return new sap.m.Column(); };

/**
 * 
 * Creates a new subclass of class sap.m.Column with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Column.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Returns CSS alignment according to column hAlign setting or given parameter
 * for Begin/End values checks the locale settings
 * @param {String} [sAlign] TextAlign enumeration
 * @return {String} left|center|right
 * @protected
 */
sap.m.Column.prototype.getCssAlign = function(sAlign) { return null; };

/**
 * 
 * Getter for property <code>demandPopin</code>.
 * According to your minScreenWidth settings, the column can be hidden in different screen sizes.
 * Setting this property to true, shows this column as pop-in instead of hiding it.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>demandPopin</code>
 * @public
 * 
 */
sap.m.Column.prototype.getDemandPopin = function() { return false; };

/**
 * 
 * Getter for aggregation <code>footer</code>.<br/>
 * Control to be displayed in the column footer.
 * @return {sap.ui.core.Control}
 * @public
 * 
 */
sap.m.Column.prototype.getFooter = function() { return new sap.ui.core.Control(); };

/**
 * 
 * Getter for property <code>hAlign</code>.
 * Horizontal alignment of the column content. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 * </p><p>
 * NOTE: Control with a "textAlign" property inherits the horizontal alignment.
 * </p><p>
 * Default value is <code>Begin</code>
 * @return {sap.ui.core.TextAlign} the value of property <code>hAlign</code>
 * @public
 * 
 */
sap.m.Column.prototype.getHAlign = function() { return new sap.ui.core.TextAlign(); };

/**
 * 
 * Getter for aggregation <code>header</code>.<br/>
 * Control to be displayed in the column header.
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for Column.
 * @return {sap.ui.core.Control}
 * @public
 * 
 */
sap.m.Column.prototype.getHeader = function() { return new sap.ui.core.Control(); };

/**
 * 
 * Gets the initial order of the column
 * @returns {int} initial order of the column
 * @protected
 */
sap.m.Column.prototype.getInitialOrder = function() { return 0; };

/**
 * 
 * Gets the last value of the column
 * @since 1.16
 * @protected
 */
sap.m.Column.prototype.getLastValue = function() { return null; };

/**
 * 
 * Getter for property <code>mergeDuplicates</code>.
 * Set "true" to merge repeating cells(duplicates) into one.
 * Also see "mergeFunctionName" property to customize.
 * Note: this property gets disabled if any column is in pop-in!
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>mergeDuplicates</code>
 * @public
 * @since 1.16
 * 
 */
sap.m.Column.prototype.getMergeDuplicates = function() { return false; };

/**
 * 
 * Getter for property <code>mergeFunctionName</code>.
 * Defines the value getter(serialization) function if "mergeDuplicates" property is set "true"
 * Control itself uses this function to compare values of two repeating cells.
 * Default value "getText" is suitable for Label and Text control.
 * e.g. For "Icon" control "getSrc" can be used.
 * Note: You can pass one string parameter to given function after "#" sign. e.g. "data#myparameter"
 * </p><p>
 * Default value is <code>getText</code>
 * @return {string} the value of property <code>mergeFunctionName</code>
 * @public
 * @since 1.16
 * 
 */
sap.m.Column.prototype.getMergeFunctionName = function() { return ""; };

/**
 * 
 * Getter for property <code>minScreenWidth</code>.
 * By default column is always shown. If you set this property, control checks the minimum width of the screen to show or hide this column.
 * As you can give specific CSS sizes(e.g: "480px" or "40em"), you can also use sap.m.ScreenSize enumeration(e.g: "Phone", "Tablet", "Desktop", "Small", "Medium", "Large", ....).
 * </p><p>
 * sap.m.Column.MediaQuery1->Range1 = 199
 * </p><p>
 * This property can be used for responsive design. e.g: "40em"(or "640px" or "Tablet") setting shows this column in iPad(and Desktop) but hides in iPhone.
 * Please also see "demandPopin" property
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>minScreenWidth</code>
 * @public
 * 
 */
sap.m.Column.prototype.getMinScreenWidth = function() { return ""; };

/**
 * 
 * Gets the order of the column
 * @returns {int} nOrder order of the column
 * @protected
 */
sap.m.Column.prototype.getOrder = function() { return 0; };

/**
 * 
 * Getter for property <code>popinDisplay</code>.
 * Defines the display options of pop-in.
 * Possible values are
 * 1 - "Block"(Header is displayed in first line and value field in next line.)
 * 2 - "Inline" (Value field is displayed next to the header in same line.)
 * </p><p>
 * Default value is <code>sap.m.PopinDisplay.Block</code>
 * @return {sap.m.PopinDisplay} the value of property <code>popinDisplay</code>
 * @public
 * @since 1.13.2
 * 
 */
sap.m.Column.prototype.getPopinDisplay = function() { return new sap.m.PopinDisplay(); };

/**
 * 
 * Getter for property <code>popinHAlign</code>.
 * Horizontal alignment of the pop-in content. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 * </p><p>
 * NOTE: Controls with a text align do not inherit the horizontal alignment.
 * </p><p>
 * Default value is <code>Begin</code>
 * @return {sap.ui.core.TextAlign} the value of property <code>popinHAlign</code>
 * @public
 * @deprecated Since version 1.14. 
 * Use popinDisplay property instead.
 * 
 */
sap.m.Column.prototype.getPopinHAlign = function() { return new sap.ui.core.TextAlign(); };

/**
 * 
 * Getter for property <code>styleClass</code>.
 * CSS class name for column contents(header, cells and footer of column). This property can be used for different column styling. If column is shown as pop-in then this class name is applied to related pop-in row.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>styleClass</code>
 * @public
 * 
 */
sap.m.Column.prototype.getStyleClass = function() { return ""; };

/**
 * 
 * Getter for property <code>vAlign</code>.
 * Vertical alignment of the cells in a column. Possible values are "Inherit", "Top", "Middle", "Bottom"
 * This property does not affect the vertical alignment of header and footer.
 * </p><p>
 * Default value is <code>Inherit</code>
 * @return {sap.ui.core.VerticalAlign} the value of property <code>vAlign</code>
 * @public
 * 
 */
sap.m.Column.prototype.getVAlign = function() { return new sap.ui.core.VerticalAlign(); };

/**
 * 
 * Getter for property <code>visible</code>.
 * Specifies whether or not the column is visible. Invisible columns are not rendered.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.Column.prototype.getVisible = function() { return false; };

/**
 * 
 * Getter for property <code>width</code>.
 * Defines the width of the column. If you leave it empty then this column covers the remaining space.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.Column.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Checks the column will be hidden
 * @protected
 */
sap.m.Column.prototype.isHidden = function() { return null; };

/**
 * 
 * Returns visible probability of the column
 * @param {boolean} [bReturnCache] Whether return cache or new result
 * @return {boolean}
 * @protected
 */
sap.m.Column.prototype.isNeverVisible = function(bReturnCache) { return false; };

/**
 * 
 * Checks the column will be shown as pop-in
 * @protected
 */
sap.m.Column.prototype.isPopin = function() { return null; };

/**
 * 
 * This method is called from parent after all cells in column are rendered
 * @param {jQuery} $table Table jQuery reference
 * @protected
 */
sap.m.Column.prototype.onColumnRendered = function($table) { return null; };

/**
 * 
 * Calls from Table to notify all items are removed
 * @since 1.16
 * @protected
 */
sap.m.Column.prototype.onItemsRemoved = function() { return null; };

/**
 * 
 * Setter for property <code>demandPopin</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bDemandPopin  new value for property <code>demandPopin</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Column.prototype.setDemandPopin = function(bDemandPopin) { return new sap.m.Column(); };

/**
 * 
 * Display or hide the column from given table
 * This does not set the visibility property of the column
 * @param {Object} oTableDomRef Table DOM reference
 * @param {boolean} [bDisplay] whether visible or not
 * @protected
 */
sap.m.Column.prototype.setDisplay = function(oTableDomRef,bDisplay) { return null; };

/**
 * 
 * Display or hide the column from given table via checking media query changes
 * @param {Object} oTableDomRef Table DOM reference
 * @protected
 */
sap.m.Column.prototype.setDisplayViaMedia = function(oTableDomRef) { return null; };

/**
 * 
 * Setter for the aggregated <code>footer</code>.
 * @param {sap.ui.core.Control} oFooter
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Column.prototype.setFooter = function(oFooter) { return new sap.m.Column(); };

/**
 * 
 * Setter for property <code>hAlign</code>.
 * </p><p>
 * Default value is <code>Begin</code> 
 * @param {sap.ui.core.TextAlign} oHAlign  new value for property <code>hAlign</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Column.prototype.setHAlign = function(oHAlign) { return new sap.m.Column(); };

/**
 * 
 * Setter for the aggregated <code>header</code>.
 * @param {sap.ui.core.Control} oHeader
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Column.prototype.setHeader = function(oHeader) { return new sap.m.Column(); };

/**
 * 
 * Sets the visible column index
 * Negative index values can be used to clear
 * @param {int} nIndex index of the visible column
 * @protected
 */
sap.m.Column.prototype.setIndex = function(nIndex) { return null; };

/**
 * 
 * Sets the initial order of the column
 * @param {int} nOrder initial order of the column
 * @protected
 */
sap.m.Column.prototype.setInitialOrder = function(nOrder) { return null; };

/**
 * 
 * Sets the last value of the column if mergeDuplicates property is true
 * @param {any} value Any Value
 * @returns {sap.m.Column}
 * @since 1.16
 * @protected
 */
sap.m.Column.prototype.setLastValue = function(value) { return new sap.m.Column(); };

/**
 * 
 * Setter for property <code>mergeDuplicates</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bMergeDuplicates  new value for property <code>mergeDuplicates</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.Column.prototype.setMergeDuplicates = function(bMergeDuplicates) { return new sap.m.Column(); };

/**
 * 
 * Setter for property <code>mergeFunctionName</code>.
 * </p><p>
 * Default value is <code>getText</code> 
 * @param {string} sMergeFunctionName  new value for property <code>mergeFunctionName</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.Column.prototype.setMergeFunctionName = function(sMergeFunctionName) { return new sap.m.Column(); };

/**
 * 
 * Setter for property <code>minScreenWidth</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sMinScreenWidth  new value for property <code>minScreenWidth</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Column.prototype.setMinScreenWidth = function(sMinScreenWidth) { return new sap.m.Column(); };

/**
 * 
 * Sets the order of the column
 * Does not do the visual effect
 * Table should be invalidate to re-render
 * @param {int} nOrder order of the column
 * @protected
 */
sap.m.Column.prototype.setOrder = function(nOrder) { return null; };

/**
 * 
 * Setter for property <code>popinDisplay</code>.
 * </p><p>
 * Default value is <code>sap.m.PopinDisplay.Block</code> 
 * @param {sap.m.PopinDisplay} oPopinDisplay  new value for property <code>popinDisplay</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @since 1.13.2
 * 
 */
sap.m.Column.prototype.setPopinDisplay = function(oPopinDisplay) { return new sap.m.Column(); };

/**
 * 
 * Setter for property <code>popinHAlign</code>.
 * </p><p>
 * Default value is <code>Begin</code> 
 * @param {sap.ui.core.TextAlign} oPopinHAlign  new value for property <code>popinHAlign</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.14. 
 * Use popinDisplay property instead.
 * 
 */
sap.m.Column.prototype.setPopinHAlign = function(oPopinHAlign) { return new sap.m.Column(); };

/**
 * 
 * Setter for property <code>styleClass</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sStyleClass  new value for property <code>styleClass</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Column.prototype.setStyleClass = function(sStyleClass) { return new sap.m.Column(); };

/**
 * 
 * Setter for property <code>vAlign</code>.
 * </p><p>
 * Default value is <code>Inherit</code> 
 * @param {sap.ui.core.VerticalAlign} oVAlign  new value for property <code>vAlign</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Column.prototype.setVAlign = function(oVAlign) { return new sap.m.Column(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Column.prototype.setVisible = function(bVisible) { return new sap.m.Column(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Column.prototype.setWidth = function(sWidth) { return new sap.m.Column(); };


// ---- sap.m.ColumnListItem --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ColumnListItem.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVAlign vAlign} : sap.ui.core.VerticalAlign (default: sap.ui.core.VerticalAlign.Inherit)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCells cells} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ColumnListItem can be used to create columns for Table control.
 * Note: This control should not be used without Column definition in parent control.
 * @extends sap.m.ListItemBase
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.12
 * 
 */
sap.m.ColumnListItem = function(sId,mSettings) {};
/**
 * 
 * Adds some cell <code>oCell</code> 
 * to the aggregation named <code>cells</code>.
 * @param {sap.ui.core.Control}
 *            oCell the cell to add; if empty, nothing is inserted
 * @return {sap.m.ColumnListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.addCell = function(oCell) { return new sap.m.ColumnListItem(); };

/**
 * 
 * Binder for aggregation <code>cells</code>.
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.ColumnListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.bindCells = function(sPath,oTemplate,oSorter,aFilters) { return new sap.m.ColumnListItem(); };

/**
 * 
 * Destroys all the cells in the aggregation 
 * named <code>cells</code>.
 * @return {sap.m.ColumnListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.destroyCells = function() { return new sap.m.ColumnListItem(); };

/**
 * 
 * Creates a new subclass of class sap.m.ColumnListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ColumnListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>cells</code>.<br/>
 * Every item inside the cells aggregation defines one column of the row.
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for ColumnListItem.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.getCells = function() { return new Array(); };

/**
 * 
 * Getter for property <code>vAlign</code>.
 * Sets the vertical alignment of the all cells in a table row(including selection and navigation). Possible values are "Inherit", "Top", "Middle", "Bottom"
 * Note: Column's "vAlign" property is stronger than this one.
 * </p><p>
 * Default value is <code>Inherit</code>
 * @return {sap.ui.core.VerticalAlign} the value of property <code>vAlign</code>
 * @public
 * @since 1.20
 * 
 */
sap.m.ColumnListItem.prototype.getVAlign = function() { return new sap.ui.core.VerticalAlign(); };

/**
 * 
 * Handles event delegation for pop-ins
 * @static
 * @protected
 * @param {jQuery.Event} oEvent jQuery event object
 * @param {HTMLElement} oContainerDomRef max parent element to search in DOM to find pop-in
 */
sap.m.ColumnListItem.handleEvents = function(oEvent,oContainerDomRef) { return null; };

/**
 * 
 * Whether has pop-in or not
 * @protected
 */
sap.m.ColumnListItem.prototype.hasPopin = function() { return null; };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>cells</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *            oCell the cell whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.indexOfCell = function(oCell) { return 0; };

/**
 * 
 * Inserts a cell into the aggregation named <code>cells</code>.
 * @param {sap.ui.core.Control}
 *          oCell the cell to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the cell should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the cell is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the cell is inserted at 
 *             the last position        
 * @return {sap.m.ColumnListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.insertCell = function(oCell,iIndex) { return new sap.m.ColumnListItem(); };

/**
 * 
 * Checks whether popin is focused or not
 * @static
 * @protected
 * @param {jQuery.Event} oEvent jQuery event object
 */
sap.m.ColumnListItem.isPopinFocused = function(oEvent) { return null; };

/**
 * 
 * Removes all the controls in the aggregation named <code>cells</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.removeAllCells = function() { return new Array(); };

/**
 * 
 * Removes an cell from the aggregation named <code>cells</code>.
 * @param {int | string | sap.ui.core.Control} vCell the cell to remove or its index or id
 * @return {sap.ui.core.Control} the removed cell or null
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.removeCell = function(vCell) { return new sap.ui.core.Control(); };

/**
 * 
 * remove pop-in from DOM
 * @protected
 */
sap.m.ColumnListItem.prototype.removePopin = function() { return null; };

/**
 * 
 * Setter for property <code>vAlign</code>.
 * </p><p>
 * Default value is <code>Inherit</code> 
 * @param {sap.ui.core.VerticalAlign} oVAlign  new value for property <code>vAlign</code>
 * @return {sap.m.ColumnListItem} <code>this</code> to allow method chaining
 * @public
 * @since 1.20
 * 
 */
sap.m.ColumnListItem.prototype.setVAlign = function(oVAlign) { return new sap.m.ColumnListItem(); };

/**
 * 
 * Unbinder for aggregation <code>cells</code>.
 * @return {sap.m.ColumnListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.unbindCells = function() { return new sap.m.ColumnListItem(); };


// ---- sap.m.CustomListItem --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new CustomListItem.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * sap.m.CustomListItem Control
 * @extends sap.m.ListItemBase
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.CustomListItem = function(sId,mSettings) {};
/**
 * 
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CustomListItem.prototype.addContent = function(oContent) { return new sap.m.CustomListItem(); };

/**
 * 
 * Binder for aggregation <code>content</code>.
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CustomListItem.prototype.bindContent = function(sPath,oTemplate,oSorter,aFilters) { return new sap.m.CustomListItem(); };

/**
 * 
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CustomListItem.prototype.destroyContent = function() { return new sap.m.CustomListItem(); };

/**
 * 
 * Creates a new subclass of class sap.m.CustomListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.CustomListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>content</code>.<br/>
 * The content of this list item
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for CustomListItem.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.CustomListItem.prototype.getContent = function() { return new Array(); };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.CustomListItem.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * 
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CustomListItem.prototype.insertContent = function(oContent,iIndex) { return new sap.m.CustomListItem(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.CustomListItem.prototype.removeAllContent = function() { return new Array(); };

/**
 * 
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * 
 */
sap.m.CustomListItem.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * 
 * Unbinder for aggregation <code>content</code>.
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CustomListItem.prototype.unbindContent = function() { return new sap.m.CustomListItem(); };


// ---- sap.m.CustomTile --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new CustomTile.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.Tile#constructor sap.m.Tile}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Use the Custom Tile to show a application specific content in the tile.
 * The tile width is 8.5em and height is 10em
 * @extends sap.m.Tile
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.12
 * 
 */
sap.m.CustomTile = function(sId,mSettings) {};
/**
 * 
 * Destroys the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.CustomTile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CustomTile.prototype.destroyContent = function() { return new sap.m.CustomTile(); };

/**
 * 
 * Creates a new subclass of class sap.m.CustomTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.CustomTile.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>content</code>.<br/>
 * Defines the Content of the CustomTile
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for CustomTile.
 * @return {sap.ui.core.Control}
 * @public
 * 
 */
sap.m.CustomTile.prototype.getContent = function() { return new sap.ui.core.Control(); };

/**
 * 
 * Setter for the aggregated <code>content</code>.
 * @param {sap.ui.core.Control} oContent
 * @return {sap.m.CustomTile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.CustomTile.prototype.setContent = function(oContent) { return new sap.m.CustomTile(); };


// ---- sap.m.DateTimeInput --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new DateTimeInput.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : sap.m.DateTimeInputType (default: sap.m.DateTimeInputType.Date)</li>
 * <li>{@link #getDisplayFormat displayFormat} : string</li>
 * <li>{@link #getValueFormat valueFormat} : string</li>
 * <li>{@link #getDateValue dateValue} : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.DateTimeInput#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.InputBase#constructor sap.m.InputBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Allows end users to interact with date and/or time and select from a date and/or time pad.
 * @extends sap.m.InputBase
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.9.1
 * 
 */
sap.m.DateTimeInput = function(sId,mSettings) {};
/**
 * 
 * This event gets fired when the selection has finished and the value has changed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The string value of the control in given valueFormat(or locale format).
 * @param {object} oControlEvent.getParameters.dateValue The value of control as JavaScript Date Object or null if value is empty.
 * @public
 */
sap.m.DateTimeInput.prototype.change = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.DateTimeInput</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.DateTimeInput</code>.<br/> itself. 
 * </p><p>
 * This event gets fired when the selection has finished and the value has changed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.DateTimeInput</code>.<br/> itself.
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.DateTimeInput(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.DateTimeInput</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.DateTimeInput(); };

/**
 * 
 * Creates a new subclass of class sap.m.DateTimeInput with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.DateTimeInput.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event change to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> The string value of the control in given valueFormat(or locale format).</li>
 * <li>'dateValue' of type <code>object</code> The value of control as JavaScript Date Object or null if value is empty.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.DateTimeInput.prototype.fireChange = function(mArguments) { return new sap.m.DateTimeInput(); };

/**
 * 
 * Getter for property <code>dateValue</code>.
 * This property as JavaScript Date Object can be used to assign a new value which is independent from valueFormat.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {object} the value of property <code>dateValue</code>
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getDateValue = function() { return new Object(); };

/**
 * 
 * Getter for property <code>displayFormat</code>.
 * Displays date value in this given format in text field. Default value is taken from locale settings.
 * If you use data-binding on value property with type sap.ui.model.type.Date then you can ignore this property or latter wins.
 * If user browser supports native picker then this property is overwritten by browser with locale settings.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>displayFormat</code>
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getDisplayFormat = function() { return ""; };

/**
 * 
 * Getter for property <code>type</code>.
 * Type of DateTimeInput (e.g. Date, Time, DateTime)
 * </p><p>
 * Default value is <code>Date</code>
 * @return {sap.m.DateTimeInputType} the value of property <code>type</code>
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getType = function() { return new sap.m.DateTimeInputType(); };

/**
 * 
 * Getter for property <code>valueFormat</code>.
 * Given value property should match with valueFormat to parse date. Default value is taken from locale settings.
 * You can only set and get value in this format.
 * If you use data-binding on value property with type sap.ui.model.type.Date you can ignore this property or latter wins.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>valueFormat</code>
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getValueFormat = function() { return ""; };

/**
 * 
 * <pre>
 * Getter for property <code>width</code>. Defines the width of the DateTimeInput, this value can be provided in %, em, px… and all possible CSS units.
 * 
 * Default value is 100%
 * </pre>
 * @public
 * @overwrite sap.m.InputBase#getWidth
 * @returns {sap.ui.core.CSSSize} the value of property width
 */
sap.m.DateTimeInput.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Setter for property <code>dateValue</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {object} oDateValue  new value for property <code>dateValue</code>
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.setDateValue = function(oDateValue) { return new sap.m.DateTimeInput(); };

/**
 * 
 * Setter for property <code>displayFormat</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sDisplayFormat  new value for property <code>displayFormat</code>
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.setDisplayFormat = function(sDisplayFormat) { return new sap.m.DateTimeInput(); };

/**
 * 
 * Setter for property <code>type</code>.
 * </p><p>
 * Default value is <code>Date</code> 
 * @param {sap.m.DateTimeInputType} oType  new value for property <code>type</code>
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.setType = function(oType) { return new sap.m.DateTimeInput(); };

/**
 * 
 * <pre>
 * This function can be used to assign new value and this is relevant with <code>valueFormat</code> property(see valueFormat) but independent from what is going to display on the field(see displayFormat).
 * Another way to assign new value is using dateValue property in JsView(see dateValue).
 * If you use both at the same time, latter wins.
 * 
 * Also "Now" literal can be assigned as a parameter to show the current date and/or time.
 * </pre>
 * @public
 * @see sap.m.DateTimeInput#getValueFormat
 * @see sap.m.DateTimeInput#getDisplayFormat
 * @see sap.m.DateTimeInput#getDateValue
 * @param {string} sValue new value for property <code>value</code>
 * @returns {sap.m.DateTimeInput} this to allow method chaining
 */
sap.m.DateTimeInput.prototype.setValue = function(sValue) { return new sap.m.DateTimeInput(); };

/**
 * 
 * Setter for property <code>valueFormat</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sValueFormat  new value for property <code>valueFormat</code>
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.setValueFormat = function(sValueFormat) { return new sap.m.DateTimeInput(); };

/**
 * 
 * <pre>
 * Setter for property <code>width</code>
 * 
 * Default value is 100%
 * </pre>
 * @public
 * @overwrite sap.m.InputBase#setWidth
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @returns {sap.m.DateTimeInput} this to allow method chaining
 */
sap.m.DateTimeInput.prototype.setWidth = function(sWidth) { return new sap.m.DateTimeInput(); };


// ---- sap.m.DateTimeInputType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.DateTimeInputType.toString = function() { return ""; };

// ---- sap.m.Dialog --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new Dialog.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getType type} : sap.m.DialogType (default: sap.m.DialogType.Standard)</li>
 * <li>{@link #getState state} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getStretchOnPhone stretchOnPhone} : boolean (default: false)</li>
 * <li>{@link #getStretch stretch} : boolean (default: false)</li>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHorizontalScrolling horizontalScrolling} : boolean (default: true)</li>
 * <li>{@link #getVerticalScrolling verticalScrolling} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li>
 * <li>{@link #getSubHeader subHeader} : sap.m.Bar</li>
 * <li>{@link #getCustomHeader customHeader} : sap.m.Bar</li>
 * <li>{@link #getBeginButton beginButton} : sap.m.Button</li>
 * <li>{@link #getEndButton endButton} : sap.m.Button</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getLeftButton leftButton} : string | sap.m.Button</li>
 * <li>{@link #getRightButton rightButton} : string | sap.m.Button</li>
 * <li>{@link #getInitialFocus initialFocus} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Dialog#event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Dialog#event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Dialog#event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Dialog#event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The Dialog control is used to interrupt the current processing of an application to prompt the user for information or a response.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.PopupInterface
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.Dialog = function(sId,mSettings) {};
/**
 * 
 * This event will be fired after the dialog is closed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.Button} oControlEvent.getParameters.origin This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.
 * @public
 */
sap.m.Dialog.prototype.afterClose = function(oControlEvent) { return null; };

/**
 * 
 * This event will be fired after the dialog is opened. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.Dialog.prototype.afterOpen = function(oControlEvent) { return null; };

/**
 * 
 * This event will be fired before the dialog is closed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.Button} oControlEvent.getParameters.origin This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.
 * @public
 */
sap.m.Dialog.prototype.beforeClose = function(oControlEvent) { return null; };

/**
 * 
 * This event will be fired before the dialog is opened. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.Dialog.prototype.beforeOpen = function(oControlEvent) { return null; };

/**
 * 
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.addContent = function(oContent) { return new sap.m.Dialog(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'afterClose' event of this <code>sap.m.Dialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Dialog</code>.<br/> itself. 
 * </p><p>
 * This event will be fired after the dialog is closed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.attachAfterClose = function(oData,fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'afterOpen' event of this <code>sap.m.Dialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Dialog</code>.<br/> itself. 
 * </p><p>
 * This event will be fired after the dialog is opened. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.attachAfterOpen = function(oData,fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'beforeClose' event of this <code>sap.m.Dialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Dialog</code>.<br/> itself. 
 * </p><p>
 * This event will be fired before the dialog is closed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.attachBeforeClose = function(oData,fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'beforeOpen' event of this <code>sap.m.Dialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Dialog</code>.<br/> itself. 
 * </p><p>
 * This event will be fired before the dialog is opened. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.attachBeforeOpen = function(oData,fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * 
 * Close the dialog.
 * @type void
 * @public
 */
sap.m.Dialog.prototype.close = function() { return null; };

/**
 * 
 * Destroys the beginButton in the aggregation 
 * named <code>beginButton</code>.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Dialog.prototype.destroyBeginButton = function() { return new sap.m.Dialog(); };

/**
 * 
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.destroyContent = function() { return new sap.m.Dialog(); };

/**
 * 
 * Destroys the customHeader in the aggregation 
 * named <code>customHeader</code>.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Dialog.prototype.destroyCustomHeader = function() { return new sap.m.Dialog(); };

/**
 * 
 * Destroys the endButton in the aggregation 
 * named <code>endButton</code>.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Dialog.prototype.destroyEndButton = function() { return new sap.m.Dialog(); };

/**
 * 
 * Destroys the subHeader in the aggregation 
 * named <code>subHeader</code>.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.12.2
 * 
 */
sap.m.Dialog.prototype.destroySubHeader = function() { return new sap.m.Dialog(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'afterClose' event of this <code>sap.m.Dialog</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.detachAfterClose = function(fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'afterOpen' event of this <code>sap.m.Dialog</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.detachAfterOpen = function(fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'beforeClose' event of this <code>sap.m.Dialog</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.detachBeforeClose = function(fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'beforeOpen' event of this <code>sap.m.Dialog</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.detachBeforeOpen = function(fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * 
 * Creates a new subclass of class sap.m.Dialog with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Dialog.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event afterClose to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'origin' of type <code>sap.m.Button</code> This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Dialog.prototype.fireAfterClose = function(mArguments) { return new sap.m.Dialog(); };

/**
 * 
 * Fire event afterOpen to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Dialog.prototype.fireAfterOpen = function(mArguments) { return new sap.m.Dialog(); };

/**
 * 
 * Fire event beforeClose to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'origin' of type <code>sap.m.Button</code> This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Dialog.prototype.fireBeforeClose = function(mArguments) { return new sap.m.Dialog(); };

/**
 * 
 * Fire event beforeOpen to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Dialog.prototype.fireBeforeOpen = function(mArguments) { return new sap.m.Dialog(); };

/**
 * 
 * Getter for aggregation <code>beginButton</code>.<br/>
 * The button which is rendered on the left side (right side in RTL mode) inside the dialog.
 * @return {sap.m.Button}
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Dialog.prototype.getBeginButton = function() { return new sap.m.Button(); };

/**
 * 
 * Getter for aggregation <code>content</code>.<br/>
 * The content inside the dialog.
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for Dialog.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.Dialog.prototype.getContent = function() { return new Array(); };

/**
 * 
 * Getter for property <code>contentHeight</code>.
 * Preferred height of content in Dialog. If the preferred height is bigger than the available space on screen, it will be overwritten by the maximum available height on screen in order to make sure that dialog isn't cut off.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>contentHeight</code>
 * @public
 * @since 1.12.1
 * 
 */
sap.m.Dialog.prototype.getContentHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for property <code>contentWidth</code>.
 * Preferred width of content in Dialog. This property affects the width of dialog on phone in landscape mode, tablet or desktop, because the dialog has a fixed width when runs on phone in portrait mode. If the preferred width is less than the minimum width of dilaog or more than the available width of the screen, it will be overwritten by the min or max value. The current mininum value of dialog width on tablet is 400px.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>contentWidth</code>
 * @public
 * @since 1.12.1
 * 
 */
sap.m.Dialog.prototype.getContentWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for aggregation <code>customHeader</code>.<br/>
 * CustomHeader is only supported in theme sap_bluecrystal. When it's set, the icon, title and showHeader are properties ignored. Only the customHeader is shown as the header of the dialog.
 * @return {sap.m.Bar}
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Dialog.prototype.getCustomHeader = function() { return new sap.m.Bar(); };

/**
 * 
 * Getter for aggregation <code>endButton</code>.<br/>
 * The button which is rendered on the right side (left side in RTL mode) inside the dialog.
 * @return {sap.m.Button}
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Dialog.prototype.getEndButton = function() { return new sap.m.Button(); };

/**
 * 
 * Getter for property <code>horizontalScrolling</code>.
 * This property indicates if user can scroll horizontally inside dialog when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the dialog, this property needs to be set to false to disable the scrolling in dialog in order to make the scrolling in the child control work properly.
 * Dialog detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to dialog. If there is, dialog will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>horizontalScrolling</code>
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Dialog.prototype.getHorizontalScrolling = function() { return false; };

/**
 * 
 * Getter for property <code>icon</code>.
 * Icon that is displayed in the dialog header. This icon is invisible in iOS platform and it's density aware that you can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screen.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.m.Dialog.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Focus is set to the dialog in the sequence of leftButton and rightButton when available. But if some other control needs to get the focus other than one of those two buttons, set the initialFocus with the control which should be focused on. Setting initialFocus to input controls doesn't open the on screen keyboard on mobile device, this is due to the browser limitation that the on screen keyboard can't be opened with javascript code. The opening of on screen keyboard must be triggered by real user action.
 * @return {string} Id of the element which is the current target of the <code>initialFocus</code> association, or null
 * @public
 * @since 1.15.0
 * 
 */
sap.m.Dialog.prototype.getInitialFocus = function() { return ""; };

/**
 * 
 * LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored. Setting leftButton will also set the beginButton internally.
 * @return {string} Id of the element which is the current target of the <code>leftButton</code> association, or null
 * @public
 * @deprecated Since version 1.15.1. 
 * </p><p>
 * LeftButton has benn deprecated since 1.15.1. Please use the beginButton instead which is more RTL friendly.
 * 
 */
sap.m.Dialog.prototype.getLeftButton = function() { return ""; };

/**
 * 
 * RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored. Setting rightButton will also set the endButton internally.
 * @return {string} Id of the element which is the current target of the <code>rightButton</code> association, or null
 * @public
 * @deprecated Since version 1.15.1. 
 * </p><p>
 * RightButton has been deprecated since 1.15.1. Please use the endButton instead which is more RTL friendly.
 * 
 */
sap.m.Dialog.prototype.getRightButton = function() { return ""; };

/**
 * 
 * Getter for property <code>showHeader</code>.
 * This property decides whether the header is shown inside the dialog. If this property is set to true, the text and icon property are ignored. This property has a default value true.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Dialog.prototype.getShowHeader = function() { return false; };

/**
 * 
 * Getter for property <code>state</code>.
 * State affects the icon and the title color. If other than None is set, a predefined icon will be added to the dialog. Setting icon property will overwrite the predefined icon. The default value is None which doesn't add any icon to the Dialog control. This property is by now only supported by blue crystal theme.
 * </p><p>
 * Default value is <code>None</code>
 * @return {sap.ui.core.ValueState} the value of property <code>state</code>
 * @public
 * @since 1.11.2
 * 
 */
sap.m.Dialog.prototype.getState = function() { return new sap.ui.core.ValueState(); };

/**
 * 
 * Getter for property <code>stretch</code>.
 * When this property is set to true, the dialog is stretched to a full screen display. This property is only applicable to standard dialog and message type dialog ignores this property.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>stretch</code>
 * @public
 * @since 1.13.1
 * 
 */
sap.m.Dialog.prototype.getStretch = function() { return false; };

/**
 * 
 * Getter for property <code>stretchOnPhone</code>.
 * When it's set to true, the dialog will be full screen when it runs on a phone.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>stretchOnPhone</code>
 * @public
 * @since 1.11.2
 * @deprecated Since version 1.13.1. 
 * Please use the new stretch property instead. This enables a stretched dialog even on tablet and desktop. If you want to achieve the same effect as stretchOnPhone, please set the stretch with jQuery.device.is.phone, then dialog is only stretched when runs on phone.
 * 
 */
sap.m.Dialog.prototype.getStretchOnPhone = function() { return false; };

/**
 * 
 * Getter for aggregation <code>subHeader</code>.<br/>
 * When subHeader is assigned to Dialog, it's rendered directly after the main header in Dialog. SubHeader is out of the content area and won't be scrolled when content's size is bigger than the content area's size.
 * @return {sap.m.Bar}
 * @public
 * @since 1.12.2
 * 
 */
sap.m.Dialog.prototype.getSubHeader = function() { return new sap.m.Bar(); };

/**
 * 
 * Getter for property <code>title</code>.
 * Title text appears in the dialog header.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.Dialog.prototype.getTitle = function() { return ""; };

/**
 * 
 * Getter for property <code>type</code>.
 * The type of the dialog. In theme sap_bluecrystal, the type message will limit the dialog's width within 480px when runs on tablet and desktop.
 * </p><p>
 * Default value is <code>Standard</code>
 * @return {sap.m.DialogType} the value of property <code>type</code>
 * @public
 * 
 */
sap.m.Dialog.prototype.getType = function() { return new sap.m.DialogType(); };

/**
 * 
 * Getter for property <code>verticalScrolling</code>.
 * This property indicates if user can scroll vertically inside dialog when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the dialog, this property needs to be set to false to disable the scrolling in dialog in order to make the scrolling in the child control work properly.
 * Dialog detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to dialog. If there is, dialog will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>verticalScrolling</code>
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Dialog.prototype.getVerticalScrolling = function() { return false; };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Dialog.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * 
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.insertContent = function(oContent,iIndex) { return new sap.m.Dialog(); };

/**
 * 
 * The method checks if the Dialog is open. It returns true when the Dialog is currently open (this includes opening and closing animations), otherwise it returns false.
 * @type boolean
 * @public
 * @since 1.9.1
 */
sap.m.Dialog.prototype.isOpen = function() { return false; };

/**
 * 
 * Open the dialog.
 * @type void
 * @public
 */
sap.m.Dialog.prototype.open = function() { return null; };

/**
 * 
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Dialog.prototype.removeAllContent = function() { return new Array(); };

/**
 * 
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * 
 */
sap.m.Dialog.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * 
 * Setter for the aggregated <code>beginButton</code>.
 * @param {sap.m.Button} oBeginButton
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Dialog.prototype.setBeginButton = function(oBeginButton) { return new sap.m.Dialog(); };

/**
 * 
 * Setter for property <code>contentHeight</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSSize} sContentHeight  new value for property <code>contentHeight</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.12.1
 * 
 */
sap.m.Dialog.prototype.setContentHeight = function(sContentHeight) { return new sap.m.Dialog(); };

/**
 * 
 * Setter for property <code>contentWidth</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSSize} sContentWidth  new value for property <code>contentWidth</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.12.1
 * 
 */
sap.m.Dialog.prototype.setContentWidth = function(sContentWidth) { return new sap.m.Dialog(); };

/**
 * 
 * Setter for the aggregated <code>customHeader</code>.
 * @param {sap.m.Bar} oCustomHeader
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Dialog.prototype.setCustomHeader = function(oCustomHeader) { return new sap.m.Dialog(); };

/**
 * 
 * Setter for the aggregated <code>endButton</code>.
 * @param {sap.m.Button} oEndButton
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Dialog.prototype.setEndButton = function(oEndButton) { return new sap.m.Dialog(); };

/**
 * 
 * Setter for property <code>horizontalScrolling</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bHorizontalScrolling  new value for property <code>horizontalScrolling</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Dialog.prototype.setHorizontalScrolling = function(bHorizontalScrolling) { return new sap.m.Dialog(); };

/**
 * 
 * Setter for property <code>icon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.setIcon = function(sIcon) { return new sap.m.Dialog(); };

/**
 * 
 * Focus is set to the dialog in the sequence of leftButton and rightButton when available. But if some other control needs to get the focus other than one of those two buttons, set the initialFocus with the control which should be focused on. Setting initialFocus to input controls doesn't open the on screen keyboard on mobile device, this is due to the browser limitation that the on screen keyboard can't be opened with javascript code. The opening of on screen keyboard must be triggered by real user action.
 * @param {string | sap.ui.core.Control} vInitialFocus 
 *    Id of an element which becomes the new target of this <code>initialFocus</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * 
 */
sap.m.Dialog.prototype.setInitialFocus = function(vInitialFocus) { return new sap.m.Dialog(); };

/**
 * 
 * LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored. Setting leftButton will also set the beginButton internally.
 * @param {string | sap.m.Button} vLeftButton 
 *    Id of an element which becomes the new target of this <code>leftButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.15.1. 
 * </p><p>
 * LeftButton has benn deprecated since 1.15.1. Please use the beginButton instead which is more RTL friendly.
 * 
 */
sap.m.Dialog.prototype.setLeftButton = function(vLeftButton) { return new sap.m.Dialog(); };

/**
 * 
 * RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored. Setting rightButton will also set the endButton internally.
 * @param {string | sap.m.Button} vRightButton 
 *    Id of an element which becomes the new target of this <code>rightButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.15.1. 
 * </p><p>
 * RightButton has been deprecated since 1.15.1. Please use the endButton instead which is more RTL friendly.
 * 
 */
sap.m.Dialog.prototype.setRightButton = function(vRightButton) { return new sap.m.Dialog(); };

/**
 * 
 * Setter for property <code>showHeader</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Dialog.prototype.setShowHeader = function(bShowHeader) { return new sap.m.Dialog(); };

/**
 * 
 * Setter for property <code>state</code>.
 * </p><p>
 * Default value is <code>None</code> 
 * @param {sap.ui.core.ValueState} oState  new value for property <code>state</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * 
 */
sap.m.Dialog.prototype.setState = function(oState) { return new sap.m.Dialog(); };

/**
 * 
 * Setter for property <code>stretch</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bStretch  new value for property <code>stretch</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.13.1
 * 
 */
sap.m.Dialog.prototype.setStretch = function(bStretch) { return new sap.m.Dialog(); };

/**
 * 
 * Setter for property <code>stretchOnPhone</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bStretchOnPhone  new value for property <code>stretchOnPhone</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @deprecated Since version 1.13.1. 
 * Please use the new stretch property instead. This enables a stretched dialog even on tablet and desktop. If you want to achieve the same effect as stretchOnPhone, please set the stretch with jQuery.device.is.phone, then dialog is only stretched when runs on phone.
 * 
 */
sap.m.Dialog.prototype.setStretchOnPhone = function(bStretchOnPhone) { return new sap.m.Dialog(); };

/**
 * 
 * Setter for the aggregated <code>subHeader</code>.
 * @param {sap.m.Bar} oSubHeader
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.12.2
 * 
 */
sap.m.Dialog.prototype.setSubHeader = function(oSubHeader) { return new sap.m.Dialog(); };

/**
 * 
 * Setter for property <code>title</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.setTitle = function(sTitle) { return new sap.m.Dialog(); };

/**
 * 
 * Setter for property <code>type</code>.
 * </p><p>
 * Default value is <code>Standard</code> 
 * @param {sap.m.DialogType} oType  new value for property <code>type</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.setType = function(oType) { return new sap.m.Dialog(); };

/**
 * 
 * Setter for property <code>verticalScrolling</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVerticalScrolling  new value for property <code>verticalScrolling</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Dialog.prototype.setVerticalScrolling = function(bVerticalScrolling) { return new sap.m.Dialog(); };


// ---- sap.m.DialogType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.DialogType.toString = function() { return ""; };

// ---- sap.m.DisplayListItem --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new DisplayListItem.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLabel label} : string</li>
 * <li>{@link #getValue value} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The display list item consists of a label and a value.
 * @extends sap.m.ListItemBase
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.DisplayListItem = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.m.DisplayListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.DisplayListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>label</code>.
 * List item label
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>label</code>
 * @public
 * 
 */
sap.m.DisplayListItem.prototype.getLabel = function() { return ""; };

/**
 * 
 * Getter for property <code>value</code>.
 * List item value
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>value</code>
 * @public
 * 
 */
sap.m.DisplayListItem.prototype.getValue = function() { return ""; };

/**
 * 
 * Setter for property <code>label</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sLabel  new value for property <code>label</code>
 * @return {sap.m.DisplayListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DisplayListItem.prototype.setLabel = function(sLabel) { return new sap.m.DisplayListItem(); };

/**
 * 
 * Setter for property <code>value</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.m.DisplayListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DisplayListItem.prototype.setValue = function(sValue) { return new sap.m.DisplayListItem(); };


// ---- sap.m.FacetFilter --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new FacetFilter.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getShowPersonalization showPersonalization} : boolean (default: false)</li>
 * <li>{@link #getType type} : sap.m.FacetFilterType (default: sap.m.FacetFilterType.Simple)</li>
 * <li>{@link #getLiveSearch liveSearch} : boolean (default: true)</li>
 * <li>{@link #getShowSummaryBar showSummaryBar} : boolean (default: false)</li>
 * <li>{@link #getShowReset showReset} : boolean (default: true)</li>
 * <li>{@link #getShowPopoverOKButton showPopoverOKButton} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getLists lists} <strong>(default aggregation)</strong> : sap.m.FacetFilterList[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.FacetFilter#event:reset reset} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * FacetFilter is used to provide filtering functionality with multiple parameters.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.FacetFilter = function(sId,mSettings) {};
/**
 * 
 * Fired when the reset button is pressed to inform that all facet filter lists need to be reset. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.FacetFilter.prototype.reset = function(oControlEvent) { return null; };

/**
 * 
 * Adds some list <code>oList</code> 
 * to the aggregation named <code>lists</code>.
 * @param {sap.m.FacetFilterList}
 *            oList the list to add; if empty, nothing is inserted
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.addList = function(oList) { return new sap.m.FacetFilter(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'reset' event of this <code>sap.m.FacetFilter</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.FacetFilter</code>.<br/> itself. 
 * </p><p>
 * Fired when the reset button is pressed to inform that all facet filter lists need to be reset. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FacetFilter</code>.<br/> itself.
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.attachReset = function(oData,fnFunction,oListener) { return new sap.m.FacetFilter(); };

/**
 * 
 * Destroys all the lists in the aggregation 
 * named <code>lists</code>.
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.destroyLists = function() { return new sap.m.FacetFilter(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'reset' event of this <code>sap.m.FacetFilter</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.detachReset = function(fnFunction,oListener) { return new sap.m.FacetFilter(); };

/**
 * 
 * Creates a new subclass of class sap.m.FacetFilter with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.FacetFilter.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event reset to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.FacetFilter.prototype.fireReset = function(mArguments) { return new sap.m.FacetFilter(); };

/**
 * 
 * Getter for aggregation <code>lists</code>.<br/>
 * Collection of FacetFilterList controls.
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for FacetFilter.
 * @return {sap.m.FacetFilterList[]}
 * @public
 * 
 */
sap.m.FacetFilter.prototype.getLists = function() { return new Array(); };

/**
 * 
 * Getter for property <code>liveSearch</code>.
 * Enable/disable live search on all search fields except for the facet list search.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>liveSearch</code>
 * @public
 * 
 */
sap.m.FacetFilter.prototype.getLiveSearch = function() { return false; };

/**
 * 
 * Getter for property <code>showPersonalization</code>.
 * If true and the FacetFilter type is Simple, then the add facet icon will be displayed and each facet button will also have a facet remove icon displayed beside it allowing the user to deactivate the facet.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showPersonalization</code>
 * @public
 * 
 */
sap.m.FacetFilter.prototype.getShowPersonalization = function() { return false; };

/**
 * 
 * Getter for property <code>showPopoverOKButton</code>.
 * If true an "OK" button is shown for every FacetFilterList popover. This button allows the user to close the popover from within the popover instead of having to click outside the popover.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showPopoverOKButton</code>
 * @public
 * 
 */
sap.m.FacetFilter.prototype.getShowPopoverOKButton = function() { return false; };

/**
 * 
 * Getter for property <code>showReset</code>.
 * Show or hide the filter reset button.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showReset</code>
 * @public
 * 
 */
sap.m.FacetFilter.prototype.getShowReset = function() { return false; };

/**
 * 
 * Getter for property <code>showSummaryBar</code>.
 * Shows the summary bar instead of the facet filter buttons bar when set to true.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showSummaryBar</code>
 * @public
 * 
 */
sap.m.FacetFilter.prototype.getShowSummaryBar = function() { return false; };

/**
 * 
 * Getter for property <code>type</code>.
 * This property defines the default appearance of the FacetFilter on the device.
 * </p><p>
 * Default value is <code>Simple</code>
 * @return {sap.m.FacetFilterType} the value of property <code>type</code>
 * @public
 * 
 */
sap.m.FacetFilter.prototype.getType = function() { return new sap.m.FacetFilterType(); };

/**
 * 
 * Getter for property <code>visible</code>.
 * If true the FacetFilter will not be displayed.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.FacetFilter.prototype.getVisible = function() { return false; };

/**
 * 
 * Gets the css width of the facet filter. (not the effective width). Even though there is no
 * width property defined for the FacetFilter, this method is needed for proper display in the ToolBar. 
 * @returns {string} the width as a string
 * @protected
 */
sap.m.FacetFilter.prototype.getWidth = function() { return ""; };

/**
 * 
 * Checks for the provided <code>sap.m.FacetFilterList</code> in the aggregation named <code>lists</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.FacetFilterList}
 *            oList the list whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.FacetFilter.prototype.indexOfList = function(oList) { return 0; };

/**
 * 
 * Inserts a list into the aggregation named <code>lists</code>.
 * @param {sap.m.FacetFilterList}
 *          oList the list to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the list should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the list is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the list is inserted at 
 *             the last position        
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.insertList = function(oList,iIndex) { return new sap.m.FacetFilter(); };

/**
 * 
 * Opens the facet filter dialog.
 * @type void
 * @public
 */
sap.m.FacetFilter.prototype.openFilterDialog = function() { return null; };

/**
 * 
 * Removes all the controls in the aggregation named <code>lists</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.FacetFilterList[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.FacetFilter.prototype.removeAllLists = function() { return new Array(); };

/**
 * 
 * Removes an list from the aggregation named <code>lists</code>.
 * @param {int | string | sap.m.FacetFilterList} vList the list to remove or its index or id
 * @return {sap.m.FacetFilterList} the removed list or null
 * @public
 * 
 */
sap.m.FacetFilter.prototype.removeList = function(vList) { return new sap.m.FacetFilterList(); };

/**
 * 
 * Setter for property <code>liveSearch</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bLiveSearch  new value for property <code>liveSearch</code>
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.setLiveSearch = function(bLiveSearch) { return new sap.m.FacetFilter(); };

/**
 * 
 * Setter for property <code>showPersonalization</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bShowPersonalization  new value for property <code>showPersonalization</code>
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.setShowPersonalization = function(bShowPersonalization) { return new sap.m.FacetFilter(); };

/**
 * 
 * Setter for property <code>showPopoverOKButton</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bShowPopoverOKButton  new value for property <code>showPopoverOKButton</code>
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.setShowPopoverOKButton = function(bShowPopoverOKButton) { return new sap.m.FacetFilter(); };

/**
 * 
 * Setter for property <code>showReset</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bShowReset  new value for property <code>showReset</code>
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.setShowReset = function(bShowReset) { return new sap.m.FacetFilter(); };

/**
 * 
 * Setter for property <code>showSummaryBar</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bShowSummaryBar  new value for property <code>showSummaryBar</code>
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.setShowSummaryBar = function(bShowSummaryBar) { return new sap.m.FacetFilter(); };

/**
 * 
 * Setter for property <code>type</code>.
 * </p><p>
 * Default value is <code>Simple</code> 
 * @param {sap.m.FacetFilterType} oType  new value for property <code>type</code>
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.setType = function(oType) { return new sap.m.FacetFilter(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.setVisible = function(bVisible) { return new sap.m.FacetFilter(); };


// ---- sap.m.FacetFilterItem --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new FacetFilterItem.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getKey key} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getCount count} : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Represents a value for the FacetFilterList control.
 * @extends sap.m.ListItemBase
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.FacetFilterItem = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.m.FacetFilterItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.FacetFilterItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>count</code>.
 * Number of objects that match this item in the target data set.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {int} the value of property <code>count</code>
 * @public
 * @deprecated Since version 7.20.0. 
 * Use setCounter instead.
 * 
 */
sap.m.FacetFilterItem.prototype.getCount = function() { return 0; };

/**
 * 
 * Getter for property <code>key</code>.
 * Can be used as input for subsequent actions.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>key</code>
 * @public
 * 
 */
sap.m.FacetFilterItem.prototype.getKey = function() { return ""; };

/**
 * 
 * Getter for property <code>text</code>.
 * The text to be displayed for the item.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.FacetFilterItem.prototype.getText = function() { return ""; };

/**
 * 
 * Setter for property <code>count</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {int} iCount  new value for property <code>count</code>
 * @return {sap.m.FacetFilterItem} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 7.20.0. 
 * Use setCounter instead.
 * 
 */
sap.m.FacetFilterItem.prototype.setCount = function(iCount) { return new sap.m.FacetFilterItem(); };

/**
 * 
 * Setter for property <code>key</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sKey  new value for property <code>key</code>
 * @return {sap.m.FacetFilterItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterItem.prototype.setKey = function(sKey) { return new sap.m.FacetFilterItem(); };

/**
 * 
 * Setter for property <code>text</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.FacetFilterItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterItem.prototype.setText = function(sText) { return new sap.m.FacetFilterItem(); };


// ---- sap.m.FacetFilterList --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new FacetFilterList.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getMultiSelect multiSelect} : boolean (default: true)</li>
 * <li>{@link #getActive active} : boolean (default: true)</li>
 * <li>{@link #getAllCount allCount} : int</li>
 * <li>{@link #getSequence sequence} : int (default: -1)</li>
 * <li>{@link #getKey key} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.FacetFilterList#event:listOpen listOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.FacetFilterList#event:listClose listClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.List#constructor sap.m.List}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * FacetFilterList represents a list of values for the FacetFilter control.
 * @extends sap.m.List
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.FacetFilterList = function(sId,mSettings) {};
/**
 * 
 * Triggered after the list of items is closed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.FacetFilterItem[]} oControlEvent.getParameters.selectedItems Array of selected items.  Items returned are only copies and therefore can only be used to read properties, not set them.
 * @param {boolean} oControlEvent.getParameters.allSelected True if the select All checkbox is selected.  This will be false if all items are actually selected (every FacetFilterItem.selected == true).  In that case selectedItems will contain all selected items.
 * @param {object} oControlEvent.getParameters.selectedKeys Associative array containing the keys of selected FacetFilterItems. Unlike the selectedItems parameter, this contains only the keys for all selected items, not the items themselves.  Being an associative array, each object property is the FacetFilterItem key value and the value of the property is the FacetFilterItem text.
 * @public
 */
sap.m.FacetFilterList.prototype.listClose = function(oControlEvent) { return null; };

/**
 * 
 * Fired before the filter list is opened. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.FacetFilterList.prototype.listOpen = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'listClose' event of this <code>sap.m.FacetFilterList</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.FacetFilterList</code>.<br/> itself. 
 * </p><p>
 * Triggered after the list of items is closed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FacetFilterList</code>.<br/> itself.
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.attachListClose = function(oData,fnFunction,oListener) { return new sap.m.FacetFilterList(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'listOpen' event of this <code>sap.m.FacetFilterList</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.FacetFilterList</code>.<br/> itself. 
 * </p><p>
 * Fired before the filter list is opened. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FacetFilterList</code>.<br/> itself.
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.attachListOpen = function(oData,fnFunction,oListener) { return new sap.m.FacetFilterList(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'listClose' event of this <code>sap.m.FacetFilterList</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.detachListClose = function(fnFunction,oListener) { return new sap.m.FacetFilterList(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'listOpen' event of this <code>sap.m.FacetFilterList</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.detachListOpen = function(fnFunction,oListener) { return new sap.m.FacetFilterList(); };

/**
 * 
 * Creates a new subclass of class sap.m.FacetFilterList with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.FacetFilterList.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event listClose to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItems' of type <code>sap.m.FacetFilterItem[]</code> Array of selected items.  Items returned are only copies and therefore can only be used to read properties, not set them.</li>
 * <li>'allSelected' of type <code>boolean</code> True if the select All checkbox is selected.  This will be false if all items are actually selected (every FacetFilterItem.selected == true).  In that case selectedItems will contain all selected items.</li>
 * <li>'selectedKeys' of type <code>object</code> Associative array containing the keys of selected FacetFilterItems. Unlike the selectedItems parameter, this contains only the keys for all selected items, not the items themselves.  Being an associative array, each object property is the FacetFilterItem key value and the value of the property is the FacetFilterItem text.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.FacetFilterList.prototype.fireListClose = function(mArguments) { return new sap.m.FacetFilterList(); };

/**
 * 
 * Fire event listOpen to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.FacetFilterList.prototype.fireListOpen = function(mArguments) { return new sap.m.FacetFilterList(); };

/**
 * 
 * Getter for property <code>active</code>.
 * Indicates that the list is displayed as a button when the FacetFilter type is set to Simple.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>active</code>
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getActive = function() { return false; };

/**
 * 
 * Getter for property <code>allCount</code>.
 * Number of objects that match this item in the target data set when all filter items are selected.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {int} the value of property <code>allCount</code>
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getAllCount = function() { return 0; };

/**
 * 
 * Getter for property <code>key</code>.
 * Unique identifier for this filter list.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>key</code>
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getKey = function() { return ""; };

/**
 * 
 * Getter for property <code>multiSelect</code>.
 * Specifies whether multiple or single selection is used.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>multiSelect</code>
 * @public
 * @deprecated Since version 1.20.0. 
 * This property is no longer supported. Use the setMode method instead. FacetFilterList overrides the setMode method to restrict the possible modes to MultiSelect and SingleSelectMaster. All other modes are ignored and will not be set.
 * 
 */
sap.m.FacetFilterList.prototype.getMultiSelect = function() { return false; };

/**
 * 
 * Returns the keys of the selected elements as an associative array. An empty object is returned if no items are selected.
 * @type object
 * @public
 * @since 1.20.3
 */
sap.m.FacetFilterList.prototype.getSelectedKeys = function() { return new Object(); };

/**
 * 
 * Getter for property <code>sequence</code>.
 * Sequence that determines the order in which facet list is shown on the facet filter. Lists are rendered by ascending order of sequence.
 * </p><p>
 * Default value is <code>-1</code>
 * @return {int} the value of property <code>sequence</code>
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getSequence = function() { return 0; };

/**
 * 
 * Getter for property <code>title</code>.
 * The title of the facet. The facet title is displayed on the facet button when the FacetFilter type is set to Simple. It is also displayed as a list item in the facet page of the dialog.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getTitle = function() { return ""; };

/**
 * 
 * Remove the specified key from the selected keys cache and deselect the item.
 * @param {string} 
 *         sKey
 *         The key of the selected item to be removed from the cache. If null then the text parameter will be used as the key.
 * @param {string} 
 *         sText
 *         The text of the selected item to be removed from the cache. If the key parameter is null then text will be used as the key.
 * @type void
 * @public
 * @since 1.20.4
 */
sap.m.FacetFilterList.prototype.removeSelectedKey = function(sKey,sText) { return null; };

/**
 * 
 * Remove all selected keys from the selected keys cache and deselect all items.
 * @type void
 * @public
 * @since 1.20.4
 */
sap.m.FacetFilterList.prototype.removeSelectedKeys = function() { return null; };

/**
 * 
 * Setter for property <code>active</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bActive  new value for property <code>active</code>
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setActive = function(bActive) { return new sap.m.FacetFilterList(); };

/**
 * 
 * Setter for property <code>allCount</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {int} iAllCount  new value for property <code>allCount</code>
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setAllCount = function(iAllCount) { return new sap.m.FacetFilterList(); };

/**
 * 
 * Setter for property <code>key</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sKey  new value for property <code>key</code>
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setKey = function(sKey) { return new sap.m.FacetFilterList(); };

/**
 * 
 * Override to allow only MultiSelect and SingleSelectMaster list modes. If an invalid mode is given
 * then the mode will not be changed.
 * @param mode {sap.m.ListMode} The list mode
 * @public
 */
sap.m.FacetFilterList.prototype.setMode = function(mode) { return null; };

/**
 * 
 * Setter for property <code>multiSelect</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bMultiSelect  new value for property <code>multiSelect</code>
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20.0. 
 * This property is no longer supported. Use the setMode method instead. FacetFilterList overrides the setMode method to restrict the possible modes to MultiSelect and SingleSelectMaster. All other modes are ignored and will not be set.
 * 
 */
sap.m.FacetFilterList.prototype.setMultiSelect = function(bMultiSelect) { return new sap.m.FacetFilterList(); };

/**
 * 
 * Use this method to pre-select FacetFilterItems, such as when restoring FacetFilterList selections from a variant. Keys are cached separately from the actual FacetFilterItems so that they remain even when the physical items are removed by filtering or sorting. If aKeys is undefined, null, or {} (empty object) then all keys are deleted. After this method completes only those items with matching keys will be selected. All other items in the list will be deselected.
 * @param {object} 
 *         oAKeys
 *         Associative array indicating which FacetFilterItems should be selected in the list. Each property must be set to the value of a FacetFilterItem.key property. Each property value should be set to the FacetFilterItem.text property value. The text value is used to display the FacetFilterItem text when the FacetFilterList button or FacetFilter summary bar is displayed. If no property value is set then the property key is used for the text.
 * @type void
 * @public
 * @since 1.20.3
 */
sap.m.FacetFilterList.prototype.setSelectedKeys = function(oAKeys) { return null; };

/**
 * 
 * Setter for property <code>sequence</code>.
 * </p><p>
 * Default value is <code>-1</code> 
 * @param {int} iSequence  new value for property <code>sequence</code>
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setSequence = function(iSequence) { return new sap.m.FacetFilterList(); };

/**
 * 
 * Setter for property <code>title</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setTitle = function(sTitle) { return new sap.m.FacetFilterList(); };


// ---- sap.m.FacetFilterType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.FacetFilterType.toString = function() { return ""; };

// ---- sap.m.FeedListItem --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new FeedListItem.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getSender sender} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getInfo info} : string</li>
 * <li>{@link #getTimestamp timestamp} : string</li>
 * <li>{@link #getSenderActive senderActive} : boolean (default: true)</li>
 * <li>{@link #getIconActive iconActive} : boolean (default: true)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getShowIcon showIcon} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.FeedListItem#event:senderPress senderPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.FeedListItem#event:iconPress iconPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The control provides a set of properties for text, sender information, time stamp
 * @extends sap.m.ListItemBase
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.12
 * 
 */
sap.m.FeedListItem = function(sId,mSettings) {};
/**
 * 
 * Event is fired when the icon is pressed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.domRef Dom reference of the feed item's icon to be used for positioning.
 * @public
 */
sap.m.FeedListItem.prototype.iconPress = function(oControlEvent) { return null; };

/**
 * 
 * Event is fired when name of the sender is pressed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.domRef Dom reference of the feed item's sender string to be used for positioning.
 * @public
 */
sap.m.FeedListItem.prototype.senderPress = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'iconPress' event of this <code>sap.m.FeedListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.FeedListItem</code>.<br/> itself. 
 * </p><p>
 * Event is fired when the icon is pressed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FeedListItem</code>.<br/> itself.
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.attachIconPress = function(oData,fnFunction,oListener) { return new sap.m.FeedListItem(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'senderPress' event of this <code>sap.m.FeedListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.FeedListItem</code>.<br/> itself. 
 * </p><p>
 * Event is fired when name of the sender is pressed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FeedListItem</code>.<br/> itself.
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.attachSenderPress = function(oData,fnFunction,oListener) { return new sap.m.FeedListItem(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'iconPress' event of this <code>sap.m.FeedListItem</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.detachIconPress = function(fnFunction,oListener) { return new sap.m.FeedListItem(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'senderPress' event of this <code>sap.m.FeedListItem</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.detachSenderPress = function(fnFunction,oListener) { return new sap.m.FeedListItem(); };

/**
 * 
 * Creates a new subclass of class sap.m.FeedListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.FeedListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event iconPress to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>string</code> Dom reference of the feed item's icon to be used for positioning.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.FeedListItem.prototype.fireIconPress = function(mArguments) { return new sap.m.FeedListItem(); };

/**
 * 
 * Fire event senderPress to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>string</code> Dom reference of the feed item's sender string to be used for positioning.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.FeedListItem.prototype.fireSenderPress = function(mArguments) { return new sap.m.FeedListItem(); };

/**
 * 
 * Getter for property <code>activeIcon</code>.
 * Icon displayed when the list item is active.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>activeIcon</code>
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getActiveIcon = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>icon</code>.
 * Icon to be displayed as graphical element within the FeedListItem. This can be an image or an icon from the icon font.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>iconActive</code>.
 * If true, icon is an link, which will fire 'iconPress' events. If false, icon is normal image
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconActive</code>
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getIconActive = function() { return false; };

/**
 * 
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * </p><p>
 * If bandwidth is the key for the application, set this value to false.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getIconDensityAware = function() { return false; };

/**
 * 
 * Getter for property <code>info</code>.
 * The Info text.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>info</code>
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getInfo = function() { return ""; };

/**
 * 
 * Getter for property <code>sender</code>.
 * Sender of the chunk
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>sender</code>
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getSender = function() { return ""; };

/**
 * 
 * Getter for property <code>senderActive</code>.
 * If true, sender string is an link, which will fire 'senderPress' events. If false, sender is normal text.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>senderActive</code>
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getSenderActive = function() { return false; };

/**
 * 
 * Getter for property <code>showIcon</code>.
 * If set to "true" (default), icons will be displayed, if set to false icons are hidden
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showIcon</code>
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getShowIcon = function() { return false; };

/**
 * 
 * Getter for property <code>text</code>.
 * The FeedListItem text.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getText = function() { return ""; };

/**
 * 
 * Getter for property <code>timestamp</code>.
 * This chunks timestamp
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>timestamp</code>
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getTimestamp = function() { return ""; };

/**
 * 
 * Setter for property <code>activeIcon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sActiveIcon  new value for property <code>activeIcon</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setActiveIcon = function(sActiveIcon) { return new sap.m.FeedListItem(); };

/**
 * 
 * Setter for property <code>icon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setIcon = function(sIcon) { return new sap.m.FeedListItem(); };

/**
 * 
 * Setter for property <code>iconActive</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bIconActive  new value for property <code>iconActive</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setIconActive = function(bIconActive) { return new sap.m.FeedListItem(); };

/**
 * 
 * Setter for property <code>iconDensityAware</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.FeedListItem(); };

/**
 * 
 * Setter for property <code>info</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sInfo  new value for property <code>info</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setInfo = function(sInfo) { return new sap.m.FeedListItem(); };

/**
 * 
 * Setter for property <code>sender</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sSender  new value for property <code>sender</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setSender = function(sSender) { return new sap.m.FeedListItem(); };

/**
 * 
 * Setter for property <code>senderActive</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bSenderActive  new value for property <code>senderActive</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setSenderActive = function(bSenderActive) { return new sap.m.FeedListItem(); };

/**
 * 
 * Setter for property <code>showIcon</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bShowIcon  new value for property <code>showIcon</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setShowIcon = function(bShowIcon) { return new sap.m.FeedListItem(); };

/**
 * 
 * Setter for property <code>text</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setText = function(sText) { return new sap.m.FeedListItem(); };

/**
 * 
 * Setter for property <code>timestamp</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sTimestamp  new value for property <code>timestamp</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setTimestamp = function(sTimestamp) { return new sap.m.FeedListItem(); };


// ---- sap.m.FlexAlignItems --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.FlexAlignItems.toString = function() { return ""; };

// ---- sap.m.FlexAlignSelf --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.FlexAlignSelf.toString = function() { return ""; };

// ---- sap.m.FlexBox --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new FlexBox.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '')</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '')</li>
 * <li>{@link #getDisplayInline displayInline} : boolean (default: false)</li>
 * <li>{@link #getDirection direction} : sap.m.FlexDirection (default: sap.m.FlexDirection.Row)</li>
 * <li>{@link #getFitContainer fitContainer} : boolean (default: false)</li>
 * <li>{@link #getRenderType renderType} : sap.m.FlexRendertype (default: sap.m.FlexRendertype.Div)</li>
 * <li>{@link #getJustifyContent justifyContent} : sap.m.FlexJustifyContent (default: sap.m.FlexJustifyContent.Start)</li>
 * <li>{@link #getAlignItems alignItems} : sap.m.FlexAlignItems (default: sap.m.FlexAlignItems.Stretch)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The FlexBox control builds the container for a flexible box layout.
 * </p><p>
 * Browser support:
 * This control is not supported in Internet Explorer 9!
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.FlexBox = function(sId,mSettings) {};
/**
 * 
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 * @param {sap.ui.core.Control}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexBox.prototype.addItem = function(oItem) { return new sap.m.FlexBox(); };

/**
 * 
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexBox.prototype.destroyItems = function() { return new sap.m.FlexBox(); };

/**
 * 
 * Creates a new subclass of class sap.m.FlexBox with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.FlexBox.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>alignItems</code>.
 * Determines the layout behavior of items along the cross-axis. "Baseline" is not supported in Internet Explorer <10.
 * </p><p>
 * Default value is <code>Stretch</code>
 * @return {sap.m.FlexAlignItems} the value of property <code>alignItems</code>
 * @public
 * 
 */
sap.m.FlexBox.prototype.getAlignItems = function() { return new sap.m.FlexAlignItems(); };

/**
 * 
 * Getter for property <code>direction</code>.
 * Determines the direction of the layout of child elements
 * </p><p>
 * Default value is <code>Row</code>
 * @return {sap.m.FlexDirection} the value of property <code>direction</code>
 * @public
 * 
 */
sap.m.FlexBox.prototype.getDirection = function() { return new sap.m.FlexDirection(); };

/**
 * 
 * Getter for property <code>displayInline</code>.
 * Determines whether the flexbox is in block or inline mode
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>displayInline</code>
 * @public
 * 
 */
sap.m.FlexBox.prototype.getDisplayInline = function() { return false; };

/**
 * 
 * Getter for property <code>fitContainer</code>.
 * Determines whether the flexbox will be sized to completely fill its container. If the FlexBox is inserted into a Page, the property 'enableScrolling' of the Page needs to be set to 'false' for the FlexBox to fit the entire viewport.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>fitContainer</code>
 * @public
 * 
 */
sap.m.FlexBox.prototype.getFitContainer = function() { return false; };

/**
 * 
 * Getter for property <code>height</code>.
 * The height of the FlexBox. Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @since 1.9.1
 * 
 */
sap.m.FlexBox.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for aggregation <code>items</code>.<br/>
 * Flex items within the FlexBox layout
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for FlexBox.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.FlexBox.prototype.getItems = function() { return new Array(); };

/**
 * 
 * Getter for property <code>justifyContent</code>.
 * Determines the layout behavior along the main axis. "SpaceAround" is currently not supported in most non-Webkit browsers.
 * </p><p>
 * Default value is <code>Start</code>
 * @return {sap.m.FlexJustifyContent} the value of property <code>justifyContent</code>
 * @public
 * 
 */
sap.m.FlexBox.prototype.getJustifyContent = function() { return new sap.m.FlexJustifyContent(); };

/**
 * 
 * Getter for property <code>renderType</code>.
 * Determines whether the layout is rendered as a series of divs or as an unordered list (ul)
 * </p><p>
 * Default value is <code>Div</code>
 * @return {sap.m.FlexRendertype} the value of property <code>renderType</code>
 * @public
 * 
 */
sap.m.FlexBox.prototype.getRenderType = function() { return new sap.m.FlexRendertype(); };

/**
 * 
 * Getter for property <code>visible</code>.
 * Is the control visible
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.FlexBox.prototype.getVisible = function() { return false; };

/**
 * 
 * Getter for property <code>width</code>.
 * The width of the FlexBox. Note that when a percentage is given, for the width to work as expected, the width of the surrounding container must be defined.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @since 1.9.1
 * 
 */
sap.m.FlexBox.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.FlexBox.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * 
 * Inserts a item into the aggregation named <code>items</code>.
 * @param {sap.ui.core.Control}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexBox.prototype.insertItem = function(oItem,iIndex) { return new sap.m.FlexBox(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.FlexBox.prototype.removeAllItems = function() { return new Array(); };

/**
 * 
 * Removes an item from the aggregation named <code>items</code>.
 * @param {int | string | sap.ui.core.Control} vItem the item to remove or its index or id
 * @return {sap.ui.core.Control} the removed item or null
 * @public
 * 
 */
sap.m.FlexBox.prototype.removeItem = function(vItem) { return new sap.ui.core.Control(); };

/**
 * 
 * Setter for property <code>alignItems</code>.
 * </p><p>
 * Default value is <code>Stretch</code> 
 * @param {sap.m.FlexAlignItems} oAlignItems  new value for property <code>alignItems</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexBox.prototype.setAlignItems = function(oAlignItems) { return new sap.m.FlexBox(); };

/**
 * 
 * Setter for property <code>direction</code>.
 * </p><p>
 * Default value is <code>Row</code> 
 * @param {sap.m.FlexDirection} oDirection  new value for property <code>direction</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexBox.prototype.setDirection = function(oDirection) { return new sap.m.FlexBox(); };

/**
 * 
 * Setter for property <code>displayInline</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bDisplayInline  new value for property <code>displayInline</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexBox.prototype.setDisplayInline = function(bDisplayInline) { return new sap.m.FlexBox(); };

/**
 * 
 * Setter for property <code>fitContainer</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bFitContainer  new value for property <code>fitContainer</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexBox.prototype.setFitContainer = function(bFitContainer) { return new sap.m.FlexBox(); };

/**
 * 
 * Setter for property <code>height</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.1
 * 
 */
sap.m.FlexBox.prototype.setHeight = function(sHeight) { return new sap.m.FlexBox(); };

/**
 * 
 * Setter for property <code>justifyContent</code>.
 * </p><p>
 * Default value is <code>Start</code> 
 * @param {sap.m.FlexJustifyContent} oJustifyContent  new value for property <code>justifyContent</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexBox.prototype.setJustifyContent = function(oJustifyContent) { return new sap.m.FlexBox(); };

/**
 * 
 * Setter for property <code>renderType</code>.
 * </p><p>
 * Default value is <code>Div</code> 
 * @param {sap.m.FlexRendertype} oRenderType  new value for property <code>renderType</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexBox.prototype.setRenderType = function(oRenderType) { return new sap.m.FlexBox(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexBox.prototype.setVisible = function(bVisible) { return new sap.m.FlexBox(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.1
 * 
 */
sap.m.FlexBox.prototype.setWidth = function(sWidth) { return new sap.m.FlexBox(); };


// ---- sap.m.FlexDirection --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.FlexDirection.toString = function() { return ""; };

// ---- sap.m.FlexItemData --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new FlexItemData.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getAlignSelf alignSelf} : sap.m.FlexAlignSelf (default: sap.m.FlexAlignSelf.Auto)</li>
 * <li>{@link #getOrder order} : int (default: 0)</li>
 * <li>{@link #getGrowFactor growFactor} : float (default: 0)</li>
 * <li>{@link #getStyleClass styleClass} : string (default: '')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Holds layout data for a FlexBox
 * @extends sap.ui.core.LayoutData
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.FlexItemData = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.m.FlexItemData with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.FlexItemData.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>alignSelf</code>.
 * Determines cross-axis alignment of individual element (not currently supported in Internet Explorer)
 * </p><p>
 * Default value is <code>Auto</code>
 * @return {sap.m.FlexAlignSelf} the value of property <code>alignSelf</code>
 * @public
 * 
 */
sap.m.FlexItemData.prototype.getAlignSelf = function() { return new sap.m.FlexAlignSelf(); };

/**
 * 
 * Getter for property <code>growFactor</code>.
 * Determines the flexibility of the flex item when allocatable space is remaining.
 * </p><p>
 * Default value is <code>0</code>
 * @return {float} the value of property <code>growFactor</code>
 * @public
 * 
 */
sap.m.FlexItemData.prototype.getGrowFactor = function() { return 0.0; };

/**
 * 
 * Getter for property <code>order</code>.
 * Determines the display order of flex items independent of their source code order.
 * </p><p>
 * Default value is <code>0</code>
 * @return {int} the value of property <code>order</code>
 * @public
 * 
 */
sap.m.FlexItemData.prototype.getOrder = function() { return 0; };

/**
 * 
 * Getter for property <code>styleClass</code>.
 * The style class will be applied to the flex item and can be used for CSS selectors
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>styleClass</code>
 * @public
 * @deprecated Since version 1.11.2. 
 * Generic addStyleClass method is available on the control
 * 
 */
sap.m.FlexItemData.prototype.getStyleClass = function() { return ""; };

/**
 * 
 * Setter for property <code>alignSelf</code>.
 * </p><p>
 * Default value is <code>Auto</code> 
 * @param {sap.m.FlexAlignSelf} oAlignSelf  new value for property <code>alignSelf</code>
 * @return {sap.m.FlexItemData} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexItemData.prototype.setAlignSelf = function(oAlignSelf) { return new sap.m.FlexItemData(); };

/**
 * 
 * Setter for property <code>growFactor</code>.
 * </p><p>
 * Default value is <code>0</code> 
 * @param {float} fGrowFactor  new value for property <code>growFactor</code>
 * @return {sap.m.FlexItemData} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexItemData.prototype.setGrowFactor = function(fGrowFactor) { return new sap.m.FlexItemData(); };

/**
 * 
 * Setter for property <code>order</code>.
 * </p><p>
 * Default value is <code>0</code> 
 * @param {int} iOrder  new value for property <code>order</code>
 * @return {sap.m.FlexItemData} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.FlexItemData.prototype.setOrder = function(iOrder) { return new sap.m.FlexItemData(); };

/**
 * 
 * Setter for property <code>styleClass</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sStyleClass  new value for property <code>styleClass</code>
 * @return {sap.m.FlexItemData} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.11.2. 
 * Generic addStyleClass method is available on the control
 * 
 */
sap.m.FlexItemData.prototype.setStyleClass = function(sStyleClass) { return new sap.m.FlexItemData(); };


// ---- sap.m.FlexJustifyContent --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.FlexJustifyContent.toString = function() { return ""; };

// ---- sap.m.FlexRendertype --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.FlexRendertype.toString = function() { return ""; };

// ---- sap.m.GroupHeaderListItem --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new GroupHeaderListItem.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getCount count} : string</li>
 * <li>{@link #getUpperCase upperCase} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The group header list item is used to display the title of a group and act as separator between groups in Lists.
 * </p><p>
 * There are several API parts inherited from ListItemBase which do not apply here:
 * The properties "type", "unread", "selected" and "counter" are currently ignored.
 * Tap events will not be fired.
 * @extends sap.m.ListItemBase
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.12
 * 
 */
sap.m.GroupHeaderListItem = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.m.GroupHeaderListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.GroupHeaderListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>count</code>.
 * A text to be displayed in the group header in brackets next to the group title. Usually the count of items in the group, but it could also be an amount which represents the sum of all amounts in the group.
 * Will not be displayed if not set.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>count</code>
 * @public
 * 
 */
sap.m.GroupHeaderListItem.prototype.getCount = function() { return ""; };

/**
 * 
 * Getter for property <code>title</code>.
 * The title of the group header.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.GroupHeaderListItem.prototype.getTitle = function() { return ""; };

/**
 * 
 * Getter for property <code>upperCase</code>.
 * Title will be put to capital letters by default, otherwise set this property to 'false'
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>upperCase</code>
 * @public
 * @since 1.13.2
 * 
 */
sap.m.GroupHeaderListItem.prototype.getUpperCase = function() { return false; };

/**
 * 
 * Setter for property <code>count</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sCount  new value for property <code>count</code>
 * @return {sap.m.GroupHeaderListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.GroupHeaderListItem.prototype.setCount = function(sCount) { return new sap.m.GroupHeaderListItem(); };

/**
 * 
 * Setter for property <code>title</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.GroupHeaderListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.GroupHeaderListItem.prototype.setTitle = function(sTitle) { return new sap.m.GroupHeaderListItem(); };

/**
 * 
 * Setter for property <code>upperCase</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bUpperCase  new value for property <code>upperCase</code>
 * @return {sap.m.GroupHeaderListItem} <code>this</code> to allow method chaining
 * @public
 * @since 1.13.2
 * 
 */
sap.m.GroupHeaderListItem.prototype.setUpperCase = function(bUpperCase) { return new sap.m.GroupHeaderListItem(); };


// ---- sap.m.GrowingEnablement --------------------------------------------------------------------------

/**
 * 
 * Creates a GrowingEnablement delegate that can be attached to ListBase Controls requiring capabilities for growing
 * @extends sap.ui.base.Object
 * @experimental Since 1.16. This class is experimental and provides only limited functionality. Also the API might be changed in future.
 * @param {sap.m.ListBase} oControl the ListBase control of which this Growing is the delegate
 * @constructor
 * @protected
 */
sap.m.GrowingEnablement = function(oControl) {};

// ---- sap.m.GrowingList --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new GrowingList.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getThreshold threshold} : int (default: 20)</li>
 * <li>{@link #getTriggerText triggerText} : string</li>
 * <li>{@link #getScrollToLoad scrollToLoad} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.List#constructor sap.m.List}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * sap.m.GrowingList control is the container for all list items and inherits from sap.m.List control. Everything like the selection, deletion, unread states and inset style are also maintained here. In addition the control provides a loading mechanism to request data from the model and append the list items to the list. The request is started manually by tapping on the trigger at the end of the list.
 * @extends sap.m.List
 * @version 1.20.7
 * @constructor   
 * @public
 * @deprecated Since version 1.16. 
 * Instead use "List" or "Table" control with setting "growing" property to "true"
 * 
 */
sap.m.GrowingList = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.m.GrowingList with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.GrowingList.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>scrollToLoad</code>.
 * If you set this property to true then user needs to scroll end to trigger loading a new page. Default value is false which means user needs to scroll end and then click button to load new page.
 * NOTE: This property can be set true, if growing property is set "true" and if you only have one instance of this control inside the scroll container(e.g Page).
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>scrollToLoad</code>
 * @public
 * @since 1.16
 * 
 */
sap.m.GrowingList.prototype.getScrollToLoad = function() { return false; };

/**
 * 
 * Getter for property <code>threshold</code>.
 * Number of items requested from the server. To activate this you should set growing property to "true"
 * </p><p>
 * Default value is <code>20</code>
 * @return {int} the value of property <code>threshold</code>
 * @public
 * @since 1.16
 * 
 */
sap.m.GrowingList.prototype.getThreshold = function() { return 0; };

/**
 * 
 * Getter for property <code>triggerText</code>.
 * Text which is displayed on the trigger at the end of the list. The default is a translated text ("Load More Data") coming from the messagebundle properties.
 * This property can be used only if growing property is set "true" and scrollToLoad property is set "false".
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>triggerText</code>
 * @public
 * @since 1.16
 * 
 */
sap.m.GrowingList.prototype.getTriggerText = function() { return ""; };

/**
 * 
 * Setter for property <code>scrollToLoad</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bScrollToLoad  new value for property <code>scrollToLoad</code>
 * @return {sap.m.GrowingList} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.GrowingList.prototype.setScrollToLoad = function(bScrollToLoad) { return new sap.m.GrowingList(); };

/**
 * 
 * Setter for property <code>threshold</code>.
 * </p><p>
 * Default value is <code>20</code> 
 * @param {int} iThreshold  new value for property <code>threshold</code>
 * @return {sap.m.GrowingList} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.GrowingList.prototype.setThreshold = function(iThreshold) { return new sap.m.GrowingList(); };

/**
 * 
 * Setter for property <code>triggerText</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sTriggerText  new value for property <code>triggerText</code>
 * @return {sap.m.GrowingList} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.GrowingList.prototype.setTriggerText = function(sTriggerText) { return new sap.m.GrowingList(); };


// ---- sap.m.HBox --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new HBox.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.FlexBox#constructor sap.m.FlexBox}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The HBox control builds the container for a horizontal flexible box layout. HBox is a convenience control as it is just a specialized FlexBox control.
 * </p><p>
 * Browser support:
 * This control is not supported in Internet Explorer 9!
 * @extends sap.m.FlexBox
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.HBox = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.m.HBox with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.HBox.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };


// ---- sap.m.HeaderLevel --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.HeaderLevel.toString = function() { return ""; };

// ---- sap.m.IconTab --------------------------------------------------------------------------


// ---- sap.m.IconTabBar --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new IconTabBar.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowSelection showSelection} : boolean (default: true)</li>
 * <li>{@link #getExpandable expandable} : boolean (default: true)</li>
 * <li>{@link #getExpanded expanded} : boolean (default: true)</li>
 * <li>{@link #getSelectedKey selectedKey} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.IconTab[]</li>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.IconTabBar#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.IconTabBar#event:expand expand} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A tab bar with large icons
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.IconTabBar = function(sId,mSettings) {};
/**
 * 
 * Indicates that the tab will expand or collapse 
 * @event
 * @since 1.15.0
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.expand If the tab will expand, this is true.
 * @param {boolean} oControlEvent.getParameters.collapse If the tab will collapse, this is true.
 * @public
 */
sap.m.IconTabBar.prototype.expand = function(oControlEvent) { return null; };

/**
 * 
 * This event will be fired when an item is selected. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.IconTabFilter} oControlEvent.getParameters.item The selected item.
 * @param {string} oControlEvent.getParameters.key The key of the selected item.
 * @param {sap.m.IconTabFilter} oControlEvent.getParameters.selectedItem This parameter is deprecated since 1.15.0! Please use parameter "item" instead.
 * @param {string} oControlEvent.getParameters.selectedKey This parameter is deprecated since 1.15.0! Please use parameter "key" instead.
 * @public
 */
sap.m.IconTabBar.prototype.select = function(oControlEvent) { return null; };

/**
 * 
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabBar.prototype.addContent = function(oContent) { return new sap.m.IconTabBar(); };

/**
 * 
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 * @param {sap.m.IconTab}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabBar.prototype.addItem = function(oItem) { return new sap.m.IconTabBar(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'expand' event of this <code>sap.m.IconTabBar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.IconTabBar</code>.<br/> itself. 
 * </p><p>
 * Indicates that the tab will expand or collapse 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.IconTabBar</code>.<br/> itself.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * 
 */
sap.m.IconTabBar.prototype.attachExpand = function(oData,fnFunction,oListener) { return new sap.m.IconTabBar(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.IconTabBar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.IconTabBar</code>.<br/> itself. 
 * </p><p>
 * This event will be fired when an item is selected. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.IconTabBar</code>.<br/> itself.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabBar.prototype.attachSelect = function(oData,fnFunction,oListener) { return new sap.m.IconTabBar(); };

/**
 * 
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabBar.prototype.destroyContent = function() { return new sap.m.IconTabBar(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'expand' event of this <code>sap.m.IconTabBar</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * 
 */
sap.m.IconTabBar.prototype.detachExpand = function(fnFunction,oListener) { return new sap.m.IconTabBar(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.IconTabBar</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabBar.prototype.detachSelect = function(fnFunction,oListener) { return new sap.m.IconTabBar(); };

/**
 * 
 * Creates a new subclass of class sap.m.IconTabBar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.IconTabBar.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event expand to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'expand' of type <code>boolean</code> If the tab will expand, this is true.</li>
 * <li>'collapse' of type <code>boolean</code> If the tab will collapse, this is true.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @protected
 * @since 1.15.0
 * 
 */
sap.m.IconTabBar.prototype.fireExpand = function(mArguments) { return new sap.m.IconTabBar(); };

/**
 * 
 * Fire event select to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'item' of type <code>sap.m.IconTabFilter</code> The selected item.</li>
 * <li>'key' of type <code>string</code> The key of the selected item.</li>
 * <li>'selectedItem' of type <code>sap.m.IconTabFilter</code> This parameter is deprecated since 1.15.0! Please use parameter "item" instead.</li>
 * <li>'selectedKey' of type <code>string</code> This parameter is deprecated since 1.15.0! Please use parameter "key" instead.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.IconTabBar.prototype.fireSelect = function(mArguments) { return new sap.m.IconTabBar(); };

/**
 * 
 * Getter for aggregation <code>content</code>.<br/>
 * The contents displayed below the IconTabBar.
 * If there are multiple contents, they are rendered after each other. The developer has to manage to display the right one or use the content aggregation inside the IconTabFilter (which will be displayed instead if it is set).
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getContent = function() { return new Array(); };

/**
 * 
 * Getter for property <code>expandable</code>.
 * Defines if the tabs can be collapsed and expanded
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>expandable</code>
 * @public
 * @since 1.15.0
 * 
 */
sap.m.IconTabBar.prototype.getExpandable = function() { return false; };

/**
 * 
 * Getter for property <code>expanded</code>.
 * Indicates if the actual tab is expanded or not
 * </p><p>
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>expanded</code>
 * @public
 * @since 1.15.0
 * 
 */
sap.m.IconTabBar.prototype.getExpanded = function() { return false; };

/**
 * 
 * Getter for aggregation <code>items</code>.<br/>
 * The items displayed in the IconTabBar
 * @return {sap.m.IconTab[]}
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getItems = function() { return new Array(); };

/**
 * 
 * Getter for property <code>selectedKey</code>.
 * Key of the selected item.
 * </p><p>
 * If the key has no corresponding aggregated item, no changes will apply.
 * If duplicate keys exists the first item matching the key is used.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>selectedKey</code>
 * @public
 * @since 1.15.0
 * 
 */
sap.m.IconTabBar.prototype.getSelectedKey = function() { return ""; };

/**
 * 
 * Getter for property <code>showSelection</code>.
 * Defines whether the current selection should be visualized
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showSelection</code>
 * @public
 * @deprecated Since version 1.15.0. 
 * Regarding to changes of this control this property is not needed anymore.
 * 
 */
sap.m.IconTabBar.prototype.getShowSelection = function() { return false; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @since 1.15.0
 * 
 */
sap.m.IconTabBar.prototype.getVisible = function() { return false; };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.IconTabBar.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * 
 * Checks for the provided <code>sap.m.IconTab</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.IconTab}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.IconTabBar.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * 
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabBar.prototype.insertContent = function(oContent,iIndex) { return new sap.m.IconTabBar(); };

/**
 * 
 * Inserts a item into the aggregation named <code>items</code>.
 * @param {sap.m.IconTab}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabBar.prototype.insertItem = function(oItem,iIndex) { return new sap.m.IconTabBar(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.IconTabBar.prototype.removeAllContent = function() { return new Array(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.IconTab[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.IconTabBar.prototype.removeAllItems = function() { return new Array(); };

/**
 * 
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * 
 */
sap.m.IconTabBar.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * 
 * Removes an item from the aggregation named <code>items</code>.
 * @param {int | string | sap.m.IconTab} vItem the item to remove or its index or id
 * @return {sap.m.IconTab} the removed item or null
 * @public
 * 
 */
sap.m.IconTabBar.prototype.removeItem = function(vItem) { return new sap.m.IconTab(); };

/**
 * 
 * Sets the expandable flag without rerendering
 * @overwrite
 * @public
 * @param {boolean} bExpandable new parameter value
 * @return {sap.m.IconTabBar} this pointer for chaining
 */
sap.m.IconTabBar.prototype.setExpandable = function(bExpandable) { return new sap.m.IconTabBar(); };

/**
 * 
 * Sets the expanded flag and toggles the expand/collapse animation if the control is already rendered
 * @overwrite
 * @public
 * @param {boolean} bExpanded new parameter value
 * @return {sap.m.IconTabBar} this pointer for chaining
 */
sap.m.IconTabBar.prototype.setExpanded = function(bExpanded) { return new sap.m.IconTabBar(); };

/**
 * 
 * Sets the selected item based on key
 * @overwrite
 * @public
 * @param {string} sKey the key of the item to be selected
 * @return {sap.m.IconTabBar} this pointer for chaining
 */
sap.m.IconTabBar.prototype.setSelectedKey = function(sKey) { return new sap.m.IconTabBar(); };

/**
 * 
 * Setter for property <code>showSelection</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bShowSelection  new value for property <code>showSelection</code>
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.15.0. 
 * Regarding to changes of this control this property is not needed anymore.
 * 
 */
sap.m.IconTabBar.prototype.setShowSelection = function(bShowSelection) { return new sap.m.IconTabBar(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * 
 */
sap.m.IconTabBar.prototype.setVisible = function(bVisible) { return new sap.m.IconTabBar(); };


// ---- sap.m.IconTabFilter --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new IconTabFilter.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getCount count} : string (default: '')</li>
 * <li>{@link #getShowAll showAll} : boolean (default: false)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI (default: '')</li>
 * <li>{@link #getIconColor iconColor} : sap.ui.core.IconColor (default: sap.ui.core.IconColor.Default)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getDesign design} : sap.m.IconTabFilterDesign (default: sap.m.IconTabFilterDesign.Vertical)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The filter item class
 * @extends sap.ui.core.Item
 * @implements sap.m.IconTab
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.IconTabFilter = function(sId,mSettings) {};
/**
 * 
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * 
 */
sap.m.IconTabFilter.prototype.addContent = function(oContent) { return new sap.m.IconTabFilter(); };

/**
 * 
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * 
 */
sap.m.IconTabFilter.prototype.destroyContent = function() { return new sap.m.IconTabFilter(); };

/**
 * 
 * Creates a new subclass of class sap.m.IconTabFilter with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.IconTabFilter.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>content</code>.<br/>
 * The content to show for this item (optional).
 * If this content is set, it will be displayed instead of the general content inside the IconTabBar.
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for IconTabFilter.
 * @return {sap.ui.core.Control[]}
 * @public
 * @since 1.15.0
 * 
 */
sap.m.IconTabFilter.prototype.getContent = function() { return new Array(); };

/**
 * 
 * Getter for property <code>count</code>.
 * The number of available items if this filter is applied
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>count</code>
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.getCount = function() { return ""; };

/**
 * 
 * Getter for property <code>design</code>.
 * Design for the filter item.
 * </p><p>
 * Default value is <code>Vertical</code>
 * @return {sap.m.IconTabFilterDesign} the value of property <code>design</code>
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.getDesign = function() { return new sap.m.IconTabFilterDesign(); };

/**
 * 
 * Getter for property <code>icon</code>.
 * The icon to display for this item.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>iconColor</code>.
 * If an icon font is used, the color can be chosen from the icon colors (sap.ui.core.IconColor).
 * Possible semantic colors are: Neutral, Positive, Critical, Negative.
 * Instead of the semantic icon color the brand color can be used, this is named Default.
 * Semantic colors and brand colors should not be mixed up inside one IconTabBar.
 * </p><p>
 * Default value is <code>Default</code>
 * @return {sap.ui.core.IconColor} the value of property <code>iconColor</code>
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.getIconColor = function() { return new sap.ui.core.IconColor(); };

/**
 * 
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * </p><p>
 * If bandwidth is the key for the application, set this value to false.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.getIconDensityAware = function() { return false; };

/**
 * 
 * Getter for property <code>showAll</code>.
 * Enables special visualization for disabled filter (show all items)
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showAll</code>
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.getShowAll = function() { return false; };

/**
 * 
 * Getter for property <code>visible</code>.
 * If set to false, the control is not rendered.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.getVisible = function() { return false; };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @since 1.15.0
 * 
 */
sap.m.IconTabFilter.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * 
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * 
 */
sap.m.IconTabFilter.prototype.insertContent = function(oContent,iIndex) { return new sap.m.IconTabFilter(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @since 1.15.0
 * 
 */
sap.m.IconTabFilter.prototype.removeAllContent = function() { return new Array(); };

/**
 * 
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @since 1.15.0
 * 
 */
sap.m.IconTabFilter.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * 
 * Setter for property <code>count</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sCount  new value for property <code>count</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.setCount = function(sCount) { return new sap.m.IconTabFilter(); };

/**
 * 
 * Setter for property <code>design</code>.
 * </p><p>
 * Default value is <code>Vertical</code> 
 * @param {sap.m.IconTabFilterDesign} oDesign  new value for property <code>design</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.setDesign = function(oDesign) { return new sap.m.IconTabFilter(); };

/**
 * 
 * Setter for property <code>icon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.setIcon = function(sIcon) { return new sap.m.IconTabFilter(); };

/**
 * 
 * Setter for property <code>iconColor</code>.
 * </p><p>
 * Default value is <code>Default</code> 
 * @param {sap.ui.core.IconColor} oIconColor  new value for property <code>iconColor</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.setIconColor = function(oIconColor) { return new sap.m.IconTabFilter(); };

/**
 * 
 * Setter for property <code>iconDensityAware</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.IconTabFilter(); };

/**
 * 
 * Setter for property <code>showAll</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bShowAll  new value for property <code>showAll</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.setShowAll = function(bShowAll) { return new sap.m.IconTabFilter(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.setVisible = function(bVisible) { return new sap.m.IconTabFilter(); };


// ---- sap.m.IconTabFilterDesign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.IconTabFilterDesign.toString = function() { return ""; };

// ---- sap.m.IconTabSeparator --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new IconTabSeparator.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : sap.ui.core.URI (default: '')</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A tab separator item class
 * @extends sap.ui.core.Element
 * @implements sap.m.IconTab
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.IconTabSeparator = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.m.IconTabSeparator with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.IconTabSeparator.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>icon</code>.
 * The icon to display for this separator. If no icon is given, a separator line will be used instead.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.m.IconTabSeparator.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * </p><p>
 * If bandwidth is the key for the application, set this value to false.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * 
 */
sap.m.IconTabSeparator.prototype.getIconDensityAware = function() { return false; };

/**
 * 
 * Setter for property <code>icon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.IconTabSeparator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabSeparator.prototype.setIcon = function(sIcon) { return new sap.m.IconTabSeparator(); };

/**
 * 
 * Setter for property <code>iconDensityAware</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.m.IconTabSeparator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.IconTabSeparator.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.IconTabSeparator(); };


// ---- sap.m.Image --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new Image.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSrc src} : sap.ui.core.URI</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getDecorative decorative} : boolean (default: true)</li>
 * <li>{@link #getAlt alt} : string</li>
 * <li>{@link #getUseMap useMap} : string</li>
 * <li>{@link #getDensityAware densityAware} : boolean (default: true)</li>
 * <li>{@link #getActiveSrc activeSrc} : sap.ui.core.URI (default: "")</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Image#event:tap tap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Image#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A wrapper around the IMG tag. The image can be loaded from a remote or local server.
 * </p><p>
 * Density related image will be loaded if image with density awareness name in format [imageName]@[densityValue].[extension] is provided. The valid desity values are 1, 1.5, 2. If the original devicePixelRatio isn't one of the three valid numbers, it's rounded up to the nearest one.
 * </p><p>
 * There are various size setting options available, and the images can be combined with actions.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.Image = function(sId,mSettings) {};
/**
 * 
 * Event is fired when the user clicks on the control. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.Image.prototype.press = function(oControlEvent) { return null; };

/**
 * 
 * Event is fired when the user clicks on the control. (This event is deprecated, use the press event instead) 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.Image.prototype.tap = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Image</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Image</code>.<br/> itself. 
 * </p><p>
 * Event is fired when the user clicks on the control. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Image</code>.<br/> itself.
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Image.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.Image(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.Image</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Image</code>.<br/> itself. 
 * </p><p>
 * Event is fired when the user clicks on the control. (This event is deprecated, use the press event instead) 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Image</code>.<br/> itself.
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Image.prototype.attachTap = function(oData,fnFunction,oListener) { return new sap.m.Image(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Image</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Image.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.Image(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.Image</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Image.prototype.detachTap = function(fnFunction,oListener) { return new sap.m.Image(); };

/**
 * 
 * Creates a new subclass of class sap.m.Image with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Image.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event press to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Image.prototype.firePress = function(mArguments) { return new sap.m.Image(); };

/**
 * 
 * Fire event tap to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Image.prototype.fireTap = function(mArguments) { return new sap.m.Image(); };

/**
 * 
 * Getter for property <code>activeSrc</code>.
 * The source property when this image is tapped.
 * </p><p>
 * Default value is <code>""</code>
 * @return {sap.ui.core.URI} the value of property <code>activeSrc</code>
 * @public
 * 
 */
sap.m.Image.prototype.getActiveSrc = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>alt</code>.
 * The alternative text that is displayed in case the Image is not available, or cannot be displayed.
 * If the image is set to decorative this property is ignored.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>alt</code>
 * @public
 * 
 */
sap.m.Image.prototype.getAlt = function() { return ""; };

/**
 * 
 * Getter for property <code>decorative</code>.
 * A decorative image is included for design reasons. Accessibility tools will ignore decorative images.
 * </p><p>
 * Note: If the Image has an image map (useMap is set), this property will be overridden (the image will not be rendered as decorative).
 * A decorative image has no ALT attribute, so the Alt property is ignored if the image is decorative.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>decorative</code>
 * @public
 * 
 */
sap.m.Image.prototype.getDecorative = function() { return false; };

/**
 * 
 * Getter for property <code>densityAware</code>.
 * If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.
 * </p><p>
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * </p><p>
 * If bandwidth is the key for the application, set this value to false.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>densityAware</code>
 * @public
 * 
 */
sap.m.Image.prototype.getDensityAware = function() { return false; };

/**
 * 
 * Getter for property <code>height</code>.
 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.m.Image.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for property <code>src</code>.
 * Relative or absolute path to URL where the image file is stored. The path will be adapted to the density aware format according to the density of the device following the convention that [imageName]@[densityValue].[extension]
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>src</code>
 * @public
 * 
 */
sap.m.Image.prototype.getSrc = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>useMap</code>.
 * The name of the image map that defines the clickable areas
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>useMap</code>
 * @public
 * 
 */
sap.m.Image.prototype.getUseMap = function() { return ""; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Invisible images are not rendered.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.Image.prototype.getVisible = function() { return false; };

/**
 * 
 * Getter for property <code>width</code>.
 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.Image.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * This overrides the default setter of the activeSrc property in order to avoid the rerendering.
 * @public
 */
sap.m.Image.prototype.setActiveSrc = function(sActiveSrc) { return null; };

/**
 * 
 * Setter for property <code>alt</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sAlt  new value for property <code>alt</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Image.prototype.setAlt = function(sAlt) { return new sap.m.Image(); };

/**
 * 
 * Setter for property <code>decorative</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDecorative  new value for property <code>decorative</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Image.prototype.setDecorative = function(bDecorative) { return new sap.m.Image(); };

/**
 * 
 * Setter for property <code>densityAware</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDensityAware  new value for property <code>densityAware</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Image.prototype.setDensityAware = function(bDensityAware) { return new sap.m.Image(); };

/**
 * 
 * Setter for property <code>height</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Image.prototype.setHeight = function(sHeight) { return new sap.m.Image(); };

/**
 * 
 * This overrides the default setter of the src property and update the dom node.
 * @public
 */
sap.m.Image.prototype.setSrc = function(sSrc) { return null; };

/**
 * 
 * Setter for property <code>useMap</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sUseMap  new value for property <code>useMap</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Image.prototype.setUseMap = function(sUseMap) { return new sap.m.Image(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Image.prototype.setVisible = function(bVisible) { return new sap.m.Image(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Image.prototype.setWidth = function(sWidth) { return new sap.m.Image(); };


// ---- sap.m.ImageHelper --------------------------------------------------------------------------

/**
 * 
 * Creates or updates an image control.
 * @param {string} sImgId id of the image to be dealt with.
 * @param {sap.m.Image} oImageControl the image to update. If undefined, a new image will be created.
 * @param {sap.ui.core.Control} oParent oImageControl's parentControl.
 * @param {Map} mProperties map object that contains key value pairs if image propeties. The 'src' property
 * MUST be contained. Also the map's keys must be names of image properties
 * @param {Array} aCssClassesToAdd array of css classes which will be added if the image needs to be created.
 * @param {Array} aCssClassesToRemove all css clases that oImageControl has and which are contained in this array
 * are removed bevore adding the css classes listed in aCssClassesToAdd.
 * @returns the new or updated image control
 * @protected
 * 
 * @memberOf sap.m.ImageHelper
 */
sap.m.ImageHelper.getImageControl = function(sImgId,oImageControl,oParent,mProperties,aCssClassesToAdd,aCssClassesToRemove) { return null; };


// ---- sap.m.Input --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new Input.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : sap.m.InputType (default: sap.m.InputType.Text)</li>
 * <li>{@link #getMaxLength maxLength} : int (default: 0)</li>
 * <li>{@link #getValueStateText valueStateText} : string</li>
 * <li>{@link #getShowValueStateMessage showValueStateMessage} : boolean (default: true)</li>
 * <li>{@link #getDateFormat dateFormat} : string (default: 'YYYY-MM-dd')</li>
 * <li>{@link #getShowValueHelp showValueHelp} : boolean (default: false)</li>
 * <li>{@link #getShowSuggestion showSuggestion} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSuggestionItems suggestionItems} : sap.ui.core.Item[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Input#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Input#event:valueHelpRequest valueHelpRequest} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Input#event:suggest suggest} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Input#event:suggestionItemSelected suggestionItemSelected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.InputBase#constructor sap.m.InputBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Enables users to input data.
 * @extends sap.m.InputBase
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.Input = function(sId,mSettings) {};
/**
 * 
 * This event is fired when the value of the input is changed - e.g. at each keypress 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.newValue The new value of the input.
 * @public
 */
sap.m.Input.prototype.liveChange = function(oControlEvent) { return null; };

/**
 * 
 * This event is fired when user types in the input and showSuggestion is set to true. Changing the suggestItems aggregation will show the suggestions within a popup. 
 * @event
 * @since 1.16.1
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.suggestValue The current value which has been typed in the input.
 * @public
 */
sap.m.Input.prototype.suggest = function(oControlEvent) { return null; };

/**
 * 
 * This event is fired when suggestionItem shown in suggestion popup are selected. This event is only fired when showSuggestion is set to true and there are suggestionItems shown in the suggestion popup. 
 * @event
 * @since 1.16.3
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Item} oControlEvent.getParameters.selectedItem This is the item selected in the suggestion popup.
 * @public
 */
sap.m.Input.prototype.suggestionItemSelected = function(oControlEvent) { return null; };

/**
 * 
 * When the value help indicator is clicked, this event will be fired. 
 * @event
 * @since 1.16
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.Input.prototype.valueHelpRequest = function(oControlEvent) { return null; };

/**
 * 
 * Adds some suggestionItem <code>oSuggestionItem</code> 
 * to the aggregation named <code>suggestionItems</code>.
 * @param {sap.ui.core.Item}
 *            oSuggestionItem the suggestionItem to add; if empty, nothing is inserted
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.1
 * 
 */
sap.m.Input.prototype.addSuggestionItem = function(oSuggestionItem) { return new sap.m.Input(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.Input</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Input</code>.<br/> itself. 
 * </p><p>
 * This event is fired when the value of the input is changed - e.g. at each keypress 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Input</code>.<br/> itself.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Input.prototype.attachLiveChange = function(oData,fnFunction,oListener) { return new sap.m.Input(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'suggest' event of this <code>sap.m.Input</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Input</code>.<br/> itself. 
 * </p><p>
 * This event is fired when user types in the input and showSuggestion is set to true. Changing the suggestItems aggregation will show the suggestions within a popup. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Input</code>.<br/> itself.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.1
 * 
 */
sap.m.Input.prototype.attachSuggest = function(oData,fnFunction,oListener) { return new sap.m.Input(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'suggestionItemSelected' event of this <code>sap.m.Input</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Input</code>.<br/> itself. 
 * </p><p>
 * This event is fired when suggestionItem shown in suggestion popup are selected. This event is only fired when showSuggestion is set to true and there are suggestionItems shown in the suggestion popup. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Input</code>.<br/> itself.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.3
 * 
 */
sap.m.Input.prototype.attachSuggestionItemSelected = function(oData,fnFunction,oListener) { return new sap.m.Input(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'valueHelpRequest' event of this <code>sap.m.Input</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Input</code>.<br/> itself. 
 * </p><p>
 * When the value help indicator is clicked, this event will be fired. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Input</code>.<br/> itself.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.Input.prototype.attachValueHelpRequest = function(oData,fnFunction,oListener) { return new sap.m.Input(); };

/**
 * 
 * Destroys all the suggestionItems in the aggregation 
 * named <code>suggestionItems</code>.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.1
 * 
 */
sap.m.Input.prototype.destroySuggestionItems = function() { return new sap.m.Input(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.Input</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Input.prototype.detachLiveChange = function(fnFunction,oListener) { return new sap.m.Input(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'suggest' event of this <code>sap.m.Input</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.1
 * 
 */
sap.m.Input.prototype.detachSuggest = function(fnFunction,oListener) { return new sap.m.Input(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'suggestionItemSelected' event of this <code>sap.m.Input</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.3
 * 
 */
sap.m.Input.prototype.detachSuggestionItemSelected = function(fnFunction,oListener) { return new sap.m.Input(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'valueHelpRequest' event of this <code>sap.m.Input</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.Input.prototype.detachValueHelpRequest = function(fnFunction,oListener) { return new sap.m.Input(); };

/**
 * 
 * Creates a new subclass of class sap.m.Input with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Input.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event liveChange to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'newValue' of type <code>string</code> The new value of the input.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Input.prototype.fireLiveChange = function(mArguments) { return new sap.m.Input(); };

/**
 * 
 * Fire event suggest to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'suggestValue' of type <code>string</code> The current value which has been typed in the input.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16.1
 * 
 */
sap.m.Input.prototype.fireSuggest = function(mArguments) { return new sap.m.Input(); };

/**
 * 
 * Fire event suggestionItemSelected to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItem' of type <code>sap.ui.core.Item</code> This is the item selected in the suggestion popup.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16.3
 * 
 */
sap.m.Input.prototype.fireSuggestionItemSelected = function(mArguments) { return new sap.m.Input(); };

/**
 * 
 * Fire event valueHelpRequest to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16
 * 
 */
sap.m.Input.prototype.fireValueHelpRequest = function(mArguments) { return new sap.m.Input(); };

/**
 * 
 * Getter for property <code>dateFormat</code>.
 * Only used if type=date and no datepicker is available.
 * The data is displayed and the user input is parsed according to this format.
 * NOTE: The value property is always of the form RFC 3339 (YYYY-MM-dd).
 * </p><p>
 * Default value is <code>YYYY-MM-dd</code>
 * @return {string} the value of property <code>dateFormat</code>
 * @public
 * @deprecated Since version 1.9.1. 
 * sap.m.DateTimeInput should be used for date/time inputs and formating.
 * 
 */
sap.m.Input.prototype.getDateFormat = function() { return ""; };

/**
 * 
 * Getter for property <code>maxLength</code>.
 * Maximum number of characters. Value '0' means the feature is switched off.
 * </p><p>
 * Default value is <code>0</code>
 * @return {int} the value of property <code>maxLength</code>
 * @public
 * 
 */
sap.m.Input.prototype.getMaxLength = function() { return 0; };

/**
 * 
 * Getter for property <code>showSuggestion</code>.
 * If this is set to true, suggest event is fired when user types in the input. Changing the suggestItems aggregation in suggest event listener will show suggestions within a popup. When runs on phone, input will first open a dialog where the input and suggestions are shown. When runs on a tablet, the suggestions are shown in a popup next to the input.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showSuggestion</code>
 * @public
 * @since 1.16.1
 * 
 */
sap.m.Input.prototype.getShowSuggestion = function() { return false; };

/**
 * 
 * Getter for property <code>showValueHelp</code>.
 * If set to true, a value help indicator will be displayed inside the control. When clicked the event "valueHelpRequest" will be fired.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showValueHelp</code>
 * @public
 * @since 1.16
 * 
 */
sap.m.Input.prototype.getShowValueHelp = function() { return false; };

/**
 * 
 * Getter for property <code>showValueStateMessage</code>.
 * Whether the value state message should be shown.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showValueStateMessage</code>
 * @public
 * 
 */
sap.m.Input.prototype.getShowValueStateMessage = function() { return false; };

/**
 * 
 * Getter for aggregation <code>suggestionItems</code>.<br/>
 * SuggestItems are the items which will be shown in the suggestion popup. Changing this aggregation (by calling addSuggestionItem, insertSuggestionItem, removeSuggestionItem, removeAllSuggestionItems, destroySuggestionItems) after input is rendered will open/close the suggestion popup.
 * @return {sap.ui.core.Item[]}
 * @public
 * @since 1.16.1
 * 
 */
sap.m.Input.prototype.getSuggestionItems = function() { return new Array(); };

/**
 * 
 * Getter for property <code>type</code>.
 * Type of input (e.g. Text, Number, Email, Phone)
 * </p><p>
 * Default value is <code>Text</code>
 * @return {sap.m.InputType} the value of property <code>type</code>
 * @public
 * 
 */
sap.m.Input.prototype.getType = function() { return new sap.m.InputType(); };

/**
 * 
 * Getter for property <code>valueStateText</code>.
 * The text which is shown in the value state message popup. If not specfied a default text is shown.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>valueStateText</code>
 * @public
 * 
 */
sap.m.Input.prototype.getValueStateText = function() { return ""; };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation named <code>suggestionItems</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Item}
 *            oSuggestionItem the suggestionItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @since 1.16.1
 * 
 */
sap.m.Input.prototype.indexOfSuggestionItem = function(oSuggestionItem) { return 0; };

/**
 * 
 * Inserts a suggestionItem into the aggregation named <code>suggestionItems</code>.
 * @param {sap.ui.core.Item}
 *          oSuggestionItem the suggestionItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the suggestionItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the suggestionItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the suggestionItem is inserted at 
 *             the last position        
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.1
 * 
 */
sap.m.Input.prototype.insertSuggestionItem = function(oSuggestionItem,iIndex) { return new sap.m.Input(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>suggestionItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Item[]} an array of the removed elements (might be empty)
 * @public
 * @since 1.16.1
 * 
 */
sap.m.Input.prototype.removeAllSuggestionItems = function() { return new Array(); };

/**
 * 
 * Removes an suggestionItem from the aggregation named <code>suggestionItems</code>.
 * @param {int | string | sap.ui.core.Item} vSuggestionItem the suggestionItem to remove or its index or id
 * @return {sap.ui.core.Item} the removed suggestionItem or null
 * @public
 * @since 1.16.1
 * 
 */
sap.m.Input.prototype.removeSuggestionItem = function(vSuggestionItem) { return new sap.ui.core.Item(); };

/**
 * 
 * Setter for property <code>dateFormat</code>.
 * </p><p>
 * Default value is <code>YYYY-MM-dd</code> 
 * @param {string} sDateFormat  new value for property <code>dateFormat</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.9.1. 
 * sap.m.DateTimeInput should be used for date/time inputs and formating.
 * 
 */
sap.m.Input.prototype.setDateFormat = function(sDateFormat) { return new sap.m.Input(); };

/**
 * 
 * Sets a custom filter function for suggestionItems. Default is to check whether the item text begins with the typed value. This fitler function is called with two paramters: the first one is the string that is currently typed in the input and the second one is the item that is being filtered. Returning true will add this item to the popup.
 * @type boolean
 * @public
 * @since 1.16.1
 */
sap.m.Input.prototype.setFilterFunction = function() { return false; };

/**
 * 
 * Setter for property <code>maxLength</code>.
 * </p><p>
 * Default value is <code>0</code> 
 * @param {int} iMaxLength  new value for property <code>maxLength</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Input.prototype.setMaxLength = function(iMaxLength) { return new sap.m.Input(); };

/**
 * 
 * Setter for property <code>showSuggestion</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bShowSuggestion  new value for property <code>showSuggestion</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.1
 * 
 */
sap.m.Input.prototype.setShowSuggestion = function(bShowSuggestion) { return new sap.m.Input(); };

/**
 * 
 * Setter for property <code>showValueHelp</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bShowValueHelp  new value for property <code>showValueHelp</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.Input.prototype.setShowValueHelp = function(bShowValueHelp) { return new sap.m.Input(); };

/**
 * 
 * Setter for property <code>showValueStateMessage</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bShowValueStateMessage  new value for property <code>showValueStateMessage</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Input.prototype.setShowValueStateMessage = function(bShowValueStateMessage) { return new sap.m.Input(); };

/**
 * 
 * Setter for property <code>type</code>.
 * </p><p>
 * Default value is <code>Text</code> 
 * @param {sap.m.InputType} oType  new value for property <code>type</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Input.prototype.setType = function(oType) { return new sap.m.Input(); };

/**
 * 
 * Setter for property <code>valueStateText</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sValueStateText  new value for property <code>valueStateText</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Input.prototype.setValueStateText = function(sValueStateText) { return new sap.m.Input(); };

/**
 * 
 * Defines the width of the input. Default value is 100%
 * @public
 * @param {string} sWidth
 */
sap.m.Input.prototype.setWidth = function(sWidth) { return null; };


// ---- sap.m.InputBase --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new InputBase.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getValueState valueState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getPlaceholder placeholder} : string</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.InputBase#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Base control for Input fields.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.12.0
 * 
 */
sap.m.InputBase = function(sId,mSettings) {};
/**
 * 
 * Register an event listener to the browser input event.
 * @param {function} fnCallback Function to be called when the value of the input element is changed.
 * @protected
 * 
 */
sap.m.InputBase.prototype._bindToInputEvent = null

/**
 * 
 * This event gets fired when the input operation has finished and the value has changed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.newValue The new value of the input
 * @public
 */
sap.m.InputBase.prototype.change = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.InputBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.InputBase</code>.<br/> itself. 
 * </p><p>
 * This event gets fired when the input operation has finished and the value has changed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.InputBase</code>.<br/> itself.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputBase.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.InputBase(); };

/**
 * 
 * Binder for property <code>value</code>.
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputBase.prototype.bindValue = function(sPath,fnFormatter,sMode) { return new sap.m.InputBase(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.InputBase</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputBase.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.InputBase(); };

/**
 * 
 * Creates a new subclass of class sap.m.InputBase with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.InputBase.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event change to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'newValue' of type <code>string</code> The new value of the input</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.InputBase.prototype.fireChange = function(mArguments) { return new sap.m.InputBase(); };

/**
 * 
 * Getter for property <code>editable</code>.
 * Controls if a user can change the value.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * @since 1.12.0
 * 
 */
sap.m.InputBase.prototype.getEditable = function() { return false; };

/**
 * 
 * Getter for property <code>enabled</code>.
 * Boolean property to enable the control (default is true).
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.InputBase.prototype.getEnabled = function() { return false; };

/**
 * 
 * Getter for property <code>name</code>.
 * The 'name' property to be used in the HTML code (e.g. for HTML forms that send data to the server via 'submit').
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>name</code>
 * @public
 * 
 */
sap.m.InputBase.prototype.getName = function() { return ""; };

/**
 * 
 * Getter for property <code>placeholder</code>.
 * text shown when no value available
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>placeholder</code>
 * @public
 * 
 */
sap.m.InputBase.prototype.getPlaceholder = function() { return ""; };

/**
 * 
 * Getter for property <code>value</code>.
 * Input Value
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>value</code>
 * @public
 * 
 */
sap.m.InputBase.prototype.getValue = function() { return ""; };

/**
 * 
 * Getter for property <code>valueState</code>.
 * Visualizes warnings or errors related to the text field. Possible values: Warning, Error, Success.
 * </p><p>
 * Default value is <code>None</code>
 * @return {sap.ui.core.ValueState} the value of property <code>valueState</code>
 * @public
 * 
 */
sap.m.InputBase.prototype.getValueState = function() { return new sap.ui.core.ValueState(); };

/**
 * 
 * Getter for property <code>visible</code>.
 * Invisible inputs are not rendered
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.InputBase.prototype.getVisible = function() { return false; };

/**
 * 
 * Getter for property <code>width</code>.
 * Defines the width of the input.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.InputBase.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Setter for property <code>editable</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.12.0
 * 
 */
sap.m.InputBase.prototype.setEditable = function(bEditable) { return new sap.m.InputBase(); };

/**
 * 
 * Setter for property <code>enabled</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputBase.prototype.setEnabled = function(bEnabled) { return new sap.m.InputBase(); };

/**
 * 
 * Setter for property <code>name</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputBase.prototype.setName = function(sName) { return new sap.m.InputBase(); };

/**
 * 
 * Setter for property <code>placeholder</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code>.
 * @param {string} sPlaceholder New value for property <code>placeholder</code>.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.InputBase.prototype.setPlaceholder = function(sPlaceholder) { return new sap.m.InputBase(); };

/**
 * 
 * Setter for property <code>value</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code>.
 * @param {string} sValue New value for property <code>value</code>.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.InputBase.prototype.setValue = function(sValue) { return new sap.m.InputBase(); };

/**
 * 
 * Setter for property <code>valueState</code>.
 * </p><p>
 * Default value is <code>None</code>.
 * @param {sap.ui.core.ValueState} oValueState New value for property <code>valueState</code>.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.InputBase.prototype.setValueState = function(oValueState) { return new sap.m.InputBase(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputBase.prototype.setVisible = function(bVisible) { return new sap.m.InputBase(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code>.
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.InputBase.prototype.setWidth = function(sWidth) { return new sap.m.InputBase(); };

/**
 * 
 * Unbinder for property <code>value</code>.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputBase.prototype.unbindValue = function() { return new sap.m.InputBase(); };


// ---- sap.m.InputListItem --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new InputListItem.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLabel label} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * List item should be used for a label and an input field.
 * @extends sap.m.ListItemBase
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.InputListItem = function(sId,mSettings) {};
/**
 * 
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputListItem.prototype.addContent = function(oContent) { return new sap.m.InputListItem(); };

/**
 * 
 * Binder for aggregation <code>content</code>.
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputListItem.prototype.bindContent = function(sPath,oTemplate,oSorter,aFilters) { return new sap.m.InputListItem(); };

/**
 * 
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputListItem.prototype.destroyContent = function() { return new sap.m.InputListItem(); };

/**
 * 
 * Creates a new subclass of class sap.m.InputListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.InputListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>content</code>.<br/>
 * Content controls can be added
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for InputListItem.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.InputListItem.prototype.getContent = function() { return new Array(); };

/**
 * 
 * Getter for property <code>label</code>.
 * Label of the list item
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>label</code>
 * @public
 * 
 */
sap.m.InputListItem.prototype.getLabel = function() { return ""; };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.InputListItem.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * 
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputListItem.prototype.insertContent = function(oContent,iIndex) { return new sap.m.InputListItem(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.InputListItem.prototype.removeAllContent = function() { return new Array(); };

/**
 * 
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * 
 */
sap.m.InputListItem.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * 
 * Setter for property <code>label</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sLabel  new value for property <code>label</code>
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputListItem.prototype.setLabel = function(sLabel) { return new sap.m.InputListItem(); };

/**
 * 
 * Unbinder for aggregation <code>content</code>.
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.InputListItem.prototype.unbindContent = function() { return new sap.m.InputListItem(); };


// ---- sap.m.InputType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.InputType.toString = function() { return ""; };

// ---- sap.m.InstanceManager --------------------------------------------------------------------------

/**
 * 
 * Adds a control to predefined dialog category in instance manager.
 * @param {sap.ui.core.Control} oDialog Dialog to be added to instance manager. Dialog which doesn't inherit from sap.m.Dialog can also be added as long as it has a close method.
 * @returns {sap.m.InstanceManager} Enable method chaining.
 * @protected
 * 
 * @memberOf sap.m.InstanceManager
 */
sap.m.InstanceManager.addDialogInstance = function(oDialog) { return new sap.m.InstanceManager(); };

/**
 * 
 * Adds an instance to the given category.
 * @param {string} sCategoryId The category's id.
 * @param {object} oInstance The instance that will be added to the given category.
 * @returns {sap.m.InstanceManager} Enable method chaining.
 * @protected
 * 
 * @memberOf sap.m.InstanceManager
 */
sap.m.InstanceManager.addInstance = function(sCategoryId,oInstance) { return new sap.m.InstanceManager(); };

/**
 * 
 * Adds a control to predefined popover category in instance manager.
 * @param {sap.ui.core.Control} oPopover Popover to be added to instance manager. Custom popover which doesn't inherit from sap.m.Popover can also be added as long as it has a close method.
 * @returns {sap.m.InstanceManager} Enable method chaining.
 * @protected
 * 
 * @memberOf sap.m.InstanceManager
 */
sap.m.InstanceManager.addPopoverInstance = function(oPopover) { return new sap.m.InstanceManager(); };

/**
 * 
 * Closes all of the open dialogs.
 * @public
 * @returns {sap.m.InstanceManager} Enable method chaining.
 * 
 * @memberOf sap.m.InstanceManager
 */
sap.m.InstanceManager.closeAllDialogs = function(fnCallback) { return new sap.m.InstanceManager(); };

/**
 * 
 * Closes all open popovers.
 * @public
 * @returns {sap.m.InstanceManager} Enable method chaining.
 * 
 * @memberOf sap.m.InstanceManager
 */
sap.m.InstanceManager.closeAllPopovers = function() { return new sap.m.InstanceManager(); };

/**
 * 
 * Returns an array of managed instances in the given category.
 * @param {string} sCategoryId The category's id.
 * @returns {object} Managed instances in the given category.
 * @protected
 * 
 * @memberOf sap.m.InstanceManager
 */
sap.m.InstanceManager.getInstancesByCategoryId = function(sCategoryId) { return new Object(); };

/**
 * 
 * Gets all of the open dialogs. If there's no dialog open, it returns an empty array.
 * @return {sap.ui.core.Control[]} The open dialogs.
 * @public
 * 
 * @memberOf sap.m.InstanceManager
 */
sap.m.InstanceManager.getOpenDialogs = function() { return new Array(); };

/**
 * 
 * Gets all of the open popovers. If there's no popover open, it returns an empty array.
 * @return {sap.ui.core.Control[]} The open popovers.
 * @public
 * 
 * @memberOf sap.m.InstanceManager
 */
sap.m.InstanceManager.getOpenPopovers = function() { return new Array(); };

/**
 * 
 * Returns true if there's dialog(s) managed in predefined dialog category, otherwise it returns false.
 * @returns {boolean} Whether there's dialog(s) open.
 * @public
 * 
 * @memberOf sap.m.InstanceManager
 */
sap.m.InstanceManager.hasOpenDialog = function() { return false; };

/**
 * 
 * Returns true if there's popover(s) managed in predefined popover category, otherwise it returns false.
 * @returns {boolean} Whether there's popover(s) open.
 * @public
 * 
 * @memberOf sap.m.InstanceManager
 */
sap.m.InstanceManager.hasOpenPopover = function() { return false; };

/**
 * 
 * Returns if there's no managed instance in the given category.
 * @param {string} sCategoryId The category's id.
 * @returns {boolean} Whether the category is empty.
 * @protected
 * 
 * @memberOf sap.m.InstanceManager
 */
sap.m.InstanceManager.isCategoryEmpty = function(sCategoryId) { return false; };

/**
 * 
 * Check if the given dialog instance is managed under the dialog category.
 * For dialog instances, managed means the dialog is open.
 * </p><p>
 * This function is specially provided for customized controls which doesn't have the possibility to check whether it's open.
 * If the given dialog is an instance of sap.m.Dialog, sap.m.ActionSheet, the isOpen() method on the instance is 
 * preferred to be called than this function.
 * @param {sap.ui.core.Control} oDialog The dialog that is checked for the openness.
 * @returns Whether the given dialog is open.
 * @public
 * 
 * @memberOf sap.m.InstanceManager
 */
sap.m.InstanceManager.isDialogOpen = function(oDialog) { return null; };

/**
 * 
 * Checks if an instance is managed under the given category.
 * @param {string} sCategoryId The category that the instance is supposed to be in.
 * @param {object} oInstance The instance that needs to be checked.
 * @returns {boolean} Whether the instance is managed in the given category.
 * @protected
 * 
 * @memberOf sap.m.InstanceManager
 */
sap.m.InstanceManager.isInstanceManaged = function(sCategoryId,oInstance) { return false; };

/**
 * 
 * Check if the given popover instance is managed under the popover category.
 * For popover instances, managed means the popover is open.
 * </p><p>
 * This function is specially provided for customized controls which doesn't have the possibility to check whether it's open. 
 * If the given popover is an instance of sap.m.Popover, sap.m.ActionSheet, the isOpen() method on the instance is 
 * preferred to be called than this function.
 * @param {sap.ui.core.Control} oPopover The popover that is checked for the openness.
 * @returns Whether the given popover is open.
 * @public
 * 
 * @memberOf sap.m.InstanceManager
 */
sap.m.InstanceManager.isPopoverOpen = function(oPopover) { return null; };

/**
 * 
 * Removes control from predefined dialog category in instance manager.
 * @param {sap.ui.core.Control} Dialog to be removed from instance manager.
 * @returns The removed popover or null. If the popover isn't managed, this method returns null instead of the removed popover.
 * @protected
 * 
 * @memberOf sap.m.InstanceManager
 */
sap.m.InstanceManager.removeDialogInstance = function(Dialog) { return null; };

/**
 * 
 * Removes a managed instance from the given category.
 * @param {string} sCategoryId The category's id.
 * @param {object} oInstance The instance that will be removed from the given category.
 * @returns The removed instance or null. If the instance isn't managed, this method returns null instead of the instance object.
 * @protected
 * 
 * @memberOf sap.m.InstanceManager
 */
sap.m.InstanceManager.removeInstance = function(sCategoryId,oInstance) { return null; };

/**
 * 
 * Removes control from predefined popover category in instance manager.
 * @param {sap.ui.core.Control} Popover to be removed from instance manager.
 * @returns The removed popover or null. If the popover isn't managed, this method returns null instead of the removed popover.
 * @protected
 * 
 * @memberOf sap.m.InstanceManager
 */
sap.m.InstanceManager.removePopoverInstance = function(Popover) { return null; };


// ---- sap.m.Label --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new Label.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDesign design} : sap.m.LabelDesign (default: sap.m.LabelDesign.Standard)</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '')</li>
 * <li>{@link #getRequired required} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getLabelFor labelFor} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Label control is used in a UI5 mobile application to provide label text for other controls. Design such as bold, and text alignment can be specified.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.Label
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.Label = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.m.Label with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Label.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>design</code>.
 * set design of a label to either Standard or Bold
 * </p><p>
 * Default value is <code>sap.m.LabelDesign.Standard</code>
 * @return {sap.m.LabelDesign} the value of property <code>design</code>
 * @public
 * 
 */
sap.m.Label.prototype.getDesign = function() { return new sap.m.LabelDesign(); };

/**
 * 
 * Association to the labeled control.
 * By default the label set the for attribute to the ID of the labeled control. This can be changed implementing function getIdForLabel on the labelled control.
 * @return {string} Id of the element which is the current target of the <code>labelFor</code> association, or null
 * @public
 * 
 */
sap.m.Label.prototype.getLabelFor = function() { return ""; };

/**
 * 
 * Getter for property <code>required</code>.
 * Indicates that user input is required in the input this label labels.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>required</code>
 * @public
 * 
 */
sap.m.Label.prototype.getRequired = function() { return false; };

/**
 * 
 * Getter for property <code>text</code>.
 * Label Text to be displayed
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.Label.prototype.getText = function() { return ""; };

/**
 * 
 * Getter for property <code>textAlign</code>.
 * Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 * </p><p>
 * Default value is <code>sap.ui.core.TextAlign.Begin</code>
 * @return {sap.ui.core.TextAlign} the value of property <code>textAlign</code>
 * @public
 * 
 */
sap.m.Label.prototype.getTextAlign = function() { return new sap.ui.core.TextAlign(); };

/**
 * 
 * Getter for property <code>textDirection</code>.
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 * </p><p>
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code>
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * 
 */
sap.m.Label.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * 
 * Getter for property <code>visible</code>.
 * Invisible labels are not rendered
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.Label.prototype.getVisible = function() { return false; };

/**
 * 
 * Getter for property <code>width</code>.
 * Width of Label
 * </p><p>
 * Default value is <code>''</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.Label.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Setter for property <code>design</code>.
 * </p><p>
 * Default value is <code>sap.m.LabelDesign.Standard</code> 
 * @param {sap.m.LabelDesign} oDesign  new value for property <code>design</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Label.prototype.setDesign = function(oDesign) { return new sap.m.Label(); };

/**
 * 
 * Association to the labeled control.
 * By default the label set the for attribute to the ID of the labeled control. This can be changed implementing function getIdForLabel on the labelled control.
 * @param {string | sap.ui.core.Control} vLabelFor 
 *    Id of an element which becomes the new target of this <code>labelFor</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Label.prototype.setLabelFor = function(vLabelFor) { return new sap.m.Label(); };

/**
 * 
 * Setter for property <code>required</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bRequired  new value for property <code>required</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Label.prototype.setRequired = function(bRequired) { return new sap.m.Label(); };

/**
 * 
 * Setter for property <code>text</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Label.prototype.setText = function(sText) { return new sap.m.Label(); };

/**
 * 
 * Setter for property <code>textAlign</code>.
 * </p><p>
 * Default value is <code>sap.ui.core.TextAlign.Begin</code> 
 * @param {sap.ui.core.TextAlign} oTextAlign  new value for property <code>textAlign</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Label.prototype.setTextAlign = function(oTextAlign) { return new sap.m.Label(); };

/**
 * 
 * Setter for property <code>textDirection</code>.
 * </p><p>
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code> 
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Label.prototype.setTextDirection = function(oTextDirection) { return new sap.m.Label(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Label.prototype.setVisible = function(bVisible) { return new sap.m.Label(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is <code>''</code> 
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Label.prototype.setWidth = function(sWidth) { return new sap.m.Label(); };


// ---- sap.m.LabelDesign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.LabelDesign.toString = function() { return ""; };

// ---- sap.m.Link --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new Link.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: '')</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getTarget target} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHref href} : sap.ui.core.URI</li>
 * <li>{@link #getWrapping wrapping} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Link#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A hyperlink control which can be used to trigger actions or to navigate to other applications or web pages.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.12
 * 
 */
sap.m.Link = function(sId,mSettings) {};
/**
 * 
 * Event is fired when the user triggers the link control. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.Link.prototype.press = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Link</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Link</code>.<br/> itself. 
 * </p><p>
 * Event is fired when the user triggers the link control. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Link</code>.<br/> itself.
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Link.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.Link(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Link</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Link.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.Link(); };

/**
 * 
 * Creates a new subclass of class sap.m.Link with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Link.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event press to attached listeners.
 * </p><p>
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * 
 */
sap.m.Link.prototype.firePress = function(mArguments) { return false; };

/**
 * 
 * Getter for property <code>enabled</code>.
 * Whether the link can be triggered by the user.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.Link.prototype.getEnabled = function() { return false; };

/**
 * 
 * Getter for property <code>href</code>.
 * The link target URI. Supports standard hyperlink behavior. If an action should be triggered, this should not be set, but instead an event handler for the "press" event should be registered.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>href</code>
 * @public
 * 
 */
sap.m.Link.prototype.getHref = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>target</code>.
 * Options are _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>target</code>
 * @public
 * 
 */
sap.m.Link.prototype.getTarget = function() { return ""; };

/**
 * 
 * Getter for property <code>text</code>.
 * Link text to be displayed.
 * </p><p>
 * Default value is <code>''</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.Link.prototype.getText = function() { return ""; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Invisible links are not rendered.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.Link.prototype.getVisible = function() { return false; };

/**
 * 
 * Getter for property <code>width</code>.
 * Width of text link. When it is set (CSS-size such as % or px), this is the exact size. When left blank, the text defines the size.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.Link.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for property <code>wrapping</code>.
 * Whether the link text is allowed to wrap when tehre is not sufficient space.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>wrapping</code>
 * @public
 * 
 */
sap.m.Link.prototype.getWrapping = function() { return false; };

/**
 * 
 * Setter for property <code>enabled</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Link.prototype.setEnabled = function(bEnabled) { return new sap.m.Link(); };

/**
 * 
 * Setter for property <code>href</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sHref  new value for property <code>href</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Link.prototype.setHref = function(sHref) { return new sap.m.Link(); };

/**
 * 
 * Setter for property <code>target</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sTarget  new value for property <code>target</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Link.prototype.setTarget = function(sTarget) { return new sap.m.Link(); };

/**
 * 
 * Setter for property <code>text</code>.
 * </p><p>
 * Default value is <code>''</code> 
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Link.prototype.setText = function(sText) { return new sap.m.Link(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Link.prototype.setVisible = function(bVisible) { return new sap.m.Link(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Link.prototype.setWidth = function(sWidth) { return new sap.m.Link(); };

/**
 * 
 * Setter for property <code>wrapping</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bWrapping  new value for property <code>wrapping</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Link.prototype.setWrapping = function(bWrapping) { return new sap.m.Link(); };


// ---- sap.m.List --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new List.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.BackgroundDesign (default: sap.m.BackgroundDesign.Solid)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getColumns columns} : sap.m.Column[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.ListBase#constructor sap.m.ListBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The List control provides a container for all types of list items.
 * For mobile devices, the recommended limit of list items is 100 to assure proper performance. To improve initial rendering of large lists, use the "growing" feature. Please refer to the SAPUI5 Developer Guide for more information..
 * @extends sap.m.ListBase
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.List = function(sId,mSettings) {};
/**
 * 
 * Adds some column <code>oColumn</code> 
 * to the aggregation named <code>columns</code>.
 * @param {sap.m.Column}
 *            oColumn the column to add; if empty, nothing is inserted
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.16. 
 * Use Table control instead.
 * 
 */
sap.m.List.prototype.addColumn = function(oColumn) { return new sap.m.List(); };

/**
 * 
 * Destroys all the columns in the aggregation 
 * named <code>columns</code>.
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.16. 
 * Use Table control instead.
 * 
 */
sap.m.List.prototype.destroyColumns = function() { return new sap.m.List(); };

/**
 * 
 * Creates a new subclass of class sap.m.List with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.List.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>backgroundDesign</code>.
 * This property is used to set the background color of the list. Depending on the theme you can change the state of the background from "Solid" over "Translucent" to "Transparent".
 * </p><p>
 * Default value is <code>Solid</code>
 * @return {sap.m.BackgroundDesign} the value of property <code>backgroundDesign</code>
 * @public
 * @since 1.14
 * 
 */
sap.m.List.prototype.getBackgroundDesign = function() { return new sap.m.BackgroundDesign(); };

/**
 * 
 * Getter for aggregation <code>columns</code>.<br/>
 * Columns
 * @return {sap.m.Column[]}
 * @public
 * @deprecated Since version 1.16. 
 * Use Table control instead.
 * 
 */
sap.m.List.prototype.getColumns = function() { return new Array(); };

/**
 * 
 * Checks for the provided <code>sap.m.Column</code> in the aggregation named <code>columns</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Column}
 *            oColumn the column whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @deprecated Since version 1.16. 
 * Use Table control instead.
 * 
 */
sap.m.List.prototype.indexOfColumn = function(oColumn) { return 0; };

/**
 * 
 * Inserts a column into the aggregation named <code>columns</code>.
 * @param {sap.m.Column}
 *          oColumn the column to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the column should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the column is inserted at 
 *             the last position        
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.16. 
 * Use Table control instead.
 * 
 */
sap.m.List.prototype.insertColumn = function(oColumn,iIndex) { return new sap.m.List(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>columns</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Column[]} an array of the removed elements (might be empty)
 * @public
 * @deprecated Since version 1.16. 
 * Use Table control instead.
 * 
 */
sap.m.List.prototype.removeAllColumns = function() { return new Array(); };

/**
 * 
 * Removes an column from the aggregation named <code>columns</code>.
 * @param {int | string | sap.m.Column} vColumn the column to remove or its index or id
 * @return {sap.m.Column} the removed column or null
 * @public
 * @deprecated Since version 1.16. 
 * Use Table control instead.
 * 
 */
sap.m.List.prototype.removeColumn = function(vColumn) { return new sap.m.Column(); };

/**
 * 
 * Setter for property <code>backgroundDesign</code>.
 * </p><p>
 * Default value is <code>Solid</code> 
 * @param {sap.m.BackgroundDesign} oBackgroundDesign  new value for property <code>backgroundDesign</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @since 1.14
 * 
 */
sap.m.List.prototype.setBackgroundDesign = function(oBackgroundDesign) { return new sap.m.List(); };


// ---- sap.m.ListBase --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ListBase.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getInset inset} : boolean (default: false)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getHeaderText headerText} : string</li>
 * <li>{@link #getHeaderDesign headerDesign} : sap.m.ListHeaderDesign (default: sap.m.ListHeaderDesign.Standard)</li>
 * <li>{@link #getFooterText footerText} : string</li>
 * <li>{@link #getMode mode} : sap.m.ListMode (default: sap.m.ListMode.None)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getIncludeItemInSelection includeItemInSelection} : boolean (default: false)</li>
 * <li>{@link #getShowUnread showUnread} : boolean (default: false)</li>
 * <li>{@link #getNoDataText noDataText} : string</li>
 * <li>{@link #getShowNoData showNoData} : boolean (default: true)</li>
 * <li>{@link #getEnableBusyIndicator enableBusyIndicator} : boolean (default: true)</li>
 * <li>{@link #getModeAnimationOn modeAnimationOn} : boolean (default: true)</li>
 * <li>{@link #getShowSeparators showSeparators} : sap.m.ListSeparators (default: sap.m.ListSeparators.All)</li>
 * <li>{@link #getSwipeDirection swipeDirection} : sap.m.SwipeDirection (default: sap.m.SwipeDirection.Both)</li>
 * <li>{@link #getGrowing growing} : boolean (default: false)</li>
 * <li>{@link #getGrowingThreshold growingThreshold} : int (default: 20)</li>
 * <li>{@link #getGrowingTriggerText growingTriggerText} : string</li>
 * <li>{@link #getGrowingScrollToLoad growingScrollToLoad} : boolean (default: false)</li>
 * <li>{@link #getRememberSelections rememberSelections} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} <strong>(default aggregation)</strong> : sap.m.ListItemBase[]</li>
 * <li>{@link #getSwipeContent swipeContent} : sap.ui.core.Control</li>
 * <li>{@link #getHeaderToolbar headerToolbar} : sap.m.Toolbar</li>
 * <li>{@link #getInfoToolbar infoToolbar} : sap.m.Toolbar</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.ListBase#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListBase#event:selectionChange selectionChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListBase#event:delete delete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListBase#event:swipe swipe} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListBase#event:growingStarted growingStarted} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListBase#event:growingFinished growingFinished} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListBase#event:updateStarted updateStarted} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListBase#event:updateFinished updateFinished} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListBase#event:itemPress itemPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * sap.m.ListBase Control provides a basic functionality of List and Table. Selection, deletion, unread states and inset style are also maintained here.
 * </p><p>
 * Note: The ListBase including all contained items is completely re-rendered when the data of a bound model is changed. Due to the limited hardware resources of mobile devices this can lead to longer delays for lists with many items. As such the usage of a list is not recommended for these use cases.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.16
 * 
 */
sap.m.ListBase = function(sId,mSettings) {};
/**
 * 
 * This event is called when "growing" feature is enabled and after new page loaded and DOM updated. 
 * @event
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateFinished" event.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {int} oControlEvent.getParameters.actual Actual number of items.
 * @param {int} oControlEvent.getParameters.total Total number of items.
 * @public
 */
sap.m.ListBase.prototype.growingFinished = function(oControlEvent) { return null; };

/**
 * 
 * This event is called when "growing" feature is enabled and before new page loaded. 
 * @event
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateStarted" event.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {int} oControlEvent.getParameters.actual Actual number of items.
 * @param {int} oControlEvent.getParameters.total Total number of items.
 * @public
 */
sap.m.ListBase.prototype.growingStarted = function(oControlEvent) { return null; };

/**
 * 
 * This event is called when an item is pressed regardless of the selection mode.
 * NOTE: This event is fired for all kind of list items unless the item's type is "Inactive". 
 * @event
 * @since 1.20
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.ListItemBase} oControlEvent.getParameters.listItem The list item which fired the pressed event.
 * NOTE: This event is fired also for "GroupHeaderListItem" which does not have binding context.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.srcControl The control which caused the press event within the container.
 * @public
 */
sap.m.ListBase.prototype.itemPress = function(oControlEvent) { return null; };

/**
 * 
 * Event is fired when selection is changed by user interaction. In "multi-selection" mode, this event is also fired on "deselect" 
 * @event
 * @deprecated Since version 1.16. 
 * Instead use "selectionChange" event.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.ListItemBase} oControlEvent.getParameters.listItem The list item which fired the select.
 * @public
 */
sap.m.ListBase.prototype.select = function(oControlEvent) { return null; };

/**
 * 
 * Event is fired when selection is changed via user interaction inside the control. 
 * @event
 * @since 1.16
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.ListItemBase} oControlEvent.getParameters.listItem The list item whose selection has changed. In "multi-selection" mode, only the up-most selected item is returned. This parameter can be used for single-selection modes.
 * @param {sap.m.ListItemBase[]} oControlEvent.getParameters.listItems This parameter is filled with array of list items whose selection has changed. This parameter can be used for multi-selection mode.
 * @param {boolean} oControlEvent.getParameters.selected This flag indicates whether the "listItem" parameter is selected or not.
 * @public
 */
sap.m.ListBase.prototype.selectionChange = function(oControlEvent) { return null; };

/**
 * 
 * This event is fired when a user swipes to bring in a control and before swipeContent is shown on the right hand side of list item. So, you can easily change swipeContent according to swiped list item. Call the preventDefault method of the event object to disable swipe. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.ListItemBase} oControlEvent.getParameters.listItem The listitem which fired the swipe.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.swipeContent Given swipeContent control to show on the right hand side of a list item.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.srcControl Holds which control caused the swipe event in within the Item.
 * @public
 */
sap.m.ListBase.prototype.swipe = function(oControlEvent) { return null; };

/**
 * 
 * This event is called after binding and DOM is updated. 
 * @event
 * @since 1.16.3
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.reason The reason of update. Possible values are "Binding", "Filter", "Sort", "Growing", "Change", "Refresh", "Context"
 * @param {int} oControlEvent.getParameters.actual Actual number of items.
 * @param {int} oControlEvent.getParameters.total The total count of bound items. This parameter can be used if "growing" feature is enabled.
 * @public
 */
sap.m.ListBase.prototype.updateFinished = function(oControlEvent) { return null; };

/**
 * 
 * This event is called before binding is updated. 
 * @event
 * @since 1.16.3
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.reason The reason of update. Possible values are "Binding", "Filter", "Sort", "Growing", "Change", "Refresh", "Context"
 * @param {int} oControlEvent.getParameters.actual Actual number of items.
 * @param {int} oControlEvent.getParameters.total The total count of bound items. This parameter can be used if "growing" feature is enabled.
 * @public
 */
sap.m.ListBase.prototype.updateStarted = function(oControlEvent) { return null; };

/**
 * 
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 * @param {sap.m.ListItemBase}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.addItem = function(oItem) { return new sap.m.ListBase(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'delete' event of this <code>sap.m.ListBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br/> itself. 
 * </p><p>
 * Event is fired when delete icon is pressed by user. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.attachDelete = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'growingFinished' event of this <code>sap.m.ListBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br/> itself. 
 * </p><p>
 * This event is called when "growing" feature is enabled and after new page loaded and DOM updated. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateFinished" event.
 * 
 */
sap.m.ListBase.prototype.attachGrowingFinished = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'growingStarted' event of this <code>sap.m.ListBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br/> itself. 
 * </p><p>
 * This event is called when "growing" feature is enabled and before new page loaded. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateStarted" event.
 * 
 */
sap.m.ListBase.prototype.attachGrowingStarted = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'itemPress' event of this <code>sap.m.ListBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br/> itself. 
 * </p><p>
 * This event is called when an item is pressed regardless of the selection mode.
 * NOTE: This event is fired for all kind of list items unless the item's type is "Inactive". 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.20
 * 
 */
sap.m.ListBase.prototype.attachItemPress = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.ListBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br/> itself. 
 * </p><p>
 * Event is fired when selection is changed by user interaction. In "multi-selection" mode, this event is also fired on "deselect" 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.16. 
 * Instead use "selectionChange" event.
 * 
 */
sap.m.ListBase.prototype.attachSelect = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'selectionChange' event of this <code>sap.m.ListBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br/> itself. 
 * </p><p>
 * Event is fired when selection is changed via user interaction inside the control. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.ListBase.prototype.attachSelectionChange = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'swipe' event of this <code>sap.m.ListBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br/> itself. 
 * </p><p>
 * This event is fired when a user swipes to bring in a control and before swipeContent is shown on the right hand side of list item. So, you can easily change swipeContent according to swiped list item. Call the preventDefault method of the event object to disable swipe. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.attachSwipe = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'updateFinished' event of this <code>sap.m.ListBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br/> itself. 
 * </p><p>
 * This event is called after binding and DOM is updated. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.3
 * 
 */
sap.m.ListBase.prototype.attachUpdateFinished = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'updateStarted' event of this <code>sap.m.ListBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br/> itself. 
 * </p><p>
 * This event is called before binding is updated. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.3
 * 
 */
sap.m.ListBase.prototype.attachUpdateStarted = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * 
 * Binder for aggregation <code>items</code>.
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.bindItems = function(sPath,oTemplate,oSorter,aFilters) { return new sap.m.ListBase(); };

/**
 * 
 * Destroys the headerToolbar in the aggregation 
 * named <code>headerToolbar</code>.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.ListBase.prototype.destroyHeaderToolbar = function() { return new sap.m.ListBase(); };

/**
 * 
 * Destroys the infoToolbar in the aggregation 
 * named <code>infoToolbar</code>.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.ListBase.prototype.destroyInfoToolbar = function() { return new sap.m.ListBase(); };

/**
 * 
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.destroyItems = function() { return new sap.m.ListBase(); };

/**
 * 
 * Destroys the swipeContent in the aggregation 
 * named <code>swipeContent</code>.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.destroySwipeContent = function() { return new sap.m.ListBase(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'delete' event of this <code>sap.m.ListBase</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.detachDelete = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'growingFinished' event of this <code>sap.m.ListBase</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateFinished" event.
 * 
 */
sap.m.ListBase.prototype.detachGrowingFinished = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'growingStarted' event of this <code>sap.m.ListBase</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateStarted" event.
 * 
 */
sap.m.ListBase.prototype.detachGrowingStarted = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'itemPress' event of this <code>sap.m.ListBase</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.20
 * 
 */
sap.m.ListBase.prototype.detachItemPress = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.ListBase</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.16. 
 * Instead use "selectionChange" event.
 * 
 */
sap.m.ListBase.prototype.detachSelect = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'selectionChange' event of this <code>sap.m.ListBase</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.ListBase.prototype.detachSelectionChange = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'swipe' event of this <code>sap.m.ListBase</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.detachSwipe = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'updateFinished' event of this <code>sap.m.ListBase</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.3
 * 
 */
sap.m.ListBase.prototype.detachUpdateFinished = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'updateStarted' event of this <code>sap.m.ListBase</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.3
 * 
 */
sap.m.ListBase.prototype.detachUpdateStarted = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * 
 * Creates a new subclass of class sap.m.ListBase with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ListBase.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event delete to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'listItem' of type <code>sap.m.ListItemBase</code> The list item which fired the delete.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ListBase.prototype.fireDelete = function(mArguments) { return new sap.m.ListBase(); };

/**
 * 
 * Fire event growingFinished to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'actual' of type <code>int</code> Actual number of items.</li>
 * <li>'total' of type <code>int</code> Total number of items.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateFinished" event.
 * 
 */
sap.m.ListBase.prototype.fireGrowingFinished = function(mArguments) { return new sap.m.ListBase(); };

/**
 * 
 * Fire event growingStarted to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'actual' of type <code>int</code> Actual number of items.</li>
 * <li>'total' of type <code>int</code> Total number of items.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateStarted" event.
 * 
 */
sap.m.ListBase.prototype.fireGrowingStarted = function(mArguments) { return new sap.m.ListBase(); };

/**
 * 
 * Fire event itemPress to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'listItem' of type <code>sap.m.ListItemBase</code> The list item which fired the pressed event.
 * NOTE: This event is fired also for "GroupHeaderListItem" which does not have binding context.
 * 					</li>
 * <li>'srcControl' of type <code>sap.ui.core.Control</code> The control which caused the press event within the container.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * @since 1.20
 * 
 */
sap.m.ListBase.prototype.fireItemPress = function(mArguments) { return new sap.m.ListBase(); };

/**
 * 
 * Fire event select to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'listItem' of type <code>sap.m.ListItemBase</code> The list item which fired the select.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.16. 
 * Instead use "selectionChange" event.
 * 
 */
sap.m.ListBase.prototype.fireSelect = function(mArguments) { return new sap.m.ListBase(); };

/**
 * 
 * Fire event selectionChange to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'listItem' of type <code>sap.m.ListItemBase</code> The list item whose selection has changed. In "multi-selection" mode, only the up-most selected item is returned. This parameter can be used for single-selection modes.</li>
 * <li>'listItems' of type <code>sap.m.ListItemBase[]</code> This parameter is filled with array of list items whose selection has changed. This parameter can be used for multi-selection mode.</li>
 * <li>'selected' of type <code>boolean</code> This flag indicates whether the "listItem" parameter is selected or not.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16
 * 
 */
sap.m.ListBase.prototype.fireSelectionChange = function(mArguments) { return new sap.m.ListBase(); };

/**
 * 
 * Fire event swipe to attached listeners.
 * </p><p>
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * * 
 * Expects following event parameters:
 * <ul>
 * <li>'listItem' of type <code>sap.m.ListItemBase</code> The listitem which fired the swipe.</li>
 * <li>'swipeContent' of type <code>sap.ui.core.Control</code> Given swipeContent control to show on the right hand side of a list item.</li>
 * <li>'srcControl' of type <code>sap.ui.core.Control</code> Holds which control caused the swipe event in within the Item.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * 
 */
sap.m.ListBase.prototype.fireSwipe = function(mArguments) { return false; };

/**
 * 
 * Fire event updateFinished to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'reason' of type <code>string</code> The reason of update. Possible values are "Binding", "Filter", "Sort", "Growing", "Change", "Refresh", "Context"</li>
 * <li>'actual' of type <code>int</code> Actual number of items.</li>
 * <li>'total' of type <code>int</code> The total count of bound items. This parameter can be used if "growing" feature is enabled.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16.3
 * 
 */
sap.m.ListBase.prototype.fireUpdateFinished = function(mArguments) { return new sap.m.ListBase(); };

/**
 * 
 * Fire event updateStarted to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'reason' of type <code>string</code> The reason of update. Possible values are "Binding", "Filter", "Sort", "Growing", "Change", "Refresh", "Context"</li>
 * <li>'actual' of type <code>int</code> Actual number of items.</li>
 * <li>'total' of type <code>int</code> The total count of bound items. This parameter can be used if "growing" feature is enabled.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16.3
 * 
 */
sap.m.ListBase.prototype.fireUpdateStarted = function(mArguments) { return new sap.m.ListBase(); };

/**
 * 
 * Getter for property <code>enableBusyIndicator</code>.
 * When this property is set to "true", the List/Table will automatically display a BusyIndicator when it detects that data is being loaded or filtered. This BusyIndicator blocks the interaction with the items until data loading is finished.
 * For the List/Table controls BusyIndicator will be shown after one second. This behavior can be customized by setting the "busyIndicatorDelay" property.
 * When this property is set to "false", items will stay on the List/Table until data loading is finished.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enableBusyIndicator</code>
 * @public
 * @since 1.20.2
 * 
 */
sap.m.ListBase.prototype.getEnableBusyIndicator = function() { return false; };

/**
 * 
 * Getter for property <code>footerText</code>.
 * Footer Text
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>footerText</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getFooterText = function() { return ""; };

/**
 * 
 * Getter for property <code>growing</code>.
 * Sets the growing(paging) feature of control.
 * Note: This feature only works with item binding and should not be used with two way binding!
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>growing</code>
 * @public
 * @since 1.16
 * 
 */
sap.m.ListBase.prototype.getGrowing = function() { return false; };

/**
 * 
 * Returns growing information as object with "actual" and "total" keys.
 * Note: This function returns "null" if "growing" feature is disabled.
 * @type object
 * @public
 * @since 1.16
 */
sap.m.ListBase.prototype.getGrowingInfo = function() { return new Object(); };

/**
 * 
 * Getter for property <code>growingScrollToLoad</code>.
 * If true, user can scroll end to trigger a new page request. Otherwise a trigger button is displayed at the bottom of the list.
 * This property can be used only if "growing" property is set "true" and if you only have one instance of this control inside the scroll container(e.g Page).
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>growingScrollToLoad</code>
 * @public
 * @since 1.16
 * 
 */
sap.m.ListBase.prototype.getGrowingScrollToLoad = function() { return false; };

/**
 * 
 * Getter for property <code>growingThreshold</code>.
 * Number of items requested from the server. To activate this you should set "growing" property to "true".
 * </p><p>
 * Default value is <code>20</code>
 * @return {int} the value of property <code>growingThreshold</code>
 * @public
 * @since 1.16
 * 
 */
sap.m.ListBase.prototype.getGrowingThreshold = function() { return 0; };

/**
 * 
 * Getter for property <code>growingTriggerText</code>.
 * This text is displayed on the trigger button which is responsible to load new page at the end of the list. The default is a translated text ("Load More Data") coming from the message bundle.
 * This property can be used only if "growing" property is set "true" and scrollToLoad property is set "false".
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>growingTriggerText</code>
 * @public
 * @since 1.16
 * 
 */
sap.m.ListBase.prototype.getGrowingTriggerText = function() { return ""; };

/**
 * 
 * Getter for property <code>headerDesign</code>.
 * List header style. Possible vales are "Standard" and "Plain"
 * </p><p>
 * Default value is <code>Standard</code>
 * @return {sap.m.ListHeaderDesign} the value of property <code>headerDesign</code>
 * @public
 * @since 1.14
 * @deprecated Since version 1.16. 
 * Has no functionality since 1.16
 * 
 */
sap.m.ListBase.prototype.getHeaderDesign = function() { return new sap.m.ListHeaderDesign(); };

/**
 * 
 * Getter for property <code>headerText</code>.
 * The header text appearing in the list/table header.
 * Note: if "headerToolbar" aggregation is set, then this property is ignored.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>headerText</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getHeaderText = function() { return ""; };

/**
 * 
 * Getter for aggregation <code>headerToolbar</code>.<br/>
 * Header can be used as a Toolbar to add extra controls for user interactions.
 * Note: This aggregation overwrites "headerText" property.
 * @return {sap.m.Toolbar}
 * @public
 * @since 1.16
 * 
 */
sap.m.ListBase.prototype.getHeaderToolbar = function() { return new sap.m.Toolbar(); };

/**
 * 
 * Getter for property <code>includeItemInSelection</code>.
 * This property decides if the list item interacts with the selection. If it is "true", a tap on the item will set the selection control in front of the list item.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>includeItemInSelection</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getIncludeItemInSelection = function() { return false; };

/**
 * 
 * Getter for aggregation <code>infoToolbar</code>.<br/>
 * InfoBar is placed below the header and can be used to show extra information to the user.
 * @return {sap.m.Toolbar}
 * @public
 * @since 1.16
 * 
 */
sap.m.ListBase.prototype.getInfoToolbar = function() { return new sap.m.Toolbar(); };

/**
 * 
 * Getter for property <code>inset</code>.
 * Inset style false/true
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>inset</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getInset = function() { return false; };

/**
 * 
 * Returns ItemNavigation for controls uses List
 * @since 1.16.5
 * @protected
 */
sap.m.ListBase.prototype.getItemNavigation = function() { return null; };

/**
 * 
 * Getter for aggregation <code>items</code>.<br/>
 * The items of this list or rows of the table.
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for ListBase.
 * @return {sap.m.ListItemBase[]}
 * @public
 * 
 */
sap.m.ListBase.prototype.getItems = function() { return new Array(); };

/**
 * 
 * Getter for property <code>mode</code>.
 * Mode of a list (e.g. None, SingleSelect, MultiSelect, Delete, etc.)
 * </p><p>
 * Default value is <code>None</code>
 * @return {sap.m.ListMode} the value of property <code>mode</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getMode = function() { return new sap.m.ListMode(); };

/**
 * 
 * Getter for property <code>modeAnimationOn</code>.
 * Defines if animations will be shown when activating or deactivating selection modes.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>modeAnimationOn</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getModeAnimationOn = function() { return false; };

/**
 * 
 * Getter for property <code>noDataText</code>.
 * This text is displayed when the control has no data.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>noDataText</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getNoDataText = function() { return ""; };

/**
 * 
 * Getter for property <code>rememberSelections</code>.
 * By default, if you have binding then the control remembers selections after binding update(sorting, filter, refresh). If this is not a desired behavior for your use case, you can switch this off with setting it to "false".
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>rememberSelections</code>
 * @public
 * @since 1.16.6
 * 
 */
sap.m.ListBase.prototype.getRememberSelections = function() { return false; };

/**
 * 
 * Returns the binding contexts of the selected items.
 * Note: This method returns an empty array if no databinding is used.
 * @param {boolean} 
 *         bAll
 *         Set true to include even invisible selected items(e.g. the selections from the previous filters).
 * Note: In single selection modes, only the last selected item's binding context is returned in array.
 * @type object[]
 * @public
 * @since 1.18.6
 */
sap.m.ListBase.prototype.getSelectedContexts = function(bAll) { return new Array(); };

/**
 * 
 * Returns selected list item. When no item is selected, "null" is returned. When "multi-selection" is enabled and multiple items are selected, only the up-most selected item is returned.
 * @type sap.m.ListItemBase
 * @public
 */
sap.m.ListBase.prototype.getSelectedItem = function() { return new sap.m.ListItemBase(); };

/**
 * 
 * Returns an array containing the selected list items. If no items are selected, an empty array is returned.
 * @type sap.m.ListItemBase[]
 * @public
 */
sap.m.ListBase.prototype.getSelectedItems = function() { return new Array(); };

/**
 * 
 * Getter for property <code>showNoData</code>.
 * Enables an information text(see "noDataText" property) when the control has no data.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showNoData</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getShowNoData = function() { return false; };

/**
 * 
 * Getter for property <code>showSeparators</code>.
 * Defines which separator style will be used.
 * </p><p>
 * Default value is <code>All</code>
 * @return {sap.m.ListSeparators} the value of property <code>showSeparators</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getShowSeparators = function() { return new sap.m.ListSeparators(); };

/**
 * 
 * Getter for property <code>showUnread</code>.
 * Activates the unread feature for all items.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showUnread</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getShowUnread = function() { return false; };

/**
 * 
 * Getter for aggregation <code>swipeContent</code>.<br/>
 * User can swipe to bring in this control on the right hand side of a list item.
 * Note: This functionality gets disabled for non-touch devices.
 * @return {sap.ui.core.Control}
 * @public
 * 
 */
sap.m.ListBase.prototype.getSwipeContent = function() { return new sap.ui.core.Control(); };

/**
 * 
 * Getter for property <code>swipeDirection</code>.
 * Direction of swipe(e.g LeftToRight, RightToLeft, Both) to bring in a control on the right hand side of the list item.
 * </p><p>
 * Default value is <code>Both</code>
 * @return {sap.m.SwipeDirection} the value of property <code>swipeDirection</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getSwipeDirection = function() { return new sap.m.SwipeDirection(); };

/**
 * 
 * Returns swiped list item. When no item is swiped, "null" is returned.
 * @type sap.m.ListItemBase
 * @public
 */
sap.m.ListBase.prototype.getSwipedItem = function() { return new sap.m.ListItemBase(); };

/**
 * 
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getVisible = function() { return false; };

/**
 * 
 * Getter for property <code>width</code>.
 * Sets the width of the list.
 * </p><p>
 * Default value is <code>100%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.ListBase.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Checks for the provided <code>sap.m.ListItemBase</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ListItemBase}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ListBase.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * 
 * Inserts a item into the aggregation named <code>items</code>.
 * @param {sap.m.ListItemBase}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.insertItem = function(oItem,iIndex) { return new sap.m.ListBase(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ListItemBase[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ListBase.prototype.removeAllItems = function() { return new Array(); };

/**
 * 
 * Removes an item from the aggregation named <code>items</code>.
 * @param {int | string | sap.m.ListItemBase} vItem the item to remove or its index or id
 * @return {sap.m.ListItemBase} the removed item or null
 * @public
 * 
 */
sap.m.ListBase.prototype.removeItem = function(vItem) { return new sap.m.ListItemBase(); };

/**
 * 
 * Removes visible selections of the current selection mode.
 * @param {boolean} 
 *         bAll
 * @since 1.16.3 *         This control keeps old selections after filter or sorting. Set this parameter "true" to remove all selections.
 * @type sap.m.ListBase
 * @public
 */
sap.m.ListBase.prototype.removeSelections = function(bAll) { return new sap.m.ListBase(); };

/**
 * 
 * Select all items in "MultiSelection" mode.
 * @type sap.m.ListBase
 * @public
 * @since 1.16
 */
sap.m.ListBase.prototype.selectAll = function() { return new sap.m.ListBase(); };

/**
 * 
 * Setter for property <code>enableBusyIndicator</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnableBusyIndicator  new value for property <code>enableBusyIndicator</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.20.2
 * 
 */
sap.m.ListBase.prototype.setEnableBusyIndicator = function(bEnableBusyIndicator) { return new sap.m.ListBase(); };

/**
 * 
 * Setter for property <code>footerText</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sFooterText  new value for property <code>footerText</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setFooterText = function(sFooterText) { return new sap.m.ListBase(); };

/**
 * 
 * Setter for property <code>growing</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bGrowing  new value for property <code>growing</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.ListBase.prototype.setGrowing = function(bGrowing) { return new sap.m.ListBase(); };

/**
 * 
 * Setter for property <code>growingScrollToLoad</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bGrowingScrollToLoad  new value for property <code>growingScrollToLoad</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.ListBase.prototype.setGrowingScrollToLoad = function(bGrowingScrollToLoad) { return new sap.m.ListBase(); };

/**
 * 
 * Setter for property <code>growingThreshold</code>.
 * </p><p>
 * Default value is <code>20</code> 
 * @param {int} iGrowingThreshold  new value for property <code>growingThreshold</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.ListBase.prototype.setGrowingThreshold = function(iGrowingThreshold) { return new sap.m.ListBase(); };

/**
 * 
 * Setter for property <code>growingTriggerText</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sGrowingTriggerText  new value for property <code>growingTriggerText</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.ListBase.prototype.setGrowingTriggerText = function(sGrowingTriggerText) { return new sap.m.ListBase(); };

/**
 * 
 * Setter for property <code>headerDesign</code>.
 * </p><p>
 * Default value is <code>Standard</code> 
 * @param {sap.m.ListHeaderDesign} oHeaderDesign  new value for property <code>headerDesign</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.14
 * @deprecated Since version 1.16. 
 * Has no functionality since 1.16
 * 
 */
sap.m.ListBase.prototype.setHeaderDesign = function(oHeaderDesign) { return new sap.m.ListBase(); };

/**
 * 
 * Setter for property <code>headerText</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sHeaderText  new value for property <code>headerText</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setHeaderText = function(sHeaderText) { return new sap.m.ListBase(); };

/**
 * 
 * Setter for the aggregated <code>headerToolbar</code>.
 * @param {sap.m.Toolbar} oHeaderToolbar
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.ListBase.prototype.setHeaderToolbar = function(oHeaderToolbar) { return new sap.m.ListBase(); };

/**
 * 
 * Setter for property <code>includeItemInSelection</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bIncludeItemInSelection  new value for property <code>includeItemInSelection</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setIncludeItemInSelection = function(bIncludeItemInSelection) { return new sap.m.ListBase(); };

/**
 * 
 * Setter for the aggregated <code>infoToolbar</code>.
 * @param {sap.m.Toolbar} oInfoToolbar
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.ListBase.prototype.setInfoToolbar = function(oInfoToolbar) { return new sap.m.ListBase(); };

/**
 * 
 * Setter for property <code>inset</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bInset  new value for property <code>inset</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setInset = function(bInset) { return new sap.m.ListBase(); };

/**
 * 
 * Setter for property <code>mode</code>.
 * </p><p>
 * Default value is <code>None</code> 
 * @param {sap.m.ListMode} oMode  new value for property <code>mode</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setMode = function(oMode) { return new sap.m.ListBase(); };

/**
 * 
 * Setter for property <code>modeAnimationOn</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bModeAnimationOn  new value for property <code>modeAnimationOn</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setModeAnimationOn = function(bModeAnimationOn) { return new sap.m.ListBase(); };

/**
 * 
 * Setter for property <code>noDataText</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sNoDataText  new value for property <code>noDataText</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setNoDataText = function(sNoDataText) { return new sap.m.ListBase(); };

/**
 * 
 * Setter for property <code>rememberSelections</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bRememberSelections  new value for property <code>rememberSelections</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.6
 * 
 */
sap.m.ListBase.prototype.setRememberSelections = function(bRememberSelections) { return new sap.m.ListBase(); };

/**
 * 
 * Selects or deselects the given list item.
 * @param {sap.m.ListItemBase} 
 *         oListItem
 *         The list item whose selection to be changed. This parameter is mandatory.
 * @param {boolean} 
 *         bSelect
 *         Sets selected status of the list item. Default value is true.
 * @type sap.m.ListBase
 * @public
 */
sap.m.ListBase.prototype.setSelectedItem = function(oListItem,bSelect) { return new sap.m.ListBase(); };

/**
 * 
 * Sets a list item to be selected by id. In single mode the method removes the previous selection.
 * @param {string} 
 *         sId
 *         The id of the list item whose selection to be changed.
 * @param {boolean} 
 *         bSelect
 *         Sets selected status of the list item. Default value is true.
 * @type sap.m.ListBase
 * @public
 */
sap.m.ListBase.prototype.setSelectedItemById = function(sId,bSelect) { return new sap.m.ListBase(); };

/**
 * 
 * Setter for property <code>showNoData</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bShowNoData  new value for property <code>showNoData</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setShowNoData = function(bShowNoData) { return new sap.m.ListBase(); };

/**
 * 
 * Setter for property <code>showSeparators</code>.
 * </p><p>
 * Default value is <code>All</code> 
 * @param {sap.m.ListSeparators} oShowSeparators  new value for property <code>showSeparators</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setShowSeparators = function(oShowSeparators) { return new sap.m.ListBase(); };

/**
 * 
 * Setter for property <code>showUnread</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bShowUnread  new value for property <code>showUnread</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setShowUnread = function(bShowUnread) { return new sap.m.ListBase(); };

/**
 * 
 * Setter for the aggregated <code>swipeContent</code>.
 * @param {sap.ui.core.Control} oSwipeContent
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setSwipeContent = function(oSwipeContent) { return new sap.m.ListBase(); };

/**
 * 
 * Setter for property <code>swipeDirection</code>.
 * </p><p>
 * Default value is <code>Both</code> 
 * @param {sap.m.SwipeDirection} oSwipeDirection  new value for property <code>swipeDirection</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setSwipeDirection = function(oSwipeDirection) { return new sap.m.ListBase(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setVisible = function(bVisible) { return new sap.m.ListBase(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is <code>100%</code> 
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.setWidth = function(sWidth) { return new sap.m.ListBase(); };

/**
 * 
 * After swipeContent is shown, user can interact with this control(e.g Tap). After interaction is done, you can/should use this method to hide swipeContent from screen.
 * Note: If users try to tap inside of the list but outside of the swipeContent then control hides automatically.
 * @param {any} 
 *         oCallback
 *         This callback function is called with two parameters(swipedListItem and swipedContent) after swipe-out animation is finished.
 * @type sap.m.ListBase
 * @public
 */
sap.m.ListBase.prototype.swipeOut = function(oCallback) { return new sap.m.ListBase(); };

/**
 * 
 * Unbinder for aggregation <code>items</code>.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.unbindItems = function() { return new sap.m.ListBase(); };


// ---- sap.m.ListHeaderDesign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ListHeaderDesign.toString = function() { return ""; };

// ---- sap.m.ListItemBase --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ListItemBase.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : sap.m.ListType (default: sap.m.ListType.Inactive)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getUnread unread} : boolean (default: false)</li>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * <li>{@link #getCounter counter} : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.ListItemBase#event:tap tap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListItemBase#event:detailTap detailTap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListItemBase#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListItemBase#event:detailPress detailPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ListItemBase contains the core features of all specific list items.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.ListItemBase = function(sId,mSettings) {};
/**
 * 
 * Event is fired when the user clicks on the detail button of the control. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.ListItemBase.prototype.detailPress = function(oControlEvent) { return null; };

/**
 * 
 * detail tap event (This event is deprecated, use the detailPress event instead) 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.ListItemBase.prototype.detailTap = function(oControlEvent) { return null; };

/**
 * 
 * Event is fired when the user clicks on the control. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.ListItemBase.prototype.press = function(oControlEvent) { return null; };

/**
 * 
 * tap event (This event is deprecated, use the press event instead) 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.ListItemBase.prototype.tap = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. 
 * </p><p>
 * Event is fired when the user clicks on the detail button of the control. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.attachDetailPress = function(oData,fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. 
 * </p><p>
 * detail tap event (This event is deprecated, use the detailPress event instead) 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.attachDetailTap = function(oData,fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. 
 * </p><p>
 * Event is fired when the user clicks on the control. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. 
 * </p><p>
 * tap event (This event is deprecated, use the press event instead) 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.attachTap = function(oData,fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.detachDetailPress = function(fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.detachDetailTap = function(fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.detachTap = function(fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * 
 * Creates a new subclass of class sap.m.ListItemBase with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ListItemBase.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event detailPress to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ListItemBase.prototype.fireDetailPress = function(mArguments) { return new sap.m.ListItemBase(); };

/**
 * 
 * Fire event detailTap to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ListItemBase.prototype.fireDetailTap = function(mArguments) { return new sap.m.ListItemBase(); };

/**
 * 
 * Fire event press to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ListItemBase.prototype.firePress = function(mArguments) { return new sap.m.ListItemBase(); };

/**
 * 
 * Fire event tap to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ListItemBase.prototype.fireTap = function(mArguments) { return new sap.m.ListItemBase(); };

/**
 * 
 * Getter for property <code>counter</code>.
 * Property sets a counter bubble with the integer given.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {int} the value of property <code>counter</code>
 * @public
 * 
 */
sap.m.ListItemBase.prototype.getCounter = function() { return 0; };

/**
 * 
 * Getter for property <code>selected</code>.
 * This property defines the select state of the list item when using Single/Multi-Selection.
 * </p><p>
 * Note: Binding the "selected" property in single selection mode, may cause unwanted results, if you have more than one selected item in your binding
 * </p><p>
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * 
 */
sap.m.ListItemBase.prototype.getSelected = function() { return false; };

/**
 * 
 * Getter for property <code>type</code>.
 * Type of the list item, defines the behaviour
 * </p><p>
 * Default value is <code>Inactive</code>
 * @return {sap.m.ListType} the value of property <code>type</code>
 * @public
 * 
 */
sap.m.ListItemBase.prototype.getType = function() { return new sap.m.ListType(); };

/**
 * 
 * Getter for property <code>unread</code>.
 * If the unread indicator is set on the list, this boolean defines if it will be shown on this list item. Default is false.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>unread</code>
 * @public
 * 
 */
sap.m.ListItemBase.prototype.getUnread = function() { return false; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Invisible list items are not rendered
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.ListItemBase.prototype.getVisible = function() { return false; };

/**
 * 
 * returns the state of the item selection as a boolean
 * @type boolean
 * @public
 * @deprecated Since version 1.10.2. 
 * API Change makes this method unnecessary
 */
sap.m.ListItemBase.prototype.isSelected = function() { return false; };

/**
 * 
 * Setter for property <code>counter</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {int} iCounter  new value for property <code>counter</code>
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.setCounter = function(iCounter) { return new sap.m.ListItemBase(); };

/**
 * 
 * Setter for property <code>selected</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bSelected  new value for property <code>selected</code>
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.setSelected = function(bSelected) { return new sap.m.ListItemBase(); };

/**
 * 
 * Setter for property <code>type</code>.
 * </p><p>
 * Default value is <code>Inactive</code> 
 * @param {sap.m.ListType} oType  new value for property <code>type</code>
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.setType = function(oType) { return new sap.m.ListItemBase(); };

/**
 * 
 * Setter for property <code>unread</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bUnread  new value for property <code>unread</code>
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.setUnread = function(bUnread) { return new sap.m.ListItemBase(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.setVisible = function(bVisible) { return new sap.m.ListItemBase(); };


// ---- sap.m.ListMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ListMode.toString = function() { return ""; };

// ---- sap.m.ListSeparators --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ListSeparators.toString = function() { return ""; };

// ---- sap.m.ListType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ListType.toString = function() { return ""; };

// ---- sap.m.MessageBox --------------------------------------------------------------------------

/**
 * 
 * Displays an alert dialog with the given message and an OK button (no icons).
 * If a callback is given, it is called after the alert dialog has been closed
 * by the user via the OK button. The callback is called with the following signature:
 * </p><p>
 * <pre>
 *   function (oAction)
 * </pre>
 * </p><p>
 * where <code>oAction</code> can be either sap.m.MessageBox.Action.OK when the alert dialog is closed by tapping on the OK button 
 * 	or null when the alert dialog is closed by calling <code>sap.m.InstanceManager.closeAllDialogs()</code>.
 * </p><p>
 * The alert dialog opened by this method is processed asynchronously.
 * Applications have to use the <code>fnCallback</code> to continue work after the
 * user closed the alert dialog.
 * @param {string} sMessage Message to be displayed in the alert dialog
 * @param {function} [fnCallback] callback function to be called when the user closes the dialog
 * @param {string} [sTitle='Alert'] Title to be displayed in the alert dialog
 * @param {string} [sDialogId] ID to be used for the alert dialog. Intended for test scenarios, not recommended for productive apps
 * @public
 * @memberOf sap.m.MessageBox
 */
sap.m.MessageBox.alert = function(sMessage,fnCallback,sTitle,sDialogId) { return null; };

/**
 * 
 * Displays a confirmation dialog with the given message, no icon (will be provided later)
 * an OK button, and a Cancel button. If a callback is given, it is called after the
 * alert box has been closed by the user via one of the buttons.
 * The callback is called with the following signature
 * </p><p>
 * <pre>
 *   function(oAction)
 * </pre>
 * </p><p>
 * where oAction is set by one of the following three values:
 * 1. sap.m.MessageBox.Action.OK: OK (confirmed) button is tapped.
 * 2. sap.m.MessageBox.Action.Cancel: Cancel (unconfirmed) button is tapped.
 * 3. null: Confirm dialog is closed by Calling <code>sap.m.InstanceManager.closeAllDialogs()</code>
 * </p><p>
 * The confirmation dialog opened by this method is processed asynchronously.
 * Applications have to use the <code>fnCallback</code> to continue work after the
 * user closed the confirmation dialog
 * @param {string} sMessage Message to display in the confirmation dialog
 * @param {function} [fnCallback] Callback to be called when the user closes the dialog
 * @param {string} [sTitle='Confirmation'] Title to display in the confirmation dialog
 * @param {string} [sDialogId] ID to be used for the confirmation dialog. Intended for test scenarios, not recommended for productive apps
 * @public
 * @memberOf sap.m.MessageBox
 */
sap.m.MessageBox.confirm = function(sMessage,fnCallback,sTitle,sDialogId) { return null; };

/**
 * 
 * Creates and displays a sap.m.Dialog with type sap.m.DialogType.Message with the given text and buttons, and optionally other parts.
 * After the user has tapped a button, the <code>callback</code> function is invoked when given.
 * </p><p>
 * The only mandatory parameter is <code>sMessage</code>.
 * </p><p>
 * The created dialog is executed asynchronously. When it has been created and registered for rendering,
 * this function returns without waiting for a user reaction.
 * </p><p>
 * When applications have to react on the users choice, they have to provide a callback function and
 * postpone any reaction on the user choice until that callback is triggered.
 * </p><p>
 * The signature of the callback is
 * </p><p>
 *   function (oAction);
 * </p><p>
 * where <code>oAction</code> is the button that the user has tapped. For example, when the user has pressed the close button,
 * a sap.m.MessageBox.Action.Close is returned.
 * @param {string} sMessage The message to be displayed.
 * @param {sap.m.MessageBox.Icon} [oIcon=None] The icon to be displayed.
 * @param {string} [sTitle=''] The title of the message box.
 * @param {sap.m.MessageBox.Action|sap.m.MessageBox.Action[]|string|string[]} [vActions] Either a single action, or an array of two actions.
 *      If no action(s) are given, the single action MessageBox.Action.OK is taken as a default for the parameter. If more than two actions are given,
 *      only the first two actions are taken. Custom action string(s) can be provided, and then the translation of custom action string(s) needs to be done by the application.
 * @param {function} [fnCallback] Function to be called when the user has tapped a button or has closed the message box.
 * @param {string} [sDialogId] ID to be used for the dialog. Intended for test scenarios, not recommended for productive apps
 * @public
 * @memberOf sap.m.MessageBox
 */
sap.m.MessageBox.show = function(sMessage,oIcon,sTitle,vActions,fnCallback,sDialogId) { return null; };


// ---- sap.m.MessageBox.Action --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.MessageBox.Action.toString = function() { return ""; };

// ---- sap.m.MessageBox.Icon --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.MessageBox.Icon.toString = function() { return ""; };

// ---- sap.m.MessageToast --------------------------------------------------------------------------

/**
 * 
 * Creates and displays a simple message toast notification message with the given text, and optionally other options.
 * </p><p>
 * The only mandatory parameter is <code>sMessage</code>.
 * @param {string} sMessage The message to be displayed.
 * @param {object} [mOptions] Optionally other options.
 * @param {int} [mOptions.duration=3000] Time in milliseconds before the close animation starts. Needs to be a finite positive nonzero integer.
 * @param {sap.ui.core.CSSSize} [mOptions.width='15em'] The width of the message toast, this value can be provided in %, em, px and all possible CSS measures.
 * @param {sap.ui.core.Popup.Dock} [mOptions.my='center bottom'] Specifies which point of the message toast should be aligned.
 * @param {sap.ui.core.Popup.Dock} [mOptions.at='center bottom'] Specifies the point of the reference element to which the message toast should be aligned.
 * @param {sap.ui.core.Control|Element|jQuery|Window|undefined} [mOptions.of=window] Specifies the reference element to which the message toast should be aligned, by default it is aligned to the browser visual viewport.
 * @param {string} [mOptions.offset='0 0'] The offset relative to the docking point, specified as a string with space-separated pixel values (e.g. "0 10" to move the message toast 10 pixels to the right).
 * @param {string} [mOptions.collision='fit fit'] Specifies how the position of the message toast should be adjusted in case it overflows the screen in some direction. Possible values “fit”, “flip”, “none”, or a pair for horizontal and vertical e.g. "fit flip”, "fit none".
 * @param {function} [mOptions.onClose=null] Function to be called when the message toast closes.
 * @param {boolean} [mOptions.autoClose=true] Specify whether the message toast should close as soon as the end user touches the screen.
 * @param {string} [mOptions.animationTimingFunction='ease'] Describes how the close animation will progress. Possible values "ease", "linear", "ease-in", "ease-out", "ease-in-out". This feature is not supported in android and ie9 browsers.
 * @param {int} [mOptions.animationDuration=1000] Time in milliseconds that the close animation takes to complete. Needs to be a finite positive integer. For not animation set to 0. This feature is not supported in android and ie9 browsers.
 * @param {boolean} [mOptions.closeOnBrowserNavigation=true] Whether the message toast closes on browser navigation.
 * @type void
 * @public
 * 
 * @memberOf sap.m.MessageToast
 */
sap.m.MessageToast.show = function(sMessage,mOptions) { return null; };


// ---- sap.m.NavContainer --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new NavContainer.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getDefaultTransitionName defaultTransitionName} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getPages pages} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getInitialPage initialPage} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.NavContainer#event:navigate navigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.NavContainer#event:afterNavigate afterNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The NavContainer control handles hierarchic navigation between Pages or other fullscreen controls.
 * </p><p>
 * All children of this control will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.NavContainer = function(sId,mSettings) {};
/**
 * 
 * The event is fired when navigation between two pages has completed. In case of animated transitions this event is fired with some delay after the "navigate" event. 
 * @event
 * @since 1.7.1
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which had been shown before navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which had been shown before navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which is now shown after navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which is now shown after navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether was a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this was a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 */
sap.m.NavContainer.prototype.afterNavigate = function(oControlEvent) { return null; };

/**
 * 
 * The event is fired when navigation between two pages has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation. 
 * @event
 * @since 1.7.1
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which was shown before the current navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which was shown before the current navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which will be shown after the current navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which will be shown after the current navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether this is a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this is a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this is a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 */
sap.m.NavContainer.prototype.navigate = function(oControlEvent) { return null; };

/**
 * 
 * Adds a custom transition to the NavContainer type (not to a particular instance!). The transition is identified by a "name". Make sure to only use names that will not collide with transitions which may be added to the NavContainer later. A suggestion is to use the prefix "c_" or "_" for your custom transitions to ensure this.
 * </p><p>
 * "to" and "back" are the transition functions for the forward and backward navigation.
 * Both will be called with the following parameters:
 * - oFromPage: the Control which is currently being displayed by the NavContainer
 * - oToPage: the Control which should be displayed by the NavContainer after the transition
 * - fCallback: a function which MUST be called when the transition has completed
 * - oTransitionParameters: a data object that can be given by application code when triggering the transition by calling to() or back(); this object could give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration
 * </p><p>
 * The contract for "to" and "back" is that they may do an animation of their choice, but it should not take "too long". At the beginning of the transition the target page "oToPage" does have the CSS class "sapMNavItemHidden" which initially hides the target page (visibility:hidden). The transition can do any preparation (e.g. move that page out of the screen or make it transparent) and then should remove this CSS class.
 * After the animation the target page "oToPage" should cover the entire screen and the source page "oFromPage" should not be visible anymore. This page should then have the CSS class "sapMNavItemHidden".
 * For adding/removing this or other CSS classes, the transition can use the addStyleClass/removeStyleClass method:
 * oFromPage.addStyleClass("sapMNavItemHidden");
 * When the transition is complete, it MUST call the given fCallback method to inform the NavContainer that navigation has finished!
 * </p><p>
 * Hint: if the target page of your transition stays black on iPhone, try wrapping the animation start into a
 * setTimeout(..., 0)
 * block (delayed, but without waiting).
 * </p><p>
 * This method can be called on any NavContainer instance or statically on the sap.m.NavContainer type. However, the transition will always be registered for the type (and ALL instances), not for the single instance on which this method was invoked.
 * </p><p>
 * Returns the sap.m.NavContainer type if called statically, or "this" (to allow method chaining) if called on a particular NavContainer instance.
 * @param {string} 
 *         sName
 *         The name of the transition. This name can be used by the application to choose this transition when navigating "to()" or "back()": the "transitionName" parameter of "NavContainer.to()" corresponds to this name, the back() navigation will automatically use the same transition.
 * </p><p>
 * Make sure to only use names that will not collide with transitions which may be added to the NavContainer later. A suggestion is to use the prefix "c_" or "_" for your custom transitions to ensure this.
 * @param {object} 
 *         oTo
 *         The function which will be called by the NavContainer when the application navigates "to()", using this animation's name. The NavContainer instance is the "this" context within the animation function.
 * </p><p>
 * See the documentation of NavContainer.addCustomTransitions for more details about this function.
 * @param {object} 
 *         oBack
 *         The function which will be called by the NavContainer when the application navigates "back()" from a page where it had navigated to using this animation's name. The NavContainer instance is the "this" context within the animation function.
 * </p><p>
 * See the documentation of NavContainer.addCustomTransitions for more details about this function.
 * @type sap.m.NavContainer
 * @public
 */
sap.m.NavContainer.prototype.addCustomTransition = function(sName,oTo,oBack) { return new sap.m.NavContainer(); };

/**
 * 
 * Adds some page <code>oPage</code> 
 * to the aggregation named <code>pages</code>.
 * @param {sap.ui.core.Control}
 *            oPage the page to add; if empty, nothing is inserted
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.NavContainer.prototype.addPage = function(oPage) { return new sap.m.NavContainer(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'afterNavigate' event of this <code>sap.m.NavContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.NavContainer</code>.<br/> itself. 
 * </p><p>
 * The event is fired when navigation between two pages has completed. In case of animated transitions this event is fired with some delay after the "navigate" event. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.NavContainer</code>.<br/> itself.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * 
 */
sap.m.NavContainer.prototype.attachAfterNavigate = function(oData,fnFunction,oListener) { return new sap.m.NavContainer(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'navigate' event of this <code>sap.m.NavContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.NavContainer</code>.<br/> itself. 
 * </p><p>
 * The event is fired when navigation between two pages has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.NavContainer</code>.<br/> itself.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * 
 */
sap.m.NavContainer.prototype.attachNavigate = function(oData,fnFunction,oListener) { return new sap.m.NavContainer(); };

/**
 * 
 * Navigates back one level. If already on the initial page and there is no place to go back, nothing happens.
 * </p><p>
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property. The original "data" object from the "to" navigation is also available in these event objects.
 * @param {object} 
 *         oBackData
 * @since 1.7.1 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * </p><p>
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * </p><p>
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters
 * @since 1.7.1 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * </p><p>
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * </p><p>
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.m.NavContainer
 * @public
 */
sap.m.NavContainer.prototype.back = function(oBackData,oTransitionParameters) { return new sap.m.NavContainer(); };

/**
 * 
 * Navigates back to the nearest previous page in the NavContainer history with the given ID. If there is no such page among the previous pages, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 * </p><p>
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property. The original "data" object from the "to" navigation is also available in these event objects.
 * @param {string} 
 *         sPageId
 *         The ID of the screen to which back navigation should happen. The nearest page with this ID among the previous pages in the history stack will be used.
 * @param {object} 
 *         oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the "backToPage" navigation. The event on the target page will contain this data object as "backData" property.
 * </p><p>
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * </p><p>
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * </p><p>
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.m.NavContainer
 * @public
 * @since 1.7.2
 */
sap.m.NavContainer.prototype.backToPage = function(sPageId,oBackData,oTransitionParameters) { return new sap.m.NavContainer(); };

/**
 * 
 * Navigates back to the initial/top level (this is the element aggregated as "initialPage", or the first added element). If already on the initial page, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 * </p><p>
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property.
 * @param {object} 
 *         oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the "backToTop" navigation. The event on the target page will contain this data object as "backData" property.
 * </p><p>
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * </p><p>
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * </p><p>
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.m.NavContainer
 * @public
 * @since 1.7.1
 */
sap.m.NavContainer.prototype.backToTop = function(oBackData,oTransitionParameters) { return new sap.m.NavContainer(); };

/**
 * 
 * Returns whether the current page is the top/initial page.
 * </p><p>
 * Note: going to the initial page again with a row of "to" navigations causes the initial page to be displayed again, but logically one is not at the top level, so this method returns "false" in this case.
 * @type boolean
 * @public
 */
sap.m.NavContainer.prototype.currentPageIsTopPage = function() { return false; };

/**
 * 
 * Destroys all the pages in the aggregation 
 * named <code>pages</code>.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.NavContainer.prototype.destroyPages = function() { return new sap.m.NavContainer(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'afterNavigate' event of this <code>sap.m.NavContainer</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * 
 */
sap.m.NavContainer.prototype.detachAfterNavigate = function(fnFunction,oListener) { return new sap.m.NavContainer(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'navigate' event of this <code>sap.m.NavContainer</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * 
 */
sap.m.NavContainer.prototype.detachNavigate = function(fnFunction,oListener) { return new sap.m.NavContainer(); };

/**
 * 
 * Creates a new subclass of class sap.m.NavContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.NavContainer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event afterNavigate to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code> The page which had been shown before navigation.</li>
 * <li>'fromId' of type <code>string</code> The ID of the page which had been shown before navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code> The page which is now shown after navigation.</li>
 * <li>'toId' of type <code>string</code> The ID of the page which is now shown after navigation.</li>
 * <li>'firstTime' of type <code>boolean</code> Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code> Whether was a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code> Whether this was a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code> How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @protected
 * @since 1.7.1
 * 
 */
sap.m.NavContainer.prototype.fireAfterNavigate = function(mArguments) { return new sap.m.NavContainer(); };

/**
 * 
 * Fire event navigate to attached listeners.
 * </p><p>
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * * 
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code> The page which was shown before the current navigation.</li>
 * <li>'fromId' of type <code>string</code> The ID of the page which was shown before the current navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code> The page which will be shown after the current navigation.</li>
 * <li>'toId' of type <code>string</code> The ID of the page which will be shown after the current navigation.</li>
 * <li>'firstTime' of type <code>boolean</code> Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code> Whether this is a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code> Whether this is a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code> Whether this is a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code> How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @since 1.7.1
 * 
 */
sap.m.NavContainer.prototype.fireNavigate = function(mArguments) { return false; };

/**
 * 
 * Returns the currently displayed page-level control. Note: it is not necessarily an instance of sap.m.Page, but it could also be a sap.ui.core.View, sap.m.Carousel, or whatever is aggregated.
 * </p><p>
 * Returns undefined if no page has been added yet.
 * @type sap.ui.core.Control
 * @public
 */
sap.m.NavContainer.prototype.getCurrentPage = function() { return new sap.ui.core.Control(); };

/**
 * 
 * Getter for property <code>defaultTransitionName</code>.
 * The type of the transition/animation to apply when "to()" is called without defining a transition type to use. The default is "slide" on iOS and Android; on Windows Phone the default is "door". Other options are: "fade", "flip" and "show" - and the names of any registered custom transitions.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>defaultTransitionName</code>
 * @public
 * @since 1.7.1
 * 
 */
sap.m.NavContainer.prototype.getDefaultTransitionName = function() { return ""; };

/**
 * 
 * Getter for property <code>height</code>.
 * The height of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.
 * </p><p>
 * Default value is <code>'100%'</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.m.NavContainer.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * This association can be used to define which page is displayed initially. If the given page does not exist or no page is given, the first page which has been added is considered as initial page.
 * This value should be set initially and not set/modified while the application is running.
 * </p><p>
 * This could be used not only for the initial display, but also if the user wants to navigate "up to top", so this page serves as a sort of "home/root page".
 * @return {string} Id of the element which is the current target of the <code>initialPage</code> association, or null
 * @public
 * 
 */
sap.m.NavContainer.prototype.getInitialPage = function() { return ""; };

/**
 * 
 * Returns the control with the given ID from the "pages" aggregation (if available).
 * @param {string} 
 *         sId
 *         The ID of the aggregated control to find.
 * @type sap.ui.core.Control
 * @public
 */
sap.m.NavContainer.prototype.getPage = function(sId) { return new sap.ui.core.Control(); };

/**
 * 
 * Getter for aggregation <code>pages</code>.<br/>
 * The content entities between which this NavContainer navigates. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
 * </p><p>
 * These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for NavContainer.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.NavContainer.prototype.getPages = function() { return new Array(); };

/**
 * 
 * Returns the previous page (the page from which the user drilled down to the current page with "to()").
 * Note: this is not the page which the user has seen before, but the page which is the target of the next "back()" navigation.
 * If there is no previous page, "undefined" is returned.
 * @type sap.ui.core.Control
 * @public
 * @since 1.7.1
 */
sap.m.NavContainer.prototype.getPreviousPage = function() { return new sap.ui.core.Control(); };

/**
 * 
 * Getter for property <code>visible</code>.
 * Whether the NavContainer is visible.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.NavContainer.prototype.getVisible = function() { return false; };

/**
 * 
 * Getter for property <code>width</code>.
 * The width of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.
 * </p><p>
 * Default value is <code>'100%'</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.NavContainer.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>pages</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *            oPage the page whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.NavContainer.prototype.indexOfPage = function(oPage) { return 0; };

/**
 * 
 * Inserts a page into the aggregation named <code>pages</code>.
 * @param {sap.ui.core.Control}
 *          oPage the page to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the page should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the page is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the page is inserted at 
 *             the last position        
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.NavContainer.prototype.insertPage = function(oPage,iIndex) { return new sap.m.NavContainer(); };

/**
 * 
 * Inserts the page/control with the specified ID into the navigation history stack of the NavContainer.
 * </p><p>
 * This can be used for deep-linking when the user directly reached a drilldown detail page using a bookmark and then wants to navigate up in the drilldown hierarchy. Normally such a back navigation would not be possible because there is no previous page in the NavContainer's history stack.
 * @param {string} 
 *         sPageId
 *         The ID of the control/page/screen which is inserted into the history stack. The respective control must be aggregated by the NavContainer, otherwise this will cause an error.
 * @param {string} 
 *         sTransitionName
 *         The type of the transition/animation which would have been used to navigate from the (inserted) previous page to the current page. When navigating back, the inverse animation will be applied.
 * This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 * @param {object} 
 *         oData
 *         This optional object can carry any payload data which would have been given to the inserted previous page if the user would have done a normal forward navigation to it.
 * @type sap.m.NavContainer
 * @public
 * @since 1.16.1
 */
sap.m.NavContainer.prototype.insertPreviousPage = function(sPageId,sTransitionName,oData) { return new sap.m.NavContainer(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>pages</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.NavContainer.prototype.removeAllPages = function() { return new Array(); };

/**
 * 
 * Removes an page from the aggregation named <code>pages</code>.
 * @param {int | string | sap.ui.core.Control} vPage the page to remove or its index or id
 * @return {sap.ui.core.Control} the removed page or null
 * @public
 * 
 */
sap.m.NavContainer.prototype.removePage = function(vPage) { return new sap.ui.core.Control(); };

/**
 * 
 * Setter for property <code>defaultTransitionName</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sDefaultTransitionName  new value for property <code>defaultTransitionName</code>
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * 
 */
sap.m.NavContainer.prototype.setDefaultTransitionName = function(sDefaultTransitionName) { return new sap.m.NavContainer(); };

/**
 * 
 * Setter for property <code>height</code>.
 * </p><p>
 * Default value is <code>'100%'</code> 
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.NavContainer.prototype.setHeight = function(sHeight) { return new sap.m.NavContainer(); };

/**
 * 
 * This association can be used to define which page is displayed initially. If the given page does not exist or no page is given, the first page which has been added is considered as initial page.
 * This value should be set initially and not set/modified while the application is running.
 * </p><p>
 * This could be used not only for the initial display, but also if the user wants to navigate "up to top", so this page serves as a sort of "home/root page".
 * @param {string | sap.ui.core.Control} vInitialPage 
 *    Id of an element which becomes the new target of this <code>initialPage</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.NavContainer.prototype.setInitialPage = function(vInitialPage) { return new sap.m.NavContainer(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.NavContainer.prototype.setVisible = function(bVisible) { return new sap.m.NavContainer(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is <code>'100%'</code> 
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.NavContainer.prototype.setWidth = function(sWidth) { return new sap.m.NavContainer(); };

/**
 * 
 * Navigates to the next page (with drill-down semantic) with the given (or default) animation. This creates a new history item inside the NavContainer and allows going back.
 * </p><p>
 * Note that any modifications to the target page (like setting its title, or anything else that could cause a re-rendering) should be done BEFORE calling to(), in order to avoid unwanted side effects, e.g. related to the page animation.
 * </p><p>
 * Available transitions currently include "slide" (default), "fade", "flip", and "show". None of these is currently making use of any given transitionParameters.
 * </p><p>
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given data object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property.
 * @param {string} 
 *         sPageId
 *         The screen to which drilldown should happen. The ID or the control itself can be given.
 * @param {string} 
 *         sTransitionName
 *         The type of the transition/animation to apply. This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 * Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
 * </p><p>
 * None of the standard transitions is currently making use of any given transition parameters.
 * @param {object} 
 *         oData
 * @since 1.7.1 *         This optional object can carry any payload data which should be made available to the target page. The "beforeShow" event on the target page will contain this data object as "data" property.
 * </p><p>
 * Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * </p><p>
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters
 * @since 1.7.1 *         This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * </p><p>
 * For a proper parameter order, the "data" parameter must be given when the "transitionParameters" parameter is used. (it can be given as "null")
 * </p><p>
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * The "show", "slide" and "fade" transitions do not use any parameter.
 * @type sap.m.NavContainer
 * @public
 */
sap.m.NavContainer.prototype.to = function(sPageId,sTransitionName,oData,oTransitionParameters) { return new sap.m.NavContainer(); };


// ---- sap.m.NavContainerChild --------------------------------------------------------------------------

/**
 * 
 * This event is fired every time when the NavContainer has made this child control invisible. In case of animated transitions this 
 * event is fired after the transition finishes. This control is now no longer being displayed and not animated anymore.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @public
 */
sap.m.NavContainerChild.AfterHide = function() { return null; };

/**
 * 
 * This event is fired every time when the NavContainer has made this child control visible. In case of animated transitions this 
 * event is fired after the transition finishes. This control is now being displayed and not animated anymore.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @param {object} oEvent.data the data object which has been passed with the "to" navigation, or an empty object
 * @param {object} oEvent.backData the data object which has been passed with the back navigation, or an empty object
 * @public
 */
sap.m.NavContainerChild.AfterShow = function() { return null; };

/**
 * 
 * This event is fired before the NavContainer shows this child control for the first time.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @param {object} oEvent.data the data object which has been passed with the "to" navigation, or an empty object
 * @param {object} oEvent.backData the data object which has been passed with the back navigation, or an empty object
 * @public
 */
sap.m.NavContainerChild.BeforeFirstShow = function() { return null; };

/**
 * 
 * This event is fired every time before the NavContainer hides this child control. In case of animated transitions this 
 * event is fired before the transition starts.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @public
 */
sap.m.NavContainerChild.BeforeHide = function() { return null; };

/**
 * 
 * This event is fired every time before the NavContainer shows this child control. In case of animated transitions this 
 * event is fired before the transition starts.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @param {object} oEvent.data the data object which has been passed with the "to" navigation, or an empty object
 * @param {object} oEvent.backData the data object which has been passed with the back navigation, or an empty object
 * @public
 */
sap.m.NavContainerChild.BeforeShow = function() { return null; };


// ---- sap.m.ObjectAttribute --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ObjectAttribute.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getActive active} : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.ObjectAttribute#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ObjectAttribute displays a text field that can be normal or active. Object attribute fires a press event when the user selects active text.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.12
 * 
 */
sap.m.ObjectAttribute = function(sId,mSettings) {};
/**
 * 
 * Event is fired when the user clicks active text 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.domRef Dom reference of the object attributes' text to be used for positioning.
 * @public
 */
sap.m.ObjectAttribute.prototype.press = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.ObjectAttribute</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ObjectAttribute</code>.<br/> itself. 
 * </p><p>
 * Event is fired when the user clicks active text 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectAttribute</code>.<br/> itself.
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.ObjectAttribute(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.ObjectAttribute</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.ObjectAttribute(); };

/**
 * 
 * Creates a new subclass of class sap.m.ObjectAttribute with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ObjectAttribute.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event press to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>string</code> Dom reference of the object attributes' text to be used for positioning.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ObjectAttribute.prototype.firePress = function(mArguments) { return new sap.m.ObjectAttribute(); };

/**
 * 
 * Getter for property <code>active</code>.
 * Indicates if the object attribute text is selectable by the user
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {boolean} the value of property <code>active</code>
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.getActive = function() { return false; };

/**
 * 
 * Getter for property <code>text</code>.
 * The object attribute text
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.getText = function() { return ""; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Indicates if the object attribute is visible. Invisible object attribute is not rendered.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>active</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {boolean} bActive  new value for property <code>active</code>
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.setActive = function(bActive) { return new sap.m.ObjectAttribute(); };

/**
 * 
 * Setter for property <code>text</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.setText = function(sText) { return new sap.m.ObjectAttribute(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.setVisible = function(bVisible) { return new sap.m.ObjectAttribute(); };


// ---- sap.m.ObjectHeader --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ObjectHeader.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getNumber number} : string</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getIntro intro} : string</li>
 * <li>{@link #getIntroActive introActive} : boolean</li>
 * <li>{@link #getTitleActive titleActive} : boolean</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconActive iconActive} : boolean</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getMarkFavorite markFavorite} : boolean (default: false)</li>
 * <li>{@link #getMarkFlagged markFlagged} : boolean (default: false)</li>
 * <li>{@link #getShowMarkers showMarkers} : boolean (default: false)</li>
 * <li>{@link #getShowTitleSelector showTitleSelector} : boolean (default: false)</li>
 * <li>{@link #getNumberState numberState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getCondensed condensed} : boolean (default: false)</li>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.BackgroundDesign (default: sap.m.BackgroundDesign.Transparent)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAttributes attributes} <strong>(default aggregation)</strong> : sap.m.ObjectAttribute[]</li>
 * <li>{@link #getFirstStatus firstStatus} : sap.m.ObjectStatus</li>
 * <li>{@link #getSecondStatus secondStatus} : sap.m.ObjectStatus</li>
 * <li>{@link #getStatuses statuses} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.ObjectHeader#event:titlePress titlePress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ObjectHeader#event:introPress introPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ObjectHeader#event:iconPress iconPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ObjectHeader#event:titleSelectorPress titleSelectorPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ObjectHeader is a display control that enables the user to easily identify a specific object. The object header title is the key identifier of the object and additional text and icons can be used to further distinguish it from other objects.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.12
 * 
 */
sap.m.ObjectHeader = function(sId,mSettings) {};
/**
 * 
 * Event is fired when the title icon is active and the user tap/click on it 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.domRef Dom reference of the object header' icon to be used for positioning.
 * @public
 */
sap.m.ObjectHeader.prototype.iconPress = function(oControlEvent) { return null; };

/**
 * 
 * Event is fired when the title is active and the user tap/click on it 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.domRef Dom reference of the object header' intro to be used for positioning.
 * @public
 */
sap.m.ObjectHeader.prototype.introPress = function(oControlEvent) { return null; };

/**
 * 
 * Event is fired when the title is active and the user tap/click on it 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.domRef Dom reference of the object header' title to be used for positioning.
 * @public
 */
sap.m.ObjectHeader.prototype.titlePress = function(oControlEvent) { return null; };

/**
 * 
 * Event is fired when the object header title selector (down-arrow) is pressed 
 * @event
 * @since 1.16.0
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.domRef Dom reference of the object header' titleArrow to be used for positioning.
 * @public
 */
sap.m.ObjectHeader.prototype.titleSelectorPress = function(oControlEvent) { return null; };

/**
 * 
 * Adds some attribute <code>oAttribute</code> 
 * to the aggregation named <code>attributes</code>.
 * @param {sap.m.ObjectAttribute}
 *            oAttribute the attribute to add; if empty, nothing is inserted
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.addAttribute = function(oAttribute) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Adds some status <code>oStatus</code> 
 * to the aggregation named <code>statuses</code>.
 * @param {sap.ui.core.Control}
 *            oStatus the status to add; if empty, nothing is inserted
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.addStatus = function(oStatus) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'iconPress' event of this <code>sap.m.ObjectHeader</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ObjectHeader</code>.<br/> itself. 
 * </p><p>
 * Event is fired when the title icon is active and the user tap/click on it 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code>.<br/> itself.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.attachIconPress = function(oData,fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'introPress' event of this <code>sap.m.ObjectHeader</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ObjectHeader</code>.<br/> itself. 
 * </p><p>
 * Event is fired when the title is active and the user tap/click on it 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code>.<br/> itself.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.attachIntroPress = function(oData,fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'titlePress' event of this <code>sap.m.ObjectHeader</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ObjectHeader</code>.<br/> itself. 
 * </p><p>
 * Event is fired when the title is active and the user tap/click on it 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code>.<br/> itself.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.attachTitlePress = function(oData,fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'titleSelectorPress' event of this <code>sap.m.ObjectHeader</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ObjectHeader</code>.<br/> itself. 
 * </p><p>
 * Event is fired when the object header title selector (down-arrow) is pressed 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code>.<br/> itself.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.attachTitleSelectorPress = function(oData,fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Destroys all the attributes in the aggregation 
 * named <code>attributes</code>.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.destroyAttributes = function() { return new sap.m.ObjectHeader(); };

/**
 * 
 * Destroys the firstStatus in the aggregation 
 * named <code>firstStatus</code>.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.16.0. 
 * Use the statuses aggregation instead.
 * 
 */
sap.m.ObjectHeader.prototype.destroyFirstStatus = function() { return new sap.m.ObjectHeader(); };

/**
 * 
 * Destroys the secondStatus in the aggregation 
 * named <code>secondStatus</code>.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.16.0. 
 * Use the statuses aggregation instead.
 * 
 */
sap.m.ObjectHeader.prototype.destroySecondStatus = function() { return new sap.m.ObjectHeader(); };

/**
 * 
 * Destroys all the statuses in the aggregation 
 * named <code>statuses</code>.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.destroyStatuses = function() { return new sap.m.ObjectHeader(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'iconPress' event of this <code>sap.m.ObjectHeader</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.detachIconPress = function(fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'introPress' event of this <code>sap.m.ObjectHeader</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.detachIntroPress = function(fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'titlePress' event of this <code>sap.m.ObjectHeader</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.detachTitlePress = function(fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'titleSelectorPress' event of this <code>sap.m.ObjectHeader</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.detachTitleSelectorPress = function(fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Creates a new subclass of class sap.m.ObjectHeader with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ObjectHeader.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event iconPress to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>object</code> Dom reference of the object header' icon to be used for positioning.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ObjectHeader.prototype.fireIconPress = function(mArguments) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Fire event introPress to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>object</code> Dom reference of the object header' intro to be used for positioning.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ObjectHeader.prototype.fireIntroPress = function(mArguments) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Fire event titlePress to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>object</code> Dom reference of the object header' title to be used for positioning.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ObjectHeader.prototype.fireTitlePress = function(mArguments) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Fire event titleSelectorPress to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>object</code> Dom reference of the object header' titleArrow to be used for positioning.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.fireTitleSelectorPress = function(mArguments) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Getter for aggregation <code>attributes</code>.<br/>
 * The list of Object Attributes
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for ObjectHeader.
 * @return {sap.m.ObjectAttribute[]}
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getAttributes = function() { return new Array(); };

/**
 * 
 * Getter for property <code>backgroundDesign</code>.
 * Note: only applied when "condensed" is true.
 * This property is used to set the background color of the ObjectHeader in condensed mode. Depending on the theme you can change the state of the background from "Solid" to "Transparent".
 * </p><p>
 * Default value is <code>Transparent</code>
 * @return {sap.m.BackgroundDesign} the value of property <code>backgroundDesign</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getBackgroundDesign = function() { return new sap.m.BackgroundDesign(); };

/**
 * 
 * Getter for property <code>condensed</code>.
 * Displays the condensed object header with title, one attribute, number and number unit.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>condensed</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getCondensed = function() { return false; };

/**
 * 
 * Getter for aggregation <code>firstStatus</code>.<br/>
 * First status shown on the right side of the attributes above the second status.
 * If it is not set the first attibute will expand to take the entire row.
 * @return {sap.m.ObjectStatus}
 * @public
 * @deprecated Since version 1.16.0. 
 * Use the statuses aggregation instead.
 * 
 */
sap.m.ObjectHeader.prototype.getFirstStatus = function() { return new sap.m.ObjectStatus(); };

/**
 * 
 * Getter for property <code>icon</code>.
 * Object header icon
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>iconActive</code>.
 * Indicates that the object header icon is clickable
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {boolean} the value of property <code>iconActive</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getIconActive = function() { return false; };

/**
 * 
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * </p><p>
 * If bandwidth is the key for the application, set this value to false.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getIconDensityAware = function() { return false; };

/**
 * 
 * Getter for property <code>intro</code>.
 * Introductory text for the object header.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>intro</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getIntro = function() { return ""; };

/**
 * 
 * Getter for property <code>introActive</code>.
 * Indicates that the intro is clickable
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {boolean} the value of property <code>introActive</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getIntroActive = function() { return false; };

/**
 * 
 * Getter for property <code>markFavorite</code>.
 * Set the favorite state to true or false. The showMarkers property must be true for this property to take effect.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>markFavorite</code>
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.getMarkFavorite = function() { return false; };

/**
 * 
 * Getter for property <code>markFlagged</code>.
 * Set the flagged state to true or false. The showMarkers property must be true for this property to take effect.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>markFlagged</code>
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.getMarkFlagged = function() { return false; };

/**
 * 
 * Getter for property <code>number</code>.
 * Object header number field
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>number</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getNumber = function() { return ""; };

/**
 * 
 * Getter for property <code>numberState</code>.
 * Object header number and numberUnit value state.
 * </p><p>
 * Default value is <code>None</code>
 * @return {sap.ui.core.ValueState} the value of property <code>numberState</code>
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.getNumberState = function() { return new sap.ui.core.ValueState(); };

/**
 * 
 * Getter for property <code>numberUnit</code>.
 * Object header number units qualifier.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>numberUnit</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getNumberUnit = function() { return ""; };

/**
 * 
 * Getter for aggregation <code>secondStatus</code>.<br/>
 * Second status shown on the right side of the attributes below the first status.
 * If it is not set the second attibute will expand to take the entire row.
 * @return {sap.m.ObjectStatus}
 * @public
 * @deprecated Since version 1.16.0. 
 * Use the statuses aggregation instead.
 * 
 */
sap.m.ObjectHeader.prototype.getSecondStatus = function() { return new sap.m.ObjectStatus(); };

/**
 * 
 * Getter for property <code>showMarkers</code>.
 * Indicates if object header supports showing markers such as flagged and favorite.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showMarkers</code>
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.getShowMarkers = function() { return false; };

/**
 * 
 * Getter for property <code>showTitleSelector</code>.
 * When it is true, the selector arrow icon/image is shown and can be pressed.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showTitleSelector</code>
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.getShowTitleSelector = function() { return false; };

/**
 * 
 * Getter for aggregation <code>statuses</code>.<br/>
 * The list of Object sap.ui.core.Control. It will only allow sap.m.ObjectStatus and sap.m.ProgressIndicator controls.
 * @return {sap.ui.core.Control[]}
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.getStatuses = function() { return new Array(); };

/**
 * 
 * Getter for property <code>title</code>.
 * Object header title
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getTitle = function() { return ""; };

/**
 * 
 * Getter for property <code>titleActive</code>.
 * Indicates that the title is clickable
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {boolean} the value of property <code>titleActive</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getTitleActive = function() { return false; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Indicateds if object header is visible. Invisible object headers are not rendered.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getVisible = function() { return false; };

/**
 * 
 * Checks for the provided <code>sap.m.ObjectAttribute</code> in the aggregation named <code>attributes</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ObjectAttribute}
 *            oAttribute the attribute whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.indexOfAttribute = function(oAttribute) { return 0; };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>statuses</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *            oStatus the status whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.indexOfStatus = function(oStatus) { return 0; };

/**
 * 
 * Inserts a attribute into the aggregation named <code>attributes</code>.
 * @param {sap.m.ObjectAttribute}
 *          oAttribute the attribute to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the attribute should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the attribute is inserted at 
 *             the last position        
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.insertAttribute = function(oAttribute,iIndex) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Inserts a status into the aggregation named <code>statuses</code>.
 * @param {sap.ui.core.Control}
 *          oStatus the status to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the status should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the status is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the status is inserted at 
 *             the last position        
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.insertStatus = function(oStatus,iIndex) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>attributes</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ObjectAttribute[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.removeAllAttributes = function() { return new Array(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>statuses</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.removeAllStatuses = function() { return new Array(); };

/**
 * 
 * Removes an attribute from the aggregation named <code>attributes</code>.
 * @param {int | string | sap.m.ObjectAttribute} vAttribute the attribute to remove or its index or id
 * @return {sap.m.ObjectAttribute} the removed attribute or null
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.removeAttribute = function(vAttribute) { return new sap.m.ObjectAttribute(); };

/**
 * 
 * Removes an status from the aggregation named <code>statuses</code>.
 * @param {int | string | sap.ui.core.Control} vStatus the status to remove or its index or id
 * @return {sap.ui.core.Control} the removed status or null
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.removeStatus = function(vStatus) { return new sap.ui.core.Control(); };

/**
 * 
 * Setter for property <code>backgroundDesign</code>.
 * </p><p>
 * Default value is <code>Transparent</code> 
 * @param {sap.m.BackgroundDesign} oBackgroundDesign  new value for property <code>backgroundDesign</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setBackgroundDesign = function(oBackgroundDesign) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Setter for property <code>condensed</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bCondensed  new value for property <code>condensed</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setCondensed = function(bCondensed) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Setter for the aggregated <code>firstStatus</code>.
 * @param {sap.m.ObjectStatus} oFirstStatus
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.16.0. 
 * Use the statuses aggregation instead.
 * 
 */
sap.m.ObjectHeader.prototype.setFirstStatus = function(oFirstStatus) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Setter for property <code>icon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setIcon = function(sIcon) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Setter for property <code>iconActive</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {boolean} bIconActive  new value for property <code>iconActive</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setIconActive = function(bIconActive) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Setter for property <code>iconDensityAware</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Setter for property <code>intro</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sIntro  new value for property <code>intro</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setIntro = function(sIntro) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Setter for property <code>introActive</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {boolean} bIntroActive  new value for property <code>introActive</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setIntroActive = function(bIntroActive) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Setter for property <code>markFavorite</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bMarkFavorite  new value for property <code>markFavorite</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.setMarkFavorite = function(bMarkFavorite) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Setter for property <code>markFlagged</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bMarkFlagged  new value for property <code>markFlagged</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.setMarkFlagged = function(bMarkFlagged) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Setter for property <code>number</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sNumber  new value for property <code>number</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setNumber = function(sNumber) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Setter for property <code>numberState</code>.
 * </p><p>
 * Default value is <code>None</code> 
 * @param {sap.ui.core.ValueState} oNumberState  new value for property <code>numberState</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.setNumberState = function(oNumberState) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Setter for property <code>numberUnit</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sNumberUnit  new value for property <code>numberUnit</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setNumberUnit = function(sNumberUnit) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Setter for the aggregated <code>secondStatus</code>.
 * @param {sap.m.ObjectStatus} oSecondStatus
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.16.0. 
 * Use the statuses aggregation instead.
 * 
 */
sap.m.ObjectHeader.prototype.setSecondStatus = function(oSecondStatus) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Setter for property <code>showMarkers</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bShowMarkers  new value for property <code>showMarkers</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.setShowMarkers = function(bShowMarkers) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Setter for property <code>showTitleSelector</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bShowTitleSelector  new value for property <code>showTitleSelector</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.setShowTitleSelector = function(bShowTitleSelector) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Setter for property <code>title</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setTitle = function(sTitle) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Setter for property <code>titleActive</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {boolean} bTitleActive  new value for property <code>titleActive</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setTitleActive = function(bTitleActive) { return new sap.m.ObjectHeader(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setVisible = function(bVisible) { return new sap.m.ObjectHeader(); };


// ---- sap.m.ObjectIdentifier --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ObjectIdentifier.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getBadgeNotes badgeNotes} : boolean</li>
 * <li>{@link #getBadgePeople badgePeople} : boolean</li>
 * <li>{@link #getBadgeAttachments badgeAttachments} : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ObjectIdentifier is a display control that enables the user to easily identify a specific object. The object identifier title is the key identifier of the object and additional text and icons can be used to further distinguish it from other objects.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.12
 * 
 */
sap.m.ObjectIdentifier = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.m.ObjectIdentifier with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ObjectIdentifier.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>badgeAttachments</code>.
 * Indicates whether or not the attachments icon is displayed.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {boolean} the value of property <code>badgeAttachments</code>
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.getBadgeAttachments = function() { return false; };

/**
 * 
 * Getter for property <code>badgeNotes</code>.
 * Indicates whether or not the notes icon is displayed.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {boolean} the value of property <code>badgeNotes</code>
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.getBadgeNotes = function() { return false; };

/**
 * 
 * Getter for property <code>badgePeople</code>.
 * Indicates whether or not the address book icon is displayed.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {boolean} the value of property <code>badgePeople</code>
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.getBadgePeople = function() { return false; };

/**
 * 
 * Getter for property <code>text</code>.
 * The object text.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.getText = function() { return ""; };

/**
 * 
 * Getter for property <code>title</code>.
 * The object title.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.getTitle = function() { return ""; };

/**
 * 
 * Setter for property <code>badgeAttachments</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {boolean} bBadgeAttachments  new value for property <code>badgeAttachments</code>
 * @return {sap.m.ObjectIdentifier} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.setBadgeAttachments = function(bBadgeAttachments) { return new sap.m.ObjectIdentifier(); };

/**
 * 
 * Setter for property <code>badgeNotes</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {boolean} bBadgeNotes  new value for property <code>badgeNotes</code>
 * @return {sap.m.ObjectIdentifier} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.setBadgeNotes = function(bBadgeNotes) { return new sap.m.ObjectIdentifier(); };

/**
 * 
 * Setter for property <code>badgePeople</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {boolean} bBadgePeople  new value for property <code>badgePeople</code>
 * @return {sap.m.ObjectIdentifier} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.setBadgePeople = function(bBadgePeople) { return new sap.m.ObjectIdentifier(); };

/**
 * 
 * Setter for property <code>text</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.ObjectIdentifier} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.setText = function(sText) { return new sap.m.ObjectIdentifier(); };

/**
 * 
 * Setter for property <code>title</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.ObjectIdentifier} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.setTitle = function(sTitle) { return new sap.m.ObjectIdentifier(); };


// ---- sap.m.ObjectListItem --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ObjectListItem.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getNumber number} : string</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getIntro intro} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getMarkFavorite markFavorite} : boolean</li>
 * <li>{@link #getMarkFlagged markFlagged} : boolean</li>
 * <li>{@link #getShowMarkers showMarkers} : boolean</li>
 * <li>{@link #getNumberState numberState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAttributes attributes} <strong>(default aggregation)</strong> : sap.m.ObjectAttribute[]</li>
 * <li>{@link #getFirstStatus firstStatus} : sap.m.ObjectStatus</li>
 * <li>{@link #getSecondStatus secondStatus} : sap.m.ObjectStatus</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ObjectListItem is a display control that provides summary information about an object as an item in a list. The object list item title is the key identifier of the object. Additional text and icons can be used to further distinguish it from other objects. Attributes and statuses can be used to provide additional meaning about the object to the user.
 * @extends sap.m.ListItemBase
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.12
 * 
 */
sap.m.ObjectListItem = function(sId,mSettings) {};
/**
 * 
 * Adds some attribute <code>oAttribute</code> 
 * to the aggregation named <code>attributes</code>.
 * @param {sap.m.ObjectAttribute}
 *            oAttribute the attribute to add; if empty, nothing is inserted
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.addAttribute = function(oAttribute) { return new sap.m.ObjectListItem(); };

/**
 * 
 * Destroys all the attributes in the aggregation 
 * named <code>attributes</code>.
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.destroyAttributes = function() { return new sap.m.ObjectListItem(); };

/**
 * 
 * Destroys the firstStatus in the aggregation 
 * named <code>firstStatus</code>.
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.destroyFirstStatus = function() { return new sap.m.ObjectListItem(); };

/**
 * 
 * Destroys the secondStatus in the aggregation 
 * named <code>secondStatus</code>.
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.destroySecondStatus = function() { return new sap.m.ObjectListItem(); };

/**
 * 
 * Creates a new subclass of class sap.m.ObjectListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ObjectListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>activeIcon</code>.
 * Icon displayed when the object list item is active.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>activeIcon</code>
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getActiveIcon = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for aggregation <code>attributes</code>.<br/>
 * List of attributes displayed below the title to the left of the status fields.
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for ObjectListItem.
 * @return {sap.m.ObjectAttribute[]}
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getAttributes = function() { return new Array(); };

/**
 * 
 * Getter for aggregation <code>firstStatus</code>.<br/>
 * First status text field shown on the right side of the attributes.
 * @return {sap.m.ObjectStatus}
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getFirstStatus = function() { return new sap.m.ObjectStatus(); };

/**
 * 
 * Getter for property <code>icon</code>.
 * Object list item icon displayed to the left of the title.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * </p><p>
 * If bandwidth is the key for the application, set this value to false.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getIconDensityAware = function() { return false; };

/**
 * 
 * Getter for property <code>intro</code>.
 * Introductory text for the object list item.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>intro</code>
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getIntro = function() { return ""; };

/**
 * 
 * Getter for property <code>markFavorite</code>.
 * Set the favorite state for the object list item
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {boolean} the value of property <code>markFavorite</code>
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectListItem.prototype.getMarkFavorite = function() { return false; };

/**
 * 
 * Getter for property <code>markFlagged</code>.
 * Set the flagged state for the object list item
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {boolean} the value of property <code>markFlagged</code>
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectListItem.prototype.getMarkFlagged = function() { return false; };

/**
 * 
 * Getter for property <code>number</code>.
 * Object list item number
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>number</code>
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getNumber = function() { return ""; };

/**
 * 
 * Getter for property <code>numberState</code>.
 * Object list item number and numberUnit value state.
 * </p><p>
 * Default value is <code>None</code>
 * @return {sap.ui.core.ValueState} the value of property <code>numberState</code>
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectListItem.prototype.getNumberState = function() { return new sap.ui.core.ValueState(); };

/**
 * 
 * Getter for property <code>numberUnit</code>.
 * The number units qualifier of the object list item
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>numberUnit</code>
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getNumberUnit = function() { return ""; };

/**
 * 
 * Getter for aggregation <code>secondStatus</code>.<br/>
 * Second status text field shown on the right side of the attributes.
 * @return {sap.m.ObjectStatus}
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getSecondStatus = function() { return new sap.m.ObjectStatus(); };

/**
 * 
 * Getter for property <code>showMarkers</code>.
 * Set to true if the object list item can be marked with icons such as favorite and flag.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {boolean} the value of property <code>showMarkers</code>
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectListItem.prototype.getShowMarkers = function() { return false; };

/**
 * 
 * Getter for property <code>title</code>.
 * Object list item title
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getTitle = function() { return ""; };

/**
 * 
 * Checks for the provided <code>sap.m.ObjectAttribute</code> in the aggregation named <code>attributes</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ObjectAttribute}
 *            oAttribute the attribute whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.indexOfAttribute = function(oAttribute) { return 0; };

/**
 * 
 * Inserts a attribute into the aggregation named <code>attributes</code>.
 * @param {sap.m.ObjectAttribute}
 *          oAttribute the attribute to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the attribute should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the attribute is inserted at 
 *             the last position        
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.insertAttribute = function(oAttribute,iIndex) { return new sap.m.ObjectListItem(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>attributes</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ObjectAttribute[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.removeAllAttributes = function() { return new Array(); };

/**
 * 
 * Removes an attribute from the aggregation named <code>attributes</code>.
 * @param {int | string | sap.m.ObjectAttribute} vAttribute the attribute to remove or its index or id
 * @return {sap.m.ObjectAttribute} the removed attribute or null
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.removeAttribute = function(vAttribute) { return new sap.m.ObjectAttribute(); };

/**
 * 
 * Setter for property <code>activeIcon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sActiveIcon  new value for property <code>activeIcon</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setActiveIcon = function(sActiveIcon) { return new sap.m.ObjectListItem(); };

/**
 * 
 * Setter for the aggregated <code>firstStatus</code>.
 * @param {sap.m.ObjectStatus} oFirstStatus
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setFirstStatus = function(oFirstStatus) { return new sap.m.ObjectListItem(); };

/**
 * 
 * Setter for property <code>icon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setIcon = function(sIcon) { return new sap.m.ObjectListItem(); };

/**
 * 
 * Setter for property <code>iconDensityAware</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.ObjectListItem(); };

/**
 * 
 * Setter for property <code>intro</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sIntro  new value for property <code>intro</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setIntro = function(sIntro) { return new sap.m.ObjectListItem(); };

/**
 * 
 * Setter for property <code>markFavorite</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {boolean} bMarkFavorite  new value for property <code>markFavorite</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectListItem.prototype.setMarkFavorite = function(bMarkFavorite) { return new sap.m.ObjectListItem(); };

/**
 * 
 * Setter for property <code>markFlagged</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {boolean} bMarkFlagged  new value for property <code>markFlagged</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectListItem.prototype.setMarkFlagged = function(bMarkFlagged) { return new sap.m.ObjectListItem(); };

/**
 * 
 * Setter for property <code>number</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sNumber  new value for property <code>number</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setNumber = function(sNumber) { return new sap.m.ObjectListItem(); };

/**
 * 
 * Setter for property <code>numberState</code>.
 * </p><p>
 * Default value is <code>None</code> 
 * @param {sap.ui.core.ValueState} oNumberState  new value for property <code>numberState</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectListItem.prototype.setNumberState = function(oNumberState) { return new sap.m.ObjectListItem(); };

/**
 * 
 * Setter for property <code>numberUnit</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sNumberUnit  new value for property <code>numberUnit</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setNumberUnit = function(sNumberUnit) { return new sap.m.ObjectListItem(); };

/**
 * 
 * Setter for the aggregated <code>secondStatus</code>.
 * @param {sap.m.ObjectStatus} oSecondStatus
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setSecondStatus = function(oSecondStatus) { return new sap.m.ObjectListItem(); };

/**
 * 
 * Setter for property <code>showMarkers</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {boolean} bShowMarkers  new value for property <code>showMarkers</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectListItem.prototype.setShowMarkers = function(bShowMarkers) { return new sap.m.ObjectListItem(); };

/**
 * 
 * Setter for property <code>title</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setTitle = function(sTitle) { return new sap.m.ObjectListItem(); };


// ---- sap.m.ObjectNumber --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ObjectNumber.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getNumber number} : string</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEmphasized emphasized} : boolean (default: true)</li>
 * <li>{@link #getState state} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getUnit unit} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ObjectNumber displays number and number unit properties for an object. The number can be displayed using semantic colors to provide addition meaning about the object to the user.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.12
 * 
 */
sap.m.ObjectNumber = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.m.ObjectNumber with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ObjectNumber.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>emphasized</code>.
 * Indicates if the object number should appear emphasized
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>emphasized</code>
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.getEmphasized = function() { return false; };

/**
 * 
 * Getter for property <code>number</code>.
 * Number field of the object number
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>number</code>
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.getNumber = function() { return ""; };

/**
 * 
 * Getter for property <code>numberUnit</code>.
 * Number units qualifier
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>numberUnit</code>
 * @public
 * @deprecated Since version 1.16.1. 
 * </p><p>
 * Replaced by unit property due to the number before unit is redundant.
 * 
 */
sap.m.ObjectNumber.prototype.getNumberUnit = function() { return ""; };

/**
 * 
 * Getter for property <code>state</code>.
 * The object number's value state. Setting this state will cause the number to be rendered in state-specific colors (only blue-crystal theme).
 * </p><p>
 * Default value is <code>sap.ui.core.ValueState.None</code>
 * @return {sap.ui.core.ValueState} the value of property <code>state</code>
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.getState = function() { return new sap.ui.core.ValueState(); };

/**
 * 
 * Getter for property <code>unit</code>.
 * Number units qualifier. If numberUnit and unit are both set, the unit value is used.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>unit</code>
 * @public
 * @since 1.16.1
 * 
 */
sap.m.ObjectNumber.prototype.getUnit = function() { return ""; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Indicates if object number is visible. Invisible object number is not rendered.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>emphasized</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEmphasized  new value for property <code>emphasized</code>
 * @return {sap.m.ObjectNumber} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.setEmphasized = function(bEmphasized) { return new sap.m.ObjectNumber(); };

/**
 * 
 * Setter for property <code>number</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sNumber  new value for property <code>number</code>
 * @return {sap.m.ObjectNumber} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.setNumber = function(sNumber) { return new sap.m.ObjectNumber(); };

/**
 * 
 * Setter for property <code>numberUnit</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sNumberUnit  new value for property <code>numberUnit</code>
 * @return {sap.m.ObjectNumber} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.16.1. 
 * </p><p>
 * Replaced by unit property due to the number before unit is redundant.
 * 
 */
sap.m.ObjectNumber.prototype.setNumberUnit = function(sNumberUnit) { return new sap.m.ObjectNumber(); };

/**
 * 
 * API method to set the object number's value state
 * @param sState the Object Number's value state
 * @public
 */
sap.m.ObjectNumber.prototype.setState = function(sState) { return null; };

/**
 * 
 * Setter for property <code>unit</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sUnit  new value for property <code>unit</code>
 * @return {sap.m.ObjectNumber} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.1
 * 
 */
sap.m.ObjectNumber.prototype.setUnit = function(sUnit) { return new sap.m.ObjectNumber(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.ObjectNumber} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.setVisible = function(bVisible) { return new sap.m.ObjectNumber(); };


// ---- sap.m.ObjectStatus --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ObjectStatus.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getState state} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Status information that may be either text with a value state, or an icon.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.ObjectStatus = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.m.ObjectStatus with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ObjectStatus.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>icon</code>.
 * Icon URI. This may be either an icon font or image path.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * </p><p>
 * If bandwidth is the key for the application, set this value to false.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.getIconDensityAware = function() { return false; };

/**
 * 
 * Getter for property <code>state</code>.
 * Text value state.
 * </p><p>
 * Default value is <code>None</code>
 * @return {sap.ui.core.ValueState} the value of property <code>state</code>
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.getState = function() { return new sap.ui.core.ValueState(); };

/**
 * 
 * Getter for property <code>text</code>.
 * Text value.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.getText = function() { return ""; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Shows or hides the ObjectStatus instance
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>icon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.ObjectStatus} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.setIcon = function(sIcon) { return new sap.m.ObjectStatus(); };

/**
 * 
 * Setter for property <code>iconDensityAware</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.m.ObjectStatus} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.ObjectStatus(); };

/**
 * 
 * Setter for property <code>state</code>.
 * </p><p>
 * Default value is <code>None</code> 
 * @param {sap.ui.core.ValueState} oState  new value for property <code>state</code>
 * @return {sap.m.ObjectStatus} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.setState = function(oState) { return new sap.m.ObjectStatus(); };

/**
 * 
 * Setter for property <code>text</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.ObjectStatus} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.setText = function(sText) { return new sap.m.ObjectStatus(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.ObjectStatus} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.setVisible = function(bVisible) { return new sap.m.ObjectStatus(); };


// ---- sap.m.Page --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new Page.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getShowNavButton showNavButton} : boolean (default: false)</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getNavButtonText navButtonText} : string</li>
 * <li>{@link #getEnableScrolling enableScrolling} : boolean (default: true)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.PageBackgroundDesign (default: sap.m.PageBackgroundDesign.Standard)</li>
 * <li>{@link #getNavButtonType navButtonType} : sap.m.ButtonType (default: sap.m.ButtonType.Back)</li>
 * <li>{@link #getShowFooter showFooter} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li>
 * <li>{@link #getCustomHeader customHeader} : sap.m.Bar</li>
 * <li>{@link #getFooter footer} : sap.m.Bar</li>
 * <li>{@link #getSubHeader subHeader} : sap.m.Bar</li>
 * <li>{@link #getHeaderContent headerContent} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Page#event:navButtonTap navButtonTap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Page#event:navButtonPress navButtonPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A page is a basic container for a mobile application screen. Usually one page is displayed at a time (in landscape mode or on tablets depending on the layout two pages might be displayed side-by-side).
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.Page = function(sId,mSettings) {};
/**
 * 
 * this event is fired when Nav Button is pressed 
 * @event
 * @since 1.12.2
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.Page.prototype.navButtonPress = function(oControlEvent) { return null; };

/**
 * 
 * this event is fired when Nav Button is tapped 
 * @event
 * @deprecated Since version 1.12.2. 
 * the navButtonPress event is replacing this event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.Page.prototype.navButtonTap = function(oControlEvent) { return null; };

/**
 * 
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.addContent = function(oContent) { return new sap.m.Page(); };

/**
 * 
 * Adds some headerContent <code>oHeaderContent</code> 
 * to the aggregation named <code>headerContent</code>.
 * @param {sap.ui.core.Control}
 *            oHeaderContent the headerContent to add; if empty, nothing is inserted
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.addHeaderContent = function(oHeaderContent) { return new sap.m.Page(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'navButtonPress' event of this <code>sap.m.Page</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Page</code>.<br/> itself. 
 * </p><p>
 * this event is fired when Nav Button is pressed 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Page</code>.<br/> itself.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @since 1.12.2
 * 
 */
sap.m.Page.prototype.attachNavButtonPress = function(oData,fnFunction,oListener) { return new sap.m.Page(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'navButtonTap' event of this <code>sap.m.Page</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Page</code>.<br/> itself. 
 * </p><p>
 * this event is fired when Nav Button is tapped 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Page</code>.<br/> itself.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12.2. 
 * the navButtonPress event is replacing this event
 * 
 */
sap.m.Page.prototype.attachNavButtonTap = function(oData,fnFunction,oListener) { return new sap.m.Page(); };

/**
 * 
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.destroyContent = function() { return new sap.m.Page(); };

/**
 * 
 * Destroys the customHeader in the aggregation 
 * named <code>customHeader</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.destroyCustomHeader = function() { return new sap.m.Page(); };

/**
 * 
 * Destroys the footer in the aggregation 
 * named <code>footer</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.destroyFooter = function() { return new sap.m.Page(); };

/**
 * 
 * Destroys all the headerContent in the aggregation 
 * named <code>headerContent</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.destroyHeaderContent = function() { return new sap.m.Page(); };

/**
 * 
 * Destroys the subHeader in the aggregation 
 * named <code>subHeader</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.destroySubHeader = function() { return new sap.m.Page(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'navButtonPress' event of this <code>sap.m.Page</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @since 1.12.2
 * 
 */
sap.m.Page.prototype.detachNavButtonPress = function(fnFunction,oListener) { return new sap.m.Page(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'navButtonTap' event of this <code>sap.m.Page</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12.2. 
 * the navButtonPress event is replacing this event
 * 
 */
sap.m.Page.prototype.detachNavButtonTap = function(fnFunction,oListener) { return new sap.m.Page(); };

/**
 * 
 * Creates a new subclass of class sap.m.Page with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Page.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event navButtonPress to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @protected
 * @since 1.12.2
 * 
 */
sap.m.Page.prototype.fireNavButtonPress = function(mArguments) { return new sap.m.Page(); };

/**
 * 
 * Fire event navButtonTap to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.12.2. 
 * the navButtonPress event is replacing this event
 * 
 */
sap.m.Page.prototype.fireNavButtonTap = function(mArguments) { return new sap.m.Page(); };

/**
 * 
 * Getter for property <code>backgroundDesign</code>.
 * This property is used to set the background color of a page. When a list is placed inside a page, the value "List" should be used to display a gray background. "Standard", with the value white, is used as default if not specified.
 * </p><p>
 * Default value is <code>Standard</code>
 * @return {sap.m.PageBackgroundDesign} the value of property <code>backgroundDesign</code>
 * @public
 * 
 */
sap.m.Page.prototype.getBackgroundDesign = function() { return new sap.m.PageBackgroundDesign(); };

/**
 * 
 * Getter for aggregation <code>content</code>.<br/>
 * The content of this page
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for Page.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.Page.prototype.getContent = function() { return new Array(); };

/**
 * 
 * Getter for aggregation <code>customHeader</code>.<br/>
 * The (optional) custom header of this page.
 * Use this aggregation only when a custom header is constructed where the default header consisting of title text + nav button is not sufficient.
 * If this aggregation is set, the simple properties "title", "showNavButton", "NavButtonText" and "icon" are not used.
 * @return {sap.m.Bar}
 * @public
 * 
 */
sap.m.Page.prototype.getCustomHeader = function() { return new sap.m.Bar(); };

/**
 * 
 * Getter for property <code>enableScrolling</code>.
 * Whether the Page takes special measures to make page content scrollable and keep headers fixed.
 * If set to false, there will be no scrolling at all; for performance reasons this is highly recommended when scrolling is not needed.
 * </p><p>
 * The Page only allows vertical scrolling because horizontal scrolling is discouraged in general for full-page content. If it still needs to be achieved, disable the Page scrolling and use a ScrollContainer as full-page content of the Page. This allows you to freely configure scrolling. It can also be used to create horizontally-scrolling sub-areas of (vertically-scrolling) Pages.
 * </p><p>
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enableScrolling</code>
 * @public
 * 
 */
sap.m.Page.prototype.getEnableScrolling = function() { return false; };

/**
 * 
 * Getter for aggregation <code>footer</code>.<br/>
 * The (optional) footer of this page. It is always located at the bottom of the page
 * @return {sap.m.Bar}
 * @public
 * 
 */
sap.m.Page.prototype.getFooter = function() { return new sap.m.Bar(); };

/**
 * 
 * Getter for aggregation <code>headerContent</code>.<br/>
 * Controls to be added to the right side of the page header. Usually an application would use Button controls and limit the number to one when the application needs to run on smartphones. There is no automatic overflow handling when the space is insufficient.
 * When a customHeader is used, this aggregation will be ignored.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.Page.prototype.getHeaderContent = function() { return new Array(); };

/**
 * 
 * Getter for property <code>icon</code>.
 * the icon that is rendered in the page header bar in non-iOS phone/tablet platforms. This property is theme-dependent and only has an effect in the MVI theme.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @deprecated Since version 1.20. 
 * Deprecated since the MVI theme is removed now. This property only affected the NavButton in that theme.
 * 
 */
sap.m.Page.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>navButtonText</code>.
 * The text of the nav button when running in iOS (if shown) in case it deviates from the default, which is "Back". This property is mvi-theme-dependent and will not have any effect in other themes.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>navButtonText</code>
 * @public
 * @deprecated Since version 1.20. 
 * Deprecated since the MVI theme is removed now. This property only affected the NavButton in that theme.
 * 
 */
sap.m.Page.prototype.getNavButtonText = function() { return ""; };

/**
 * 
 * Getter for property <code>navButtonType</code>.
 * This property is used to set the appearance of the NavButton. By default when showNavButton is set to true, a back button will be shown in iOS and an up button in other platforms. In case you want to show a normal button in the left header, you can set the value to "Default".
 * </p><p>
 * Default value is <code>Back</code>
 * @return {sap.m.ButtonType} the value of property <code>navButtonType</code>
 * @public
 * @since 1.12
 * @deprecated Since version 1.20. 
 * Deprecated since the MVI theme is removed now. This property is only useable with a Button text in that theme.
 * 
 */
sap.m.Page.prototype.getNavButtonType = function() { return new sap.m.ButtonType(); };

/**
 * 
 * Getter for property <code>showFooter</code>.
 * Whether this page shall have a footer
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showFooter</code>
 * @public
 * @since 1.13.1
 * 
 */
sap.m.Page.prototype.getShowFooter = function() { return false; };

/**
 * 
 * Getter for property <code>showHeader</code>.
 * Whether this page shall have a header.
 * If set to true, either the control under the "customHeader" aggregation is used, or if there is no such control, a Header control is constructed from the properties "title", "showNavButton", "navButtonText" and "icon" depending on the platform.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * 
 */
sap.m.Page.prototype.getShowHeader = function() { return false; };

/**
 * 
 * Getter for property <code>showNavButton</code>.
 * A nav button will be rendered on the left area of header bar if this property is set to true.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showNavButton</code>
 * @public
 * 
 */
sap.m.Page.prototype.getShowNavButton = function() { return false; };

/**
 * 
 * Getter for aggregation <code>subHeader</code>.<br/>
 * a subHeader will be rendered directly under the header
 * @return {sap.m.Bar}
 * @public
 * 
 */
sap.m.Page.prototype.getSubHeader = function() { return new sap.m.Bar(); };

/**
 * 
 * Getter for property <code>title</code>.
 * The title text appearing in the page header bar.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.Page.prototype.getTitle = function() { return ""; };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Page.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>headerContent</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *            oHeaderContent the headerContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Page.prototype.indexOfHeaderContent = function(oHeaderContent) { return 0; };

/**
 * 
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.insertContent = function(oContent,iIndex) { return new sap.m.Page(); };

/**
 * 
 * Inserts a headerContent into the aggregation named <code>headerContent</code>.
 * @param {sap.ui.core.Control}
 *          oHeaderContent the headerContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the headerContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the headerContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the headerContent is inserted at 
 *             the last position        
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.insertHeaderContent = function(oHeaderContent,iIndex) { return new sap.m.Page(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Page.prototype.removeAllContent = function() { return new Array(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>headerContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Page.prototype.removeAllHeaderContent = function() { return new Array(); };

/**
 * 
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * 
 */
sap.m.Page.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * 
 * Removes an headerContent from the aggregation named <code>headerContent</code>.
 * @param {int | string | sap.ui.core.Control} vHeaderContent the headerContent to remove or its index or id
 * @return {sap.ui.core.Control} the removed headerContent or null
 * @public
 * 
 */
sap.m.Page.prototype.removeHeaderContent = function(vHeaderContent) { return new sap.ui.core.Control(); };

/**
 * 
 * Scrolls to the given position. Only available if enableScrolling is set to "true".
 * @param {int} 
 *         iY
 *         The vertical pixel position to scroll to. Scrolling down happens with positive values.
 * @param {int} 
 *         iTime
 *         The duration of animated scrolling. To scroll immediately without animation, give 0 as value. 0 is also the default value, when this optional parameter is omitted.
 * @type sap.m.Page
 * @public
 */
sap.m.Page.prototype.scrollTo = function(iY,iTime) { return new sap.m.Page(); };

/**
 * 
 * Setter for property <code>backgroundDesign</code>.
 * </p><p>
 * Default value is <code>Standard</code> 
 * @param {sap.m.PageBackgroundDesign} oBackgroundDesign  new value for property <code>backgroundDesign</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.setBackgroundDesign = function(oBackgroundDesign) { return new sap.m.Page(); };

/**
 * 
 * Setter for the aggregated <code>customHeader</code>.
 * @param {sap.m.Bar} oCustomHeader
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.setCustomHeader = function(oCustomHeader) { return new sap.m.Page(); };

/**
 * 
 * Setter for property <code>enableScrolling</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnableScrolling  new value for property <code>enableScrolling</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.setEnableScrolling = function(bEnableScrolling) { return new sap.m.Page(); };

/**
 * 
 * Setter for the aggregated <code>footer</code>.
 * @param {sap.m.Bar} oFooter
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.setFooter = function(oFooter) { return new sap.m.Page(); };

/**
 * 
 * Setter for property <code>icon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20. 
 * Deprecated since the MVI theme is removed now. This property only affected the NavButton in that theme.
 * 
 */
sap.m.Page.prototype.setIcon = function(sIcon) { return new sap.m.Page(); };

/**
 * 
 * Setter for property <code>navButtonText</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sNavButtonText  new value for property <code>navButtonText</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20. 
 * Deprecated since the MVI theme is removed now. This property only affected the NavButton in that theme.
 * 
 */
sap.m.Page.prototype.setNavButtonText = function(sNavButtonText) { return new sap.m.Page(); };

/**
 * 
 * Setter for property <code>navButtonType</code>.
 * </p><p>
 * Default value is <code>Back</code> 
 * @param {sap.m.ButtonType} oNavButtonType  new value for property <code>navButtonType</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @since 1.12
 * @deprecated Since version 1.20. 
 * Deprecated since the MVI theme is removed now. This property is only useable with a Button text in that theme.
 * 
 */
sap.m.Page.prototype.setNavButtonType = function(oNavButtonType) { return new sap.m.Page(); };

/**
 * 
 * Setter for property <code>showFooter</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bShowFooter  new value for property <code>showFooter</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @since 1.13.1
 * 
 */
sap.m.Page.prototype.setShowFooter = function(bShowFooter) { return new sap.m.Page(); };

/**
 * 
 * Setter for property <code>showHeader</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.setShowHeader = function(bShowHeader) { return new sap.m.Page(); };

/**
 * 
 * Setter for property <code>showNavButton</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bShowNavButton  new value for property <code>showNavButton</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.setShowNavButton = function(bShowNavButton) { return new sap.m.Page(); };

/**
 * 
 * Setter for the aggregated <code>subHeader</code>.
 * @param {sap.m.Bar} oSubHeader
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.setSubHeader = function(oSubHeader) { return new sap.m.Page(); };

/**
 * 
 * Setter for property <code>title</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Page.prototype.setTitle = function(sTitle) { return new sap.m.Page(); };


// ---- sap.m.PageBackgroundDesign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.PageBackgroundDesign.toString = function() { return ""; };

// ---- sap.m.Panel --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new Panel.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getHeaderText headerText} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 'auto')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li>
 * <li>{@link #getHeaderToolbar headerToolbar} : sap.m.Toolbar</li>
 * <li>{@link #getInfoToolbar infoToolbar} : sap.m.Toolbar</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The Panel control is a container for controls with a solid background and a header text.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.16
 * 
 */
sap.m.Panel = function(sId,mSettings) {};
/**
 * 
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Panel.prototype.addContent = function(oContent) { return new sap.m.Panel(); };

/**
 * 
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Panel.prototype.destroyContent = function() { return new sap.m.Panel(); };

/**
 * 
 * Destroys the headerToolbar in the aggregation 
 * named <code>headerToolbar</code>.
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.Panel.prototype.destroyHeaderToolbar = function() { return new sap.m.Panel(); };

/**
 * 
 * Destroys the infoToolbar in the aggregation 
 * named <code>infoToolbar</code>.
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.Panel.prototype.destroyInfoToolbar = function() { return new sap.m.Panel(); };

/**
 * 
 * Creates a new subclass of class sap.m.Panel with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Panel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>content</code>.<br/>
 * Content for the Panel
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for Panel.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.Panel.prototype.getContent = function() { return new Array(); };

/**
 * 
 * Getter for property <code>headerText</code>.
 * Sets the header text
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>headerText</code>
 * @public
 * 
 */
sap.m.Panel.prototype.getHeaderText = function() { return ""; };

/**
 * 
 * Getter for aggregation <code>headerToolbar</code>.<br/>
 * Header can be used as a Toolbar to add extra controls for user interactions.
 * Note: This aggregation overwrites "headerText" property.
 * @return {sap.m.Toolbar}
 * @public
 * @since 1.16
 * 
 */
sap.m.Panel.prototype.getHeaderToolbar = function() { return new sap.m.Toolbar(); };

/**
 * 
 * Getter for property <code>height</code>.
 * The Panel height
 * </p><p>
 * Default value is <code>auto</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.m.Panel.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for aggregation <code>infoToolbar</code>.<br/>
 * InfoBar is placed below the header and can be used to show extra information to the user.
 * @return {sap.m.Toolbar}
 * @public
 * @since 1.16
 * 
 */
sap.m.Panel.prototype.getInfoToolbar = function() { return new sap.m.Toolbar(); };

/**
 * 
 * Getter for property <code>visible</code>.
 * Is the control visible
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.Panel.prototype.getVisible = function() { return false; };

/**
 * 
 * Getter for property <code>width</code>.
 * The Panel width
 * </p><p>
 * Default value is <code>100%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.Panel.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Panel.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * 
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Panel.prototype.insertContent = function(oContent,iIndex) { return new sap.m.Panel(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Panel.prototype.removeAllContent = function() { return new Array(); };

/**
 * 
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * 
 */
sap.m.Panel.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * 
 * Setter for property <code>headerText</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sHeaderText  new value for property <code>headerText</code>
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Panel.prototype.setHeaderText = function(sHeaderText) { return new sap.m.Panel(); };

/**
 * 
 * Setter for the aggregated <code>headerToolbar</code>.
 * @param {sap.m.Toolbar} oHeaderToolbar
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.Panel.prototype.setHeaderToolbar = function(oHeaderToolbar) { return new sap.m.Panel(); };

/**
 * 
 * Sets the height of the panel.
 * @param {string} sHeight the height of the panel as CSS size
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.m.Panel.prototype.setHeight = function(sHeight) { return new sap.m.Panel(); };

/**
 * 
 * Setter for the aggregated <code>infoToolbar</code>.
 * @param {sap.m.Toolbar} oInfoToolbar
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.Panel.prototype.setInfoToolbar = function(oInfoToolbar) { return new sap.m.Panel(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Panel.prototype.setVisible = function(bVisible) { return new sap.m.Panel(); };

/**
 * 
 * Sets the width of the panel.
 * @param {string} sWidth the width of the panel as CSS size
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.m.Panel.prototype.setWidth = function(sWidth) { return new sap.m.Panel(); };


// ---- sap.m.PlacementType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.PlacementType.toString = function() { return ""; };

// ---- sap.m.PopinDisplay --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.PopinDisplay.toString = function() { return ""; };

// ---- sap.m.Popover --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new Popover.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPlacement placement} : sap.m.PlacementType (default: sap.m.PlacementType.Right)</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getModal modal} : boolean (default: false)</li>
 * <li>{@link #getOffsetX offsetX} : int (default: 0)</li>
 * <li>{@link #getOffsetY offsetY} : int (default: 0)</li>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnableScrolling enableScrolling} : boolean (default: true)</li>
 * <li>{@link #getVerticalScrolling verticalScrolling} : boolean (default: true)</li>
 * <li>{@link #getHorizontalScrolling horizontalScrolling} : boolean (default: true)</li>
 * <li>{@link #getBounce bounce} : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li>
 * <li>{@link #getCustomHeader customHeader} : sap.ui.core.Control</li>
 * <li>{@link #getSubHeader subHeader} : sap.ui.core.Control</li>
 * <li>{@link #getFooter footer} : sap.ui.core.Control</li>
 * <li>{@link #getBeginButton beginButton} : sap.ui.core.Control</li>
 * <li>{@link #getEndButton endButton} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getLeftButton leftButton} : string | sap.m.Button</li>
 * <li>{@link #getRightButton rightButton} : string | sap.m.Button</li>
 * <li>{@link #getInitialFocus initialFocus} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Popover#event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Popover#event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Popover#event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Popover#event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Popover is to present information temporarily but in a way that does not take over the entire screen. The popover content is layered on top of your existing content and it remains visible until the user taps outside of the popover when modal is set to false or you explicitly dismiss it when modal is set to true. The switching between modal and non-modal can also be done when the popover is already opened.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.PopupInterface
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.Popover = function(sId,mSettings) {};
/**
 * 
 * This event will be fired after the popover is closed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 */
sap.m.Popover.prototype.afterClose = function(oControlEvent) { return null; };

/**
 * 
 * This event will be fired after the popover is opened. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 */
sap.m.Popover.prototype.afterOpen = function(oControlEvent) { return null; };

/**
 * 
 * This event will be fired before the popover is closed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 */
sap.m.Popover.prototype.beforeClose = function(oControlEvent) { return null; };

/**
 * 
 * This event will be fired before the popover is opened. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 */
sap.m.Popover.prototype.beforeOpen = function(oControlEvent) { return null; };

/**
 * 
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.addContent = function(oContent) { return new sap.m.Popover(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'afterClose' event of this <code>sap.m.Popover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Popover</code>.<br/> itself. 
 * </p><p>
 * This event will be fired after the popover is closed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.attachAfterClose = function(oData,fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'afterOpen' event of this <code>sap.m.Popover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Popover</code>.<br/> itself. 
 * </p><p>
 * This event will be fired after the popover is opened. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.attachAfterOpen = function(oData,fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'beforeClose' event of this <code>sap.m.Popover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Popover</code>.<br/> itself. 
 * </p><p>
 * This event will be fired before the popover is closed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.attachBeforeClose = function(oData,fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'beforeOpen' event of this <code>sap.m.Popover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Popover</code>.<br/> itself. 
 * </p><p>
 * This event will be fired before the popover is opened. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.attachBeforeOpen = function(oData,fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * 
 * Closes the popover when it's already opened.
 * @public
 */
sap.m.Popover.prototype.close = function() { return null; };

/**
 * 
 * Destroys the beginButton in the aggregation 
 * named <code>beginButton</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Popover.prototype.destroyBeginButton = function() { return new sap.m.Popover(); };

/**
 * 
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.destroyContent = function() { return new sap.m.Popover(); };

/**
 * 
 * Destroys the customHeader in the aggregation 
 * named <code>customHeader</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.destroyCustomHeader = function() { return new sap.m.Popover(); };

/**
 * 
 * Destroys the endButton in the aggregation 
 * named <code>endButton</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Popover.prototype.destroyEndButton = function() { return new sap.m.Popover(); };

/**
 * 
 * Destroys the footer in the aggregation 
 * named <code>footer</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.destroyFooter = function() { return new sap.m.Popover(); };

/**
 * 
 * Destroys the subHeader in the aggregation 
 * named <code>subHeader</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Popover.prototype.destroySubHeader = function() { return new sap.m.Popover(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'afterClose' event of this <code>sap.m.Popover</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.detachAfterClose = function(fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'afterOpen' event of this <code>sap.m.Popover</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.detachAfterOpen = function(fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'beforeClose' event of this <code>sap.m.Popover</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.detachBeforeClose = function(fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'beforeOpen' event of this <code>sap.m.Popover</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.detachBeforeOpen = function(fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * 
 * Creates a new subclass of class sap.m.Popover with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Popover.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event afterClose to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> This refers to the control which opens the popover.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Popover.prototype.fireAfterClose = function(mArguments) { return new sap.m.Popover(); };

/**
 * 
 * Fire event afterOpen to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> This refers to the control which opens the popover.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Popover.prototype.fireAfterOpen = function(mArguments) { return new sap.m.Popover(); };

/**
 * 
 * Fire event beforeClose to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> This refers to the control which opens the popover.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Popover.prototype.fireBeforeClose = function(mArguments) { return new sap.m.Popover(); };

/**
 * 
 * Fire event beforeOpen to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> This refers to the control which opens the popover.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Popover.prototype.fireBeforeOpen = function(mArguments) { return new sap.m.Popover(); };

/**
 * 
 * Getter for aggregation <code>beginButton</code>.<br/>
 * BeginButton is shown at the left side (right side in RTL mode) inside the header. When showHeader is set to false, the property is ignored.
 * @return {sap.ui.core.Control}
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Popover.prototype.getBeginButton = function() { return new sap.ui.core.Control(); };

/**
 * 
 * Getter for aggregation <code>content</code>.<br/>
 * The content inside the popover.
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for Popover.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.Popover.prototype.getContent = function() { return new Array(); };

/**
 * 
 * Getter for property <code>contentHeight</code>.
 * Set the height of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>contentHeight</code>
 * @public
 * @since 1.9.0
 * 
 */
sap.m.Popover.prototype.getContentHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for property <code>contentWidth</code>.
 * Set the width of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>contentWidth</code>
 * @public
 * @since 1.9.0
 * 
 */
sap.m.Popover.prototype.getContentWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for aggregation <code>customHeader</code>.<br/>
 * Any control that needed to be displayed in the header area. When this is set, the showHeader property is ignored, and only this customHeader is shown on the top of popover.
 * @return {sap.ui.core.Control}
 * @public
 * 
 */
sap.m.Popover.prototype.getCustomHeader = function() { return new sap.ui.core.Control(); };

/**
 * 
 * Getter for property <code>enableScrolling</code>.
 * This property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enableScrolling</code>
 * @public
 * @deprecated Since version 1.15.0. 
 * This property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.
 * 
 */
sap.m.Popover.prototype.getEnableScrolling = function() { return false; };

/**
 * 
 * Getter for aggregation <code>endButton</code>.<br/>
 * EndButton is always shown at the right side (left side in RTL mode) inside the header. When showHeader is set to false, the property is ignored.
 * @return {sap.ui.core.Control}
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Popover.prototype.getEndButton = function() { return new sap.ui.core.Control(); };

/**
 * 
 * Getter for aggregation <code>footer</code>.<br/>
 * This is optional footer which is shown on the bottom of the popover.
 * @return {sap.ui.core.Control}
 * @public
 * 
 */
sap.m.Popover.prototype.getFooter = function() { return new sap.ui.core.Control(); };

/**
 * 
 * Getter for property <code>horizontalScrolling</code>.
 * This property indicates if user can scroll horizontally inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.
 * Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>horizontalScrolling</code>
 * @public
 * @since 1.15.0
 * 
 */
sap.m.Popover.prototype.getHorizontalScrolling = function() { return false; };

/**
 * 
 * Focus is set to the popover in the sequence of leftButton and rightButton when available. But if some other control neends to get the focus other than one of those two buttons, set the initialFocus with the control which should be focused on.
 * @return {string} Id of the element which is the current target of the <code>initialFocus</code> association, or null
 * @public
 * @since 1.15.0
 * 
 */
sap.m.Popover.prototype.getInitialFocus = function() { return ""; };

/**
 * 
 * LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 * @return {string} Id of the element which is the current target of the <code>leftButton</code> association, or null
 * @public
 * @deprecated Since version 1.15.1. 
 * </p><p>
 * This property has been deprecated since 1.15.1. Please use the beginButton instead.
 * 
 */
sap.m.Popover.prototype.getLeftButton = function() { return ""; };

/**
 * 
 * Getter for property <code>modal</code>.
 * If the popover will not be closed when tapping outside the popover. It also blocks any interaction with the background. The default value is false.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>modal</code>
 * @public
 * 
 */
sap.m.Popover.prototype.getModal = function() { return false; };

/**
 * 
 * Getter for property <code>offsetX</code>.
 * The offset for the popover placement in the x axis. It's with unit pixel.
 * </p><p>
 * Default value is <code>0</code>
 * @return {int} the value of property <code>offsetX</code>
 * @public
 * 
 */
sap.m.Popover.prototype.getOffsetX = function() { return 0; };

/**
 * 
 * Getter for property <code>offsetY</code>.
 * The offset for the popover placement in the y axis. It's with unit pixel.
 * </p><p>
 * Default value is <code>0</code>
 * @return {int} the value of property <code>offsetY</code>
 * @public
 * 
 */
sap.m.Popover.prototype.getOffsetY = function() { return 0; };

/**
 * 
 * Getter for property <code>placement</code>.
 * This is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Vertical, sap.m.PlacementType.Left.Horizontal, sap.m.PlacementType.Left.Auto. The default value is sap.m.PlacementType.Right. Setting this property while popover is open won't cause any rerendering of the popover, but it will take effect when it's opened again.
 * </p><p>
 * Default value is <code>Right</code>
 * @return {sap.m.PlacementType} the value of property <code>placement</code>
 * @public
 * 
 */
sap.m.Popover.prototype.getPlacement = function() { return new sap.m.PlacementType(); };

/**
 * 
 * RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 * @return {string} Id of the element which is the current target of the <code>rightButton</code> association, or null
 * @public
 * @deprecated Since version 1.15.1. 
 * </p><p>
 * This property has been deprecated since 1.15.1. Please use the endButton instead.
 * 
 */
sap.m.Popover.prototype.getRightButton = function() { return ""; };

/**
 * 
 * Getter for property <code>showHeader</code>.
 * If a header should be shown at the top of the popover.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * 
 */
sap.m.Popover.prototype.getShowHeader = function() { return false; };

/**
 * 
 * Getter for aggregation <code>subHeader</code>.<br/>
 * When subHeader is assigned to Popover, it's rendered directly after the main header if there is, or at the beginning of Popover when there's no main header. SubHeader is out of the content area and won't be scrolled when content's size is bigger than the content area's size.
 * @return {sap.ui.core.Control}
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Popover.prototype.getSubHeader = function() { return new sap.ui.core.Control(); };

/**
 * 
 * Getter for property <code>title</code>.
 * Title text appears in the header. This property will be ignored when showHeader is set to false.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.Popover.prototype.getTitle = function() { return ""; };

/**
 * 
 * Getter for property <code>verticalScrolling</code>.
 * This property indicates if user can scroll vertically inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.
 * Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>verticalScrolling</code>
 * @public
 * @since 1.15.0
 * 
 */
sap.m.Popover.prototype.getVerticalScrolling = function() { return false; };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Popover.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * 
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.insertContent = function(oContent,iIndex) { return new sap.m.Popover(); };

/**
 * 
 * The method checks if the Popover is open. It returns true when the Popover is currently open (this includes opening and closing animations), otherwise it returns false.
 * @type boolean
 * @public
 * @since 1.9.1
 */
sap.m.Popover.prototype.isOpen = function() { return false; };

/**
 * 
 * Opens the popover and set the popover position according to the {placement} property
 * around the {oControl} parameter.
 * @param {object} oControl The control to which the popover is aligned based on the {placement} property
 * @public
 */
sap.m.Popover.prototype.openBy = function(oControl,bSkipInstanceManager) { return null; };

/**
 * 
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Popover.prototype.removeAllContent = function() { return new Array(); };

/**
 * 
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * 
 */
sap.m.Popover.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * 
 * Setter for the aggregated <code>beginButton</code>.
 * @param {sap.ui.core.Control} oBeginButton
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Popover.prototype.setBeginButton = function(oBeginButton) { return new sap.m.Popover(); };

/**
 * 
 * Setter for property <code>bounce</code>.
 * </p><p>
 * Default value is empty
 * @param {boolean} bBounce  new value for property <code>bounce</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Popover.prototype.setBounce = function(bBounce) { return new sap.m.Popover(); };

/**
 * 
 * Setter for property <code>contentHeight</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSSize} sContentHeight  new value for property <code>contentHeight</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.0
 * 
 */
sap.m.Popover.prototype.setContentHeight = function(sContentHeight) { return new sap.m.Popover(); };

/**
 * 
 * Setter for property <code>contentWidth</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSSize} sContentWidth  new value for property <code>contentWidth</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.0
 * 
 */
sap.m.Popover.prototype.setContentWidth = function(sContentWidth) { return new sap.m.Popover(); };

/**
 * 
 * Setter for the aggregated <code>customHeader</code>.
 * @param {sap.ui.core.Control} oCustomHeader
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.setCustomHeader = function(oCustomHeader) { return new sap.m.Popover(); };

/**
 * 
 * Setter for property <code>enableScrolling</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnableScrolling  new value for property <code>enableScrolling</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.15.0. 
 * This property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.
 * 
 */
sap.m.Popover.prototype.setEnableScrolling = function(bEnableScrolling) { return new sap.m.Popover(); };

/**
 * 
 * Setter for the aggregated <code>endButton</code>.
 * @param {sap.ui.core.Control} oEndButton
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Popover.prototype.setEndButton = function(oEndButton) { return new sap.m.Popover(); };

/**
 * 
 * The followOf feature from Popup which closes the popover in desktop browser when
 * the position or the size of open by control changes may leads to unwanted close.
 * </p><p>
 * This function is for enabling/disabling the followOf feature which has effect only in desktop browsers.
 * @param {boolean} bValue enables the followOf feature when set to true and disable the followOf when set to false 
 * @return {sap.m.Popover} The popover itself for method chaining
 * @protected
 * @since 1.16.8
 * 
 */
sap.m.Popover.prototype.setFollowOf = function(bValue) { return new sap.m.Popover(); };

/**
 * 
 * Setter for the aggregated <code>footer</code>.
 * @param {sap.ui.core.Control} oFooter
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.setFooter = function(oFooter) { return new sap.m.Popover(); };

/**
 * 
 * Setter for property <code>horizontalScrolling</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bHorizontalScrolling  new value for property <code>horizontalScrolling</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * 
 */
sap.m.Popover.prototype.setHorizontalScrolling = function(bHorizontalScrolling) { return new sap.m.Popover(); };

/**
 * 
 * Focus is set to the popover in the sequence of leftButton and rightButton when available. But if some other control neends to get the focus other than one of those two buttons, set the initialFocus with the control which should be focused on.
 * @param {string | sap.ui.core.Control} vInitialFocus 
 *    Id of an element which becomes the new target of this <code>initialFocus</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * 
 */
sap.m.Popover.prototype.setInitialFocus = function(vInitialFocus) { return new sap.m.Popover(); };

/**
 * 
 * LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 * @param {string | sap.m.Button} vLeftButton 
 *    Id of an element which becomes the new target of this <code>leftButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.15.1. 
 * </p><p>
 * This property has been deprecated since 1.15.1. Please use the beginButton instead.
 * 
 */
sap.m.Popover.prototype.setLeftButton = function(vLeftButton) { return new sap.m.Popover(); };

/**
 * 
 * Setter for property <code>modal</code>.
 * This overwrites the default setter of the property <code>modal</code> to avoid rerendering the whole popover control.
 * </p><p>
 * Default value is <code>false</code>
 * @param {boolean} bModal  new value for property <code>modal</code>.
 * @param {string} [sModalCSSClass] a CSS class (or space-separated list of classes) that should be added to the block layer.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.Popover.prototype.setModal = function(bModal,sModalCSSClass) { return new sap.m.Popover(); };

/**
 * 
 * Setter for property <code>offsetX</code>.
 * </p><p>
 * Default value is <code>0</code> 
 * @param {int} iOffsetX  new value for property <code>offsetX</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.setOffsetX = function(iOffsetX) { return new sap.m.Popover(); };

/**
 * 
 * Setter for property <code>offsetY</code>.
 * </p><p>
 * Default value is <code>0</code> 
 * @param {int} iOffsetY  new value for property <code>offsetY</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.setOffsetY = function(iOffsetY) { return new sap.m.Popover(); };

/**
 * 
 * Set the placement of the popover.
 * @public
 */
sap.m.Popover.prototype.setPlacement = function(sPlacement) { return null; };

/**
 * 
 * RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 * @param {string | sap.m.Button} vRightButton 
 *    Id of an element which becomes the new target of this <code>rightButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.15.1. 
 * </p><p>
 * This property has been deprecated since 1.15.1. Please use the endButton instead.
 * 
 */
sap.m.Popover.prototype.setRightButton = function(vRightButton) { return new sap.m.Popover(); };

/**
 * 
 * Setter for property <code>showHeader</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.setShowHeader = function(bShowHeader) { return new sap.m.Popover(); };

/**
 * 
 * Setter for the aggregated <code>subHeader</code>.
 * @param {sap.ui.core.Control} oSubHeader
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * 
 */
sap.m.Popover.prototype.setSubHeader = function(oSubHeader) { return new sap.m.Popover(); };

/**
 * 
 * The setter of the title property. If you want to show a header in the popover, don't forget to
 * set the {showHeader} to true.
 * @public
 */
sap.m.Popover.prototype.setTitle = function(sTitle) { return null; };

/**
 * 
 * Setter for property <code>verticalScrolling</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVerticalScrolling  new value for property <code>verticalScrolling</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * 
 */
sap.m.Popover.prototype.setVerticalScrolling = function(bVerticalScrolling) { return new sap.m.Popover(); };


// ---- sap.m.PopupHelper --------------------------------------------------------------------------

/**
 * 
 * This methods converts the percentage value to an absolute number based on the given base number.
 * @param {string} sPercentage A percentage value in string format, for example "25%"
 * @param {float} fBaseSize A float number which the calculation is based on.
 * @returns The calculated size string with "px" as unit or null when the format of given parameter is wrong.
 * @protected
 * 
 * @memberOf sap.m.PopupHelper
 */
sap.m.PopupHelper.calcPercentageSize = function(sPercentage,fBaseSize) { return null; };


// ---- sap.m.ProgressIndicator --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ProgressIndicator.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getState state} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getDisplayValue displayValue} : string (default: '0%')</li>
 * <li>{@link #getPercentValue percentValue} : float (default: 0)</li>
 * <li>{@link #getShowValue showValue} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '2.5rem')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Shows the progress of a process in a graphical way. To indicate the progress, the inside of the ProgressIndicator is filled with a color.
 * Additionally, a user defined string can be displayed on the ProgressIndicator.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.13.1
 * 
 */
sap.m.ProgressIndicator = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.m.ProgressIndicator with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ProgressIndicator.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>displayValue</code>.
 * The text value to be displayed in the bar.
 * </p><p>
 * Default value is <code>0%</code>
 * @return {string} the value of property <code>displayValue</code>
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.getDisplayValue = function() { return ""; };

/**
 * 
 * Getter for property <code>enabled</code>.
 * Switches enabled state of the control. Disabled fields have different colors, and can not be focused.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.getEnabled = function() { return false; };

/**
 * 
 * Getter for property <code>height</code>.
 * The height of the control.
 * Suggested size for normal use 2.5rem (40px). Suggested size for small size (like for use in ObjectHeader) 1.375rem (22px).
 * </p><p>
 * Default value is <code>2.5rem</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @since 1.15.0
 * 
 */
sap.m.ProgressIndicator.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for property <code>percentValue</code>.
 * The numerical value for the displayed length of the progress bar.
 * </p><p>
 * Default value is <code>0</code>
 * @return {float} the value of property <code>percentValue</code>
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.getPercentValue = function() { return 0.0; };

/**
 * 
 * Getter for property <code>showValue</code>.
 * Specifies whether the current value shall be rendered inside the bar.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showValue</code>
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.getShowValue = function() { return false; };

/**
 * 
 * Getter for property <code>state</code>.
 * The state of the bar. Enumeration sap.ui.core.ValueState provides Error (red), Warning (yellow), Success (green), None (blue) (default value).
 * </p><p>
 * Default value is <code>None</code>
 * @return {sap.ui.core.ValueState} the value of property <code>state</code>
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.getState = function() { return new sap.ui.core.ValueState(); };

/**
 * 
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.getVisible = function() { return false; };

/**
 * 
 * Getter for property <code>width</code>.
 * The width of the control.
 * </p><p>
 * Default value is <code>100%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Setter for property <code>displayValue</code>.
 * </p><p>
 * Default value is <code>0%</code> 
 * @param {string} sDisplayValue  new value for property <code>displayValue</code>
 * @return {sap.m.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.setDisplayValue = function(sDisplayValue) { return new sap.m.ProgressIndicator(); };

/**
 * 
 * Setter for property <code>enabled</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.setEnabled = function(bEnabled) { return new sap.m.ProgressIndicator(); };

/**
 * 
 * Setter for property <code>height</code>.
 * </p><p>
 * Default value is <code>2.5rem</code> 
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * 
 */
sap.m.ProgressIndicator.prototype.setHeight = function(sHeight) { return new sap.m.ProgressIndicator(); };

/**
 * 
 * Setter for property <code>percentValue</code>.
 * </p><p>
 * Default value is <code>0</code> 
 * @param {float} fPercentValue  new value for property <code>percentValue</code>
 * @return {sap.m.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.setPercentValue = function(fPercentValue) { return new sap.m.ProgressIndicator(); };

/**
 * 
 * Setter for property <code>showValue</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bShowValue  new value for property <code>showValue</code>
 * @return {sap.m.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.setShowValue = function(bShowValue) { return new sap.m.ProgressIndicator(); };

/**
 * 
 * Setter for property <code>state</code>.
 * </p><p>
 * Default value is <code>None</code> 
 * @param {sap.ui.core.ValueState} oState  new value for property <code>state</code>
 * @return {sap.m.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.setState = function(oState) { return new sap.m.ProgressIndicator(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.setVisible = function(bVisible) { return new sap.m.ProgressIndicator(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is <code>100%</code> 
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.setWidth = function(sWidth) { return new sap.m.ProgressIndicator(); };


// ---- sap.m.PullToRefresh --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new PullToRefresh.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getShowIcon showIcon} : boolean (default: false)</li>
 * <li>{@link #getCustomIcon customIcon} : sap.ui.core.URI</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.PullToRefresh#event:refresh refresh} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * PullToRefresh control. Put it as the first control in contents of a scroll container or a scrollable page. Do not place it into a page with disabled scrolling.
 * On touch devices it gets hidden by default and when the user pulls down the page far enough, it gets visible and triggers the "refresh" event.
 * In non-touch browsers where scrollbars are used for scrolling, it is always visible and triggers the "refresh" event when clicked.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.9.2
 * 
 */
sap.m.PullToRefresh = function(sId,mSettings) {};
/**
 * 
 * Event indicates that the user has requested new data 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.PullToRefresh.prototype.refresh = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'refresh' event of this <code>sap.m.PullToRefresh</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.PullToRefresh</code>.<br/> itself. 
 * </p><p>
 * Event indicates that the user has requested new data 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.PullToRefresh</code>.<br/> itself.
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.attachRefresh = function(oData,fnFunction,oListener) { return new sap.m.PullToRefresh(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'refresh' event of this <code>sap.m.PullToRefresh</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.detachRefresh = function(fnFunction,oListener) { return new sap.m.PullToRefresh(); };

/**
 * 
 * Creates a new subclass of class sap.m.PullToRefresh with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.PullToRefresh.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event refresh to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.PullToRefresh.prototype.fireRefresh = function(mArguments) { return new sap.m.PullToRefresh(); };

/**
 * 
 * Getter for property <code>customIcon</code>.
 * Provide a URI to a custom icon image to replace the SAP logo. Large images are scaled down to max 50px height.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>customIcon</code>
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.getCustomIcon = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>description</code>.
 * Optional description. May be used to inform a user, for example, when the list has been updated last time.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>description</code>
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.getDescription = function() { return ""; };

/**
 * 
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * </p><p>
 * If bandwidth is the key for the application, set this value to false.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.getIconDensityAware = function() { return false; };

/**
 * 
 * Getter for property <code>showIcon</code>.
 * Set to true to display an icon/logo. Icon must be set either in the customIcon property or in the CSS theme for the PullToRefresh control.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showIcon</code>
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.getShowIcon = function() { return false; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set to false to remove PullToRefresh from the scroll container.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @since 1.16.0
 * 
 */
sap.m.PullToRefresh.prototype.getVisible = function() { return false; };

/**
 * 
 * Hides the control and resets it to the normal state. In non-touch environments the control is not hidden.
 * @type void
 * @public
 */
sap.m.PullToRefresh.prototype.hide = function() { return null; };

/**
 * 
 * Setter for property <code>customIcon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sCustomIcon  new value for property <code>customIcon</code>
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.setCustomIcon = function(sCustomIcon) { return new sap.m.PullToRefresh(); };

/**
 * 
 * Setter for property <code>description</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sDescription  new value for property <code>description</code>
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.setDescription = function(sDescription) { return new sap.m.PullToRefresh(); };

/**
 * 
 * Setter for property <code>iconDensityAware</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.PullToRefresh(); };

/**
 * 
 * Setter for property <code>showIcon</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bShowIcon  new value for property <code>showIcon</code>
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.setShowIcon = function(bShowIcon) { return new sap.m.PullToRefresh(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * 
 */
sap.m.PullToRefresh.prototype.setVisible = function(bVisible) { return new sap.m.PullToRefresh(); };


// ---- sap.m.RadioButton --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new RadioButton.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * <li>{@link #getGroupName groupName} : string (default: 'sapMRbDefaultGroup')</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '')</li>
 * <li>{@link #getActiveHandling activeHandling} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.RadioButton#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Generally, you would create at least two radio button controls which should have the same GroupName;
 * by this, you provide a limited choice for the user. Triggers an Event when User makes a change.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.RadioButton = function(sId,mSettings) {};
/**
 * 
 * Event is triggered when the user makes a change on the radio button (selecting or unselecting it). 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.selected Checks whether the RadioButton is active or not.
 * @public
 */
sap.m.RadioButton.prototype.select = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.RadioButton</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.RadioButton</code>.<br/> itself. 
 * </p><p>
 * Event is triggered when the user makes a change on the radio button (selecting or unselecting it). 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.RadioButton</code>.<br/> itself.
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.attachSelect = function(oData,fnFunction,oListener) { return new sap.m.RadioButton(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.RadioButton</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.detachSelect = function(fnFunction,oListener) { return new sap.m.RadioButton(); };

/**
 * 
 * Creates a new subclass of class sap.m.RadioButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.RadioButton.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event select to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'selected' of type <code>boolean</code> Checks whether the RadioButton is active or not.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.RadioButton.prototype.fireSelect = function(mArguments) { return new sap.m.RadioButton(); };

/**
 * 
 * Getter for property <code>activeHandling</code>.
 * this is a flag to switch on activeHandling, when it is switch
 * ed off, there will not be visual changes on active state. Default value is 'true'
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>activeHandling</code>
 * @public
 * 
 */
sap.m.RadioButton.prototype.getActiveHandling = function() { return false; };

/**
 * 
 * Getter for property <code>enabled</code>.
 * Disabled controls are displayed in another color.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.RadioButton.prototype.getEnabled = function() { return false; };

/**
 * 
 * Getter for property <code>groupName</code>.
 * Name of the radio button group the current radio button belongs to. You can define a new name for the group.
 * If no new name is specified, this radio button belongs to the sapMRbDefaultGroup per default. Default behavior of a radio button in a group is that when one of the radio buttons in a group is selected, all others are unselected.
 * </p><p>
 * Default value is <code>'sapMRbDefaultGroup'</code>
 * @return {string} the value of property <code>groupName</code>
 * @public
 * 
 */
sap.m.RadioButton.prototype.getGroupName = function() { return ""; };

/**
 * 
 * Getter for property <code>selected</code>.
 * Specifies the select state of the radio button
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * 
 */
sap.m.RadioButton.prototype.getSelected = function() { return false; };

/**
 * 
 * Getter for property <code>text</code>.
 * Defines the text displayed next to the RadioButton
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.RadioButton.prototype.getText = function() { return ""; };

/**
 * 
 * Getter for property <code>textDirection</code>.
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 * </p><p>
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code>
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * 
 */
sap.m.RadioButton.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * 
 * Getter for property <code>visible</code>.
 * Invisible radio buttons are not rendered.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.RadioButton.prototype.getVisible = function() { return false; };

/**
 * 
 * Getter for property <code>width</code>.
 * Width of Label
 * </p><p>
 * Default value is <code>''</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.RadioButton.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Pseudo event for pseudo 'select' event... space, enter, ... without modifiers (Ctrl, Alt or Shift)
 * @public
 */
sap.m.RadioButton.prototype.onsapselect = function(oEvent) { return null; };

/**
 * 
 * Setter for property <code>activeHandling</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bActiveHandling  new value for property <code>activeHandling</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.setActiveHandling = function(bActiveHandling) { return new sap.m.RadioButton(); };

/**
 * 
 * Method to set a RadioButton's state to active or inactive.
 * @param {boolean} 
 *         bActive
 *         boolean to set the active state to true or false
 * @type void
 * @public
 */
sap.m.RadioButton.prototype.setActiveState = function(bActive) { return null; };

/**
 * 
 * Setter for property <code>enabled</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.setEnabled = function(bEnabled) { return new sap.m.RadioButton(); };

/**
 * 
 * Setter for property <code>groupName</code>.
 * </p><p>
 * Default value is <code>'sapMRbDefaultGroup'</code> 
 * @param {string} sGroupName  new value for property <code>groupName</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.setGroupName = function(sGroupName) { return new sap.m.RadioButton(); };

/**
 * 
 * Setter for property <code>selected</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bSelected  new value for property <code>selected</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.setSelected = function(bSelected) { return new sap.m.RadioButton(); };

/**
 * 
 * Setter for property <code>text</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.setText = function(sText) { return new sap.m.RadioButton(); };

/**
 * 
 * Setter for property <code>textDirection</code>.
 * </p><p>
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code> 
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.setTextDirection = function(oTextDirection) { return new sap.m.RadioButton(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.setVisible = function(bVisible) { return new sap.m.RadioButton(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is <code>''</code> 
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.setWidth = function(sWidth) { return new sap.m.RadioButton(); };


// ---- sap.m.RatingIndicator --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new RatingIndicator.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getMaxValue maxValue} : int (default: 5)</li>
 * <li>{@link #getValue value} : float (default: 0)</li>
 * <li>{@link #getIconSize iconSize} : sap.ui.core.CSSSize (default: '1.375rem')</li>
 * <li>{@link #getIconSelected iconSelected} : sap.ui.core.URI</li>
 * <li>{@link #getIconUnselected iconUnselected} : sap.ui.core.URI</li>
 * <li>{@link #getIconHovered iconHovered} : sap.ui.core.URI</li>
 * <li>{@link #getVisualMode visualMode} : sap.m.RatingIndicatorVisualMode (default: sap.m.RatingIndicatorVisualMode.Half)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.RatingIndicator#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.RatingIndicator#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Is used to rate content. The amount of rating symbols can be specified, as well as the URIs to the
 * image icons which shall be used as rating symbols. When the user performs a rating, an event is fired.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.14
 * 
 */
sap.m.RatingIndicator = function(sId,mSettings) {};
/**
 * 
 * The event is fired when the user has done a rating. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {int} oControlEvent.getParameters.value The rated value
 * @public
 */
sap.m.RatingIndicator.prototype.change = function(oControlEvent) { return null; };

/**
 * 
 * This event is triggered during the dragging period, each time the rating value changes. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {float} oControlEvent.getParameters.value The current value of the rating after a live change event.
 * @public
 */
sap.m.RatingIndicator.prototype.liveChange = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.RatingIndicator</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.RatingIndicator</code>.<br/> itself. 
 * </p><p>
 * The event is fired when the user has done a rating. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.RatingIndicator</code>.<br/> itself.
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.RatingIndicator(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.RatingIndicator</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.RatingIndicator</code>.<br/> itself. 
 * </p><p>
 * This event is triggered during the dragging period, each time the rating value changes. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.RatingIndicator</code>.<br/> itself.
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.attachLiveChange = function(oData,fnFunction,oListener) { return new sap.m.RatingIndicator(); };

/**
 * 
 * Binder for property <code>value</code>.
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.bindValue = function(sPath,fnFormatter,sMode) { return new sap.m.RatingIndicator(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.RatingIndicator</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.RatingIndicator(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.RatingIndicator</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.detachLiveChange = function(fnFunction,oListener) { return new sap.m.RatingIndicator(); };

/**
 * 
 * Creates a new subclass of class sap.m.RatingIndicator with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.RatingIndicator.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event change to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>int</code> The rated value</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.RatingIndicator.prototype.fireChange = function(mArguments) { return new sap.m.RatingIndicator(); };

/**
 * 
 * Fire event liveChange to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>float</code> The current value of the rating after a live change event.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.RatingIndicator.prototype.fireLiveChange = function(mArguments) { return new sap.m.RatingIndicator(); };

/**
 * 
 * Getter for property <code>enabled</code>.
 * Value "true" is required to let the user rate with this control. It is recommended to set this parameter to "false" for the "Small" size which is meant for indicating a value only
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getEnabled = function() { return false; };

/**
 * 
 * Getter for property <code>iconHovered</code>.
 * The URI to the icon font icon or image that will be displayed for hovered rating symbols. A star icon will be used if the property is not set
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>iconHovered</code>
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getIconHovered = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>iconSelected</code>.
 * The URI to the icon font icon or image that will be displayed for selected rating symbols. A star icon will be used if the property is not set
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>iconSelected</code>
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getIconSelected = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>iconSize</code>.
 * The Size of the image or icon to be displayed. Please be sure that the size is corresponding to a full pixel value as some browsers don't support subpixel calculations.
 * </p><p>
 * Default value is <code>1.375rem</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>iconSize</code>
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getIconSize = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for property <code>iconUnselected</code>.
 * The URI to the icon font icon or image that will be displayed for all unselected rating symbols. A star icon will be used if the property is not set
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>iconUnselected</code>
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getIconUnselected = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>maxValue</code>.
 * The number of displayed rating symbols
 * </p><p>
 * Default value is <code>5</code>
 * @return {int} the value of property <code>maxValue</code>
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getMaxValue = function() { return 0; };

/**
 * 
 * Getter for property <code>value</code>.
 * The indicated value of the rating
 * </p><p>
 * Default value is <code>0</code>
 * @return {float} the value of property <code>value</code>
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getValue = function() { return 0.0; };

/**
 * 
 * Getter for property <code>visible</code>.
 * If set to invisible, the control is not rendered.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getVisible = function() { return false; };

/**
 * 
 * Getter for property <code>visualMode</code>.
 * Defines how float values are visualized: Full, Half (see enumeration RatingIndicatorVisualMode)
 * </p><p>
 * Default value is <code>Half</code>
 * @return {sap.m.RatingIndicatorVisualMode} the value of property <code>visualMode</code>
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getVisualMode = function() { return new sap.m.RatingIndicatorVisualMode(); };

/**
 * 
 * Setter for property <code>enabled</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.setEnabled = function(bEnabled) { return new sap.m.RatingIndicator(); };

/**
 * 
 * Sets the hovered icon without rerendering the control.
 * @param {sap.ui.core.URI} sURI
 * @returns {sap.m.RatingIndicator} Returns <code>this</code> to facilitate method chaining.
 * @overwrite
 * @public
 */
sap.m.RatingIndicator.prototype.setIconHovered = function(sURI) { return new sap.m.RatingIndicator(); };

/**
 * 
 * Sets the selected icon without rerendering the control.
 * @param {sap.ui.core.URI} sURI
 * @returns {sap.m.RatingIndicator} Returns <code>this</code> to facilitate method chaining.
 * @overwrite
 * @public
 */
sap.m.RatingIndicator.prototype.setIconSelected = function(sURI) { return new sap.m.RatingIndicator(); };

/**
 * 
 * Sets the icon size value. The method is automatically updating the UI components if the control has been rendered before.
 * @param {float} sIconSize
 * @returns {sap.m.RatingIndicator} Returns <code>this</code> to facilitate method chaining.
 * @overwrite
 * @public
 */
sap.m.RatingIndicator.prototype.setIconSize = function(sIconSize) { return new sap.m.RatingIndicator(); };

/**
 * 
 * Sets the unselected icon without rerendering the control.
 * @param {sap.ui.core.URI} sURI
 * @returns {sap.m.RatingIndicator} Returns <code>this</code> to facilitate method chaining.
 * @overwrite
 * @public
 */
sap.m.RatingIndicator.prototype.setIconUnselected = function(sURI) { return new sap.m.RatingIndicator(); };

/**
 * 
 * Setter for property <code>maxValue</code>.
 * </p><p>
 * Default value is <code>5</code> 
 * @param {int} iMaxValue  new value for property <code>maxValue</code>
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.setMaxValue = function(iMaxValue) { return new sap.m.RatingIndicator(); };

/**
 * 
 * Sets the rating value. The method is automatically checking whether the value is in the valid range of 0-{maxValue} and if it is a valid number.
 * @param {float} fValue The rating value to be set.
 * @returns {sap.m.RatingIndicator} Returns <code>this</code> to facilitate method chaining.
 * @overwrite
 * @public
 */
sap.m.RatingIndicator.prototype.setValue = function(fValue) { return new sap.m.RatingIndicator(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.setVisible = function(bVisible) { return new sap.m.RatingIndicator(); };

/**
 * 
 * Setter for property <code>visualMode</code>.
 * </p><p>
 * Default value is <code>Half</code> 
 * @param {sap.m.RatingIndicatorVisualMode} oVisualMode  new value for property <code>visualMode</code>
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.setVisualMode = function(oVisualMode) { return new sap.m.RatingIndicator(); };

/**
 * 
 * Unbinder for property <code>value</code>.
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.unbindValue = function() { return new sap.m.RatingIndicator(); };


// ---- sap.m.RatingIndicatorVisualMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.RatingIndicatorVisualMode.toString = function() { return ""; };

// ---- sap.m.ResponsivePopover --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ResponsivePopover.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPlacement placement} : sap.m.PlacementType (default: sap.m.PlacementType.Right)</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getModal modal} : boolean</li>
 * <li>{@link #getOffsetX offsetX} : int</li>
 * <li>{@link #getOffsetY offsetY} : int</li>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHorizontalScrolling horizontalScrolling} : boolean</li>
 * <li>{@link #getVerticalScrolling verticalScrolling} : boolean</li>
 * <li>{@link #getShowCloseButton showCloseButton} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * <li>{@link #getCustomHeader customHeader} : sap.m.Bar</li>
 * <li>{@link #getSubHeader subHeader} : sap.m.Bar</li>
 * <li>{@link #getBeginButton beginButton} : sap.m.Button</li>
 * <li>{@link #getEndButton endButton} : sap.m.Button</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getInitialFocus initialFocus} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.ResponsivePopover#event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ResponsivePopover#event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ResponsivePopover#event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ResponsivePopover#event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * This control acts responsively to the type of device. It acts as a sap.m.Popover on desktop and tablet while acts as a sap.m.Dialog with stretch set to true on phone.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.15.1
 * 
 */
sap.m.ResponsivePopover = function(sId,mSettings) {};
/**
 * 
 * Event is fired after popover or dialog is closed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy 
 * 						This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
 * @param {sap.m.Button} oControlEvent.getParameters.origin 
 * 						This parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.
 * @public
 */
sap.m.ResponsivePopover.prototype.afterClose = function(oControlEvent) { return null; };

/**
 * 
 * Event is fired after popover or dialog is open. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy 
 * 						This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
 * @public
 */
sap.m.ResponsivePopover.prototype.afterOpen = function(oControlEvent) { return null; };

/**
 * 
 * Event is fired before popover or dialog is closed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy 
 * 						This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
 * @param {sap.m.Button} oControlEvent.getParameters.origin 
 * 						This parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.
 * @public
 */
sap.m.ResponsivePopover.prototype.beforeClose = function(oControlEvent) { return null; };

/**
 * 
 * Event is fired before popover or dialog is open. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy 
 * 						This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
 * @public
 */
sap.m.ResponsivePopover.prototype.beforeOpen = function(oControlEvent) { return null; };

/**
 * 
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.addContent = function(oContent) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'afterClose' event of this <code>sap.m.ResponsivePopover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ResponsivePopover</code>.<br/> itself. 
 * </p><p>
 * Event is fired after popover or dialog is closed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code>.<br/> itself.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.attachAfterClose = function(oData,fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'afterOpen' event of this <code>sap.m.ResponsivePopover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ResponsivePopover</code>.<br/> itself. 
 * </p><p>
 * Event is fired after popover or dialog is open. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code>.<br/> itself.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.attachAfterOpen = function(oData,fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'beforeClose' event of this <code>sap.m.ResponsivePopover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ResponsivePopover</code>.<br/> itself. 
 * </p><p>
 * Event is fired before popover or dialog is closed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code>.<br/> itself.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.attachBeforeClose = function(oData,fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'beforeOpen' event of this <code>sap.m.ResponsivePopover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ResponsivePopover</code>.<br/> itself. 
 * </p><p>
 * Event is fired before popover or dialog is open. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code>.<br/> itself.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.attachBeforeOpen = function(oData,fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Closes the ResponsivePopover.
 * @type sap.ui.core.Control
 * @public
 */
sap.m.ResponsivePopover.prototype.close = function() { return new sap.ui.core.Control(); };

/**
 * 
 * Destroys the beginButton in the aggregation 
 * named <code>beginButton</code>.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.destroyBeginButton = function() { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.destroyContent = function() { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Destroys the customHeader in the aggregation 
 * named <code>customHeader</code>.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.destroyCustomHeader = function() { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Destroys the endButton in the aggregation 
 * named <code>endButton</code>.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.destroyEndButton = function() { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Destroys the subHeader in the aggregation 
 * named <code>subHeader</code>.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.destroySubHeader = function() { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'afterClose' event of this <code>sap.m.ResponsivePopover</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.detachAfterClose = function(fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'afterOpen' event of this <code>sap.m.ResponsivePopover</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.detachAfterOpen = function(fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'beforeClose' event of this <code>sap.m.ResponsivePopover</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.detachBeforeClose = function(fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'beforeOpen' event of this <code>sap.m.ResponsivePopover</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.detachBeforeOpen = function(fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Creates a new subclass of class sap.m.ResponsivePopover with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ResponsivePopover.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event afterClose to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> 
 * 						This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
 * 					</li>
 * <li>'origin' of type <code>sap.m.Button</code> 
 * 						This parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.
 * 					</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ResponsivePopover.prototype.fireAfterClose = function(mArguments) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Fire event afterOpen to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> 
 * 						This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
 * 					</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ResponsivePopover.prototype.fireAfterOpen = function(mArguments) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Fire event beforeClose to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> 
 * 						This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
 * 					</li>
 * <li>'origin' of type <code>sap.m.Button</code> 
 * 						This parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.
 * 					</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ResponsivePopover.prototype.fireBeforeClose = function(mArguments) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Fire event beforeOpen to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> 
 * 						This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
 * 					</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ResponsivePopover.prototype.fireBeforeOpen = function(mArguments) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Getter for aggregation <code>beginButton</code>.<br/>
 * BeginButton is supported by both variants. It is always show in the left part (right part in RTL mode) of the footer which is located at the bottom of the ResponsivePopover. If buttons need to be displayed in header, please use customHeader instead.
 * @return {sap.m.Button}
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getBeginButton = function() { return new sap.m.Button(); };

/**
 * 
 * Getter for aggregation <code>content</code>.<br/>
 * Content is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#content sap.m.Popover} and {@linkcode sap.m.Dialog#content sap.m.Dialog}
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getContent = function() { return new Array(); };

/**
 * 
 * Getter for property <code>contentHeight</code>.
 * This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#contentHeight sap.m.Popover} and {@linkcode sap.m.Dialog#contentHeight sap.m.Dialog}
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>contentHeight</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getContentHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for property <code>contentWidth</code>.
 * This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#contentWidth sap.m.Popover} and {@linkcode sap.m.Dialog#contentWidth sap.m.Dialog}
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>contentWidth</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getContentWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for aggregation <code>customHeader</code>.<br/>
 * CustomHeader is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#customHeader sap.m.Popover} and {@linkcode sap.m.Dialog#customHeader sap.m.Dialog}
 * @return {sap.m.Bar}
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getCustomHeader = function() { return new sap.m.Bar(); };

/**
 * 
 * Getter for aggregation <code>endButton</code>.<br/>
 * EndButton is supported by both variants. It is always show in the right part (left part in RTL mode) of the footer which is located at the bottom of the ResponsivePopover. If buttons need to be displayed in header, please use customHeader instead.
 * @return {sap.m.Button}
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getEndButton = function() { return new sap.m.Button(); };

/**
 * 
 * Getter for property <code>horizontalScrolling</code>.
 * This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#horizontalScrolling sap.m.Popover} and {@linkcode sap.m.Dialog#horizontalScrolling sap.m.Dialog}
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {boolean} the value of property <code>horizontalScrolling</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getHorizontalScrolling = function() { return false; };

/**
 * 
 * Getter for property <code>icon</code>.
 * This property only takes effect when runs on phone. Please see the documentation {@linkcode sap.m.Dialog#icon here}.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * 
 * InitialFocus is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#initialFocus sap.m.Popover} and {@linkcode sap.m.Dialog#initialFocus sap.m.Dialog}
 * @return {string} Id of the element which is the current target of the <code>initialFocus</code> association, or null
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getInitialFocus = function() { return ""; };

/**
 * 
 * Getter for property <code>modal</code>.
 * This property only takes effect when runs on desktop or tablet. Please see the documentation {@linkcode sap.m.Popover#modal here}.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {boolean} the value of property <code>modal</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getModal = function() { return false; };

/**
 * 
 * Getter for property <code>offsetX</code>.
 * This property only takes effect when runs on desktop or tablet. Please see the documentation {@linkcode sap.m.Popover#offsetX here}.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {int} the value of property <code>offsetX</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getOffsetX = function() { return 0; };

/**
 * 
 * Getter for property <code>offsetY</code>.
 * This property only takes effect when runs on desktop or tablet. Please see the documentation {@linkcode sap.m.Popover#offsetY here}.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {int} the value of property <code>offsetY</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getOffsetY = function() { return 0; };

/**
 * 
 * Getter for property <code>placement</code>.
 * This property only takes effect when runs on desktop or tablet. Please see the documentation {@linkcode sap.m.Popover#placement here}.
 * </p><p>
 * Default value is <code>Right</code>
 * @return {sap.m.PlacementType} the value of property <code>placement</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getPlacement = function() { return new sap.m.PlacementType(); };

/**
 * 
 * Getter for property <code>showCloseButton</code>.
 * Whether a close button should be inserted to the dialog's header dynamically to close the dialog. This property only takes effect when runs on the phone.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showCloseButton</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getShowCloseButton = function() { return false; };

/**
 * 
 * Getter for property <code>showHeader</code>.
 * This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#showHeader sap.m.Popover} and {@linkcode sap.m.Dialog#showHeader sap.m.Dialog}
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getShowHeader = function() { return false; };

/**
 * 
 * Getter for aggregation <code>subHeader</code>.<br/>
 * SubHeader is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#subHeader sap.m.Popover} and {@linkcode sap.m.Dialog#subHeader sap.m.Dialog}
 * @return {sap.m.Bar}
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getSubHeader = function() { return new sap.m.Bar(); };

/**
 * 
 * Getter for property <code>title</code>.
 * This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#title sap.m.Popover} and {@linkcode sap.m.Dialog#title sap.m.Dialog}
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getTitle = function() { return ""; };

/**
 * 
 * Getter for property <code>verticalScrolling</code>.
 * This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#verticalScrolling sap.m.Popover} and {@linkcode sap.m.Dialog#verticalScrolling sap.m.Dialog}
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {boolean} the value of property <code>verticalScrolling</code>
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getVerticalScrolling = function() { return false; };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * 
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.insertContent = function(oContent,iIndex) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Checks whether the ResponsivePopover is currently open.
 * @type sap.ui.core.Control
 * @public
 */
sap.m.ResponsivePopover.prototype.isOpen = function() { return new sap.ui.core.Control(); };

/**
 * 
 * Opens the ResponsivePopover. The ResponsivePopover is positioned relatively to the control parameter when runs on tablet or desktop and is full screen when runs on phone. Therefore the control parameter only has its usage when runs on tablet or desktop and is ignored when runs on phone.
 * @param {object} 
 *         oControl
 * </p><p>
 * When this control runs on tablet or desktop, the ResponsivePopover is positioned relatively to this control.
 * @type sap.ui.core.Control
 * @public
 */
sap.m.ResponsivePopover.prototype.openBy = function(oControl) { return new sap.ui.core.Control(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.removeAllContent = function() { return new Array(); };

/**
 * 
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * 
 * Setter for the aggregated <code>beginButton</code>.
 * @param {sap.m.Button} oBeginButton
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setBeginButton = function(oBeginButton) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Setter for property <code>contentHeight</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSSize} sContentHeight  new value for property <code>contentHeight</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setContentHeight = function(sContentHeight) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Setter for property <code>contentWidth</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSSize} sContentWidth  new value for property <code>contentWidth</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setContentWidth = function(sContentWidth) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Setter for the aggregated <code>customHeader</code>.
 * @param {sap.m.Bar} oCustomHeader
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setCustomHeader = function(oCustomHeader) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Setter for the aggregated <code>endButton</code>.
 * @param {sap.m.Button} oEndButton
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setEndButton = function(oEndButton) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Setter for property <code>horizontalScrolling</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {boolean} bHorizontalScrolling  new value for property <code>horizontalScrolling</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setHorizontalScrolling = function(bHorizontalScrolling) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Setter for property <code>icon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setIcon = function(sIcon) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * InitialFocus is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#initialFocus sap.m.Popover} and {@linkcode sap.m.Dialog#initialFocus sap.m.Dialog}
 * @param {string | sap.ui.core.Control} vInitialFocus 
 *    Id of an element which becomes the new target of this <code>initialFocus</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setInitialFocus = function(vInitialFocus) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Setter for property <code>modal</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {boolean} bModal  new value for property <code>modal</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setModal = function(bModal) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Setter for property <code>offsetX</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {int} iOffsetX  new value for property <code>offsetX</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setOffsetX = function(iOffsetX) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Setter for property <code>offsetY</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {int} iOffsetY  new value for property <code>offsetY</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setOffsetY = function(iOffsetY) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Setter for property <code>placement</code>.
 * </p><p>
 * Default value is <code>Right</code> 
 * @param {sap.m.PlacementType} oPlacement  new value for property <code>placement</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setPlacement = function(oPlacement) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Setter for property <code>showCloseButton</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bShowCloseButton  new value for property <code>showCloseButton</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setShowCloseButton = function(bShowCloseButton) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Setter for property <code>showHeader</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setShowHeader = function(bShowHeader) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Setter for the aggregated <code>subHeader</code>.
 * @param {sap.m.Bar} oSubHeader
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setSubHeader = function(oSubHeader) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Setter for property <code>title</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setTitle = function(sTitle) { return new sap.m.ResponsivePopover(); };

/**
 * 
 * Setter for property <code>verticalScrolling</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {boolean} bVerticalScrolling  new value for property <code>verticalScrolling</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setVerticalScrolling = function(bVerticalScrolling) { return new sap.m.ResponsivePopover(); };


// ---- sap.m.routing --------------------------------------------------------------------------


// ---- sap.m.routing.RouteMatchedHandler --------------------------------------------------------------------------

/**
 * 
 * Instantiates a RouteMatchedHandler
 * @class
 * This class will attach to the Events of a provided router and add the views created by it to a  @link {sap.m.SplitContainer} or a @link {sap.m.NavContainer} Control, if this is the target control of the route.</br>
 * If the targetControl is no @link {sap.m.SplitContainer} or a @link {sap.m.NavContainer}, It will only close the dialogs, according to the property value.</br>
 * </br>
 * When a navigation is triggered, this class will try to determine the transition of the pages based on the history.</br>
 * Eg: if a user presses browser back, it will show a backwards animation.</br>
 * </br>
 * The navigation on the container takes place in the RoutePatternMatched event of the Router. If you register on the RouteMatched event of the Router, the visual navigation did not take place yet.</br>
 * </br>
 * Since it is hard to detect if a user has pressed browser back, this transitions will not be reliable, for example if someone bookmarked a detail page, and wants to navigate to a masterPage.</br>
 * If you want this case to always show a backwards transition, you should specify a "viewLevel" property on your Route.</br>
 * The viewLevel has to be an integer. The Master should have a lower number than the detail.</br>
 * These levels should represent the user process of your application and they do not have to match the container structure of your Routes.</br>
 * If the user navigates between views with the same viewLevel, the history is asked for the direction.</br>
 * </br>
 * You can specify a property "transition" in a route to define which transition will be applied when navigating. If it is not defined, the nav container will take its default transition.
 * </br>
 * You can also specify "transitionParameters" on a Route, to give the transition parameters.</br>
 * </br>
 * If you want to preserve the current view when navigating, but you want to navigate to it when nothing is displayed in the navContainer, you can set preservePageInSplitContainer = true</br>
 * When the route that has this flag directly matches the pattern, the view will still be switched by the splitContainer.
 * </br>
 * @link {sap.m.NavContainer}
 * @param {sap.ui.core.routing.Router} router - A router that creates views</br>
 * @param {boolean} closeDialogs - the default is true - will close all open dialogs before navigating, if set to true. If set to false it will just navigate without closing dialogs.
 * @public
 * 
 */
sap.m.routing.RouteMatchedHandler = function(router,closeDialogs) {};
/**
 * 
 * Removes the routeMatchedHandler from the Router
 * @public
 */
sap.m.routing.RouteMatchedHandler.prototype.destroy = function() { return null; };

/**
 * 
 * Gets if a navigation should close dialogs
 * @public
 * @returns {boolean} a flag indication if dialogs will be closed
 */
sap.m.routing.RouteMatchedHandler.prototype.getCloseDialogs = function() { return false; };

/**
 * 
 * Sets if a navigation should close dialogs
 * @public
 * @returns {sap.m.routing.RouteMatchedHandler} for chaining
 */
sap.m.routing.RouteMatchedHandler.prototype.setCloseDialogs = function(bCloseDialogs) { return new sap.m.routing.RouteMatchedHandler(); };


// ---- sap.m.ScreenSize --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ScreenSize.toString = function() { return ""; };

// ---- sap.m.ScrollContainer --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ScrollContainer.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 'auto')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 'auto')</li>
 * <li>{@link #getHorizontal horizontal} : boolean (default: true)</li>
 * <li>{@link #getVertical vertical} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The ScrollContainer is a control that can display arbitrary content within a limited screen area and provides touch scrolling to make all content accessible.
 * </p><p>
 * Note that it is not recommended to have nested scrolling areas that scroll into the same direction (e.g. a ScrollContainer that scrolls vertically inside a Page control with scrolling enabled). This is currently not considered a valid use-case of a good UI and the behavior will feel wrong.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.ScrollContainer = function(sId,mSettings) {};
/**
 * 
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.addContent = function(oContent) { return new sap.m.ScrollContainer(); };

/**
 * 
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.destroyContent = function() { return new sap.m.ScrollContainer(); };

/**
 * 
 * Creates a new subclass of class sap.m.ScrollContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ScrollContainer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>content</code>.<br/>
 * The content of the ScrollContainer.
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for ScrollContainer.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.getContent = function() { return new Array(); };

/**
 * 
 * Getter for property <code>height</code>.
 * The height of the ScrollContainer.
 * By default the height equals the content height. If only horizontal scrolling is used, do not set the height or make sure the height is always larger than the height of the content.
 * </p><p>
 * Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.
 * </p><p>
 * Default value is <code>auto</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for property <code>horizontal</code>.
 * Whether horizontal scrolling should be possible.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>horizontal</code>
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.getHorizontal = function() { return false; };

/**
 * 
 * Getter for property <code>vertical</code>.
 * Whether vertical scrolling should be possible.
 * </p><p>
 * Note that this is off by default because typically a Page is used as fullscreen element which can handle vertical scrolling. If this is not the case and vertical scrolling is required, this flag needs to be set to "true".
 * Important: it is not supported to have nested controls that both enable scrolling into the same dimension.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>vertical</code>
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.getVertical = function() { return false; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Invisible scroll containers are not rendered
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.getVisible = function() { return false; };

/**
 * 
 * Getter for property <code>width</code>.
 * The width of the ScrollContainer.
 * If not set, it consumes the complete available width, behaving like normal HTML block elements. If only vertical scrolling is enabled, make sure the content always fits or wraps.
 * </p><p>
 * Default value is <code>auto</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * 
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.insertContent = function(oContent,iIndex) { return new sap.m.ScrollContainer(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.removeAllContent = function() { return new Array(); };

/**
 * 
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * 
 * Scrolls to the given position.
 * When called while the control is not rendered (yet), the scrolling position is still applied, but there is no animation.
 * @param {int} 
 *         iX
 *         The horizontal pixel position to scroll to.
 * Scrolling to the right happens with positive values.
 * If only vertical scrolling is enabled, give 0 as value.
 * @param {int} 
 *         iY
 *         The vertical pixel position to scroll to.
 * Scrolling down happens with positive values.
 * If only horizontal scrolling is enabled, give 0 as value.
 * @param {int} 
 *         iTime
 *         The duration of animated scrolling.
 * To scroll immediately without animation, give 0 as value. 0 is also the default value, when this optional parameter is omitted.
 * @type sap.m.ScrollContainer
 * @public
 */
sap.m.ScrollContainer.prototype.scrollTo = function(iX,iY,iTime) { return new sap.m.ScrollContainer(); };

/**
 * 
 * Setter for property <code>height</code>.
 * </p><p>
 * Default value is <code>auto</code> 
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.setHeight = function(sHeight) { return new sap.m.ScrollContainer(); };

/**
 * 
 * Setter for property <code>horizontal</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bHorizontal  new value for property <code>horizontal</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.setHorizontal = function(bHorizontal) { return new sap.m.ScrollContainer(); };

/**
 * 
 * Setter for property <code>vertical</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bVertical  new value for property <code>vertical</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.setVertical = function(bVertical) { return new sap.m.ScrollContainer(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.setVisible = function(bVisible) { return new sap.m.ScrollContainer(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is <code>auto</code> 
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.setWidth = function(sWidth) { return new sap.m.ScrollContainer(); };


// ---- sap.m.SearchField --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new SearchField.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getMaxLength maxLength} : int (default: 0)</li>
 * <li>{@link #getPlaceholder placeholder} : string</li>
 * <li>{@link #getShowMagnifier showMagnifier} : boolean (default: true)</li>
 * <li>{@link #getShowRefreshButton showRefreshButton} : boolean (default: false)</li>
 * <li>{@link #getRefreshButtonTooltip refreshButtonTooltip} : string</li>
 * <li>{@link #getSelectOnFocus selectOnFocus} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.SearchField#event:search search} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SearchField#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Enables users to input a search string.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.SearchField = function(sId,mSettings) {};
/**
 * 
 * This event is fired when the value of the search field is changed by a user - e.g. at each key press. 
 * @event
 * @since 1.9.1
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.newValue Current search string.
 * @public
 */
sap.m.SearchField.prototype.liveChange = function(oControlEvent) { return null; };

/**
 * 
 * Event which is fired when the user triggers a search. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.query The search query string.
 * @param {boolean} oControlEvent.getParameters.refreshButtonPressed Indicates if the user pressed the refresh button.
 * @public
 */
sap.m.SearchField.prototype.search = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.SearchField</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SearchField</code>.<br/> itself. 
 * </p><p>
 * This event is fired when the value of the search field is changed by a user - e.g. at each key press. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SearchField</code>.<br/> itself.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.1
 * 
 */
sap.m.SearchField.prototype.attachLiveChange = function(oData,fnFunction,oListener) { return new sap.m.SearchField(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'search' event of this <code>sap.m.SearchField</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SearchField</code>.<br/> itself. 
 * </p><p>
 * Event which is fired when the user triggers a search. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SearchField</code>.<br/> itself.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SearchField.prototype.attachSearch = function(oData,fnFunction,oListener) { return new sap.m.SearchField(); };

/**
 * 
 * Binder for property <code>value</code>.
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SearchField.prototype.bindValue = function(sPath,fnFormatter,sMode) { return new sap.m.SearchField(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.SearchField</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.1
 * 
 */
sap.m.SearchField.prototype.detachLiveChange = function(fnFunction,oListener) { return new sap.m.SearchField(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'search' event of this <code>sap.m.SearchField</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SearchField.prototype.detachSearch = function(fnFunction,oListener) { return new sap.m.SearchField(); };

/**
 * 
 * Creates a new subclass of class sap.m.SearchField with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.SearchField.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event liveChange to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'newValue' of type <code>string</code> Current search string.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @protected
 * @since 1.9.1
 * 
 */
sap.m.SearchField.prototype.fireLiveChange = function(mArguments) { return new sap.m.SearchField(); };

/**
 * 
 * Fire event search to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'query' of type <code>string</code> The search query string.</li>
 * <li>'refreshButtonPressed' of type <code>boolean</code> Indicates if the user pressed the refresh button.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SearchField.prototype.fireSearch = function(mArguments) { return new sap.m.SearchField(); };

/**
 * 
 * Getter for property <code>enabled</code>.
 * Boolean property to enable the control (default is true).
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.SearchField.prototype.getEnabled = function() { return false; };

/**
 * 
 * Getter for property <code>maxLength</code>.
 * Maximum number of characters. Value '0' means the feature is switched off.
 * </p><p>
 * Default value is <code>0</code>
 * @return {int} the value of property <code>maxLength</code>
 * @public
 * 
 */
sap.m.SearchField.prototype.getMaxLength = function() { return 0; };

/**
 * 
 * Getter for property <code>placeholder</code>.
 * Text shown when no value available. Default placeholder text is the word "Search" in the current local language (if supported) or in English.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>placeholder</code>
 * @public
 * 
 */
sap.m.SearchField.prototype.getPlaceholder = function() { return ""; };

/**
 * 
 * Getter for property <code>refreshButtonTooltip</code>.
 * Tooltip text of the refresh button. If it is not set, the tooltip of the SearchField (if any) is displayed. Tooltips are not displayed on touch devices.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>refreshButtonTooltip</code>
 * @public
 * @since 1.16
 * 
 */
sap.m.SearchField.prototype.getRefreshButtonTooltip = function() { return ""; };

/**
 * 
 * Getter for property <code>selectOnFocus</code>.
 * Normally, search text is selected for copy when the SearchField is focused by keyboard navigation. If an application re-renders the SearchField during the liveChange event, set this property to false to disable text selection by focus.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>selectOnFocus</code>
 * @public
 * @since 1.20
 * 
 */
sap.m.SearchField.prototype.getSelectOnFocus = function() { return false; };

/**
 * 
 * Getter for property <code>showMagnifier</code>.
 * Set to false to hide the magnifier icon. This property is deprecated since version 1.16.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showMagnifier</code>
 * @public
 * 
 */
sap.m.SearchField.prototype.getShowMagnifier = function() { return false; };

/**
 * 
 * Getter for property <code>showRefreshButton</code>.
 * Set to true to display a "refresh" button. By pressing the refresh button, the user can reload the results list without changing the search string. This is a visual clue only: a normal search event is fired when a user presses on a refresh button.
 * </p><p>
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showRefreshButton</code>
 * @public
 * @since 1.16
 * 
 */
sap.m.SearchField.prototype.getShowRefreshButton = function() { return false; };

/**
 * 
 * Getter for property <code>value</code>.
 * Input Value.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>value</code>
 * @public
 * 
 */
sap.m.SearchField.prototype.getValue = function() { return ""; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Invisible inputs are not rendered.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.SearchField.prototype.getVisible = function() { return false; };

/**
 * 
 * Getter for property <code>width</code>.
 * Defines the width of the input.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.SearchField.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Setter for property <code>enabled</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SearchField.prototype.setEnabled = function(bEnabled) { return new sap.m.SearchField(); };

/**
 * 
 * Setter for property <code>maxLength</code>.
 * </p><p>
 * Default value is <code>0</code> 
 * @param {int} iMaxLength  new value for property <code>maxLength</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SearchField.prototype.setMaxLength = function(iMaxLength) { return new sap.m.SearchField(); };

/**
 * 
 * Setter for property <code>placeholder</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sPlaceholder  new value for property <code>placeholder</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SearchField.prototype.setPlaceholder = function(sPlaceholder) { return new sap.m.SearchField(); };

/**
 * 
 * Setter for property <code>refreshButtonTooltip</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sRefreshButtonTooltip  new value for property <code>refreshButtonTooltip</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.SearchField.prototype.setRefreshButtonTooltip = function(sRefreshButtonTooltip) { return new sap.m.SearchField(); };

/**
 * 
 * Setter for property <code>selectOnFocus</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bSelectOnFocus  new value for property <code>selectOnFocus</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @since 1.20
 * 
 */
sap.m.SearchField.prototype.setSelectOnFocus = function(bSelectOnFocus) { return new sap.m.SearchField(); };

/**
 * 
 * Setter for property <code>showMagnifier</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bShowMagnifier  new value for property <code>showMagnifier</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SearchField.prototype.setShowMagnifier = function(bShowMagnifier) { return new sap.m.SearchField(); };

/**
 * 
 * Setter for property <code>showRefreshButton</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bShowRefreshButton  new value for property <code>showRefreshButton</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.SearchField.prototype.setShowRefreshButton = function(bShowRefreshButton) { return new sap.m.SearchField(); };

/**
 * 
 * Setter for property <code>value</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SearchField.prototype.setValue = function(sValue) { return new sap.m.SearchField(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SearchField.prototype.setVisible = function(bVisible) { return new sap.m.SearchField(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SearchField.prototype.setWidth = function(sWidth) { return new sap.m.SearchField(); };

/**
 * 
 * Unbinder for property <code>value</code>.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SearchField.prototype.unbindValue = function() { return new sap.m.SearchField(); };


// ---- sap.m.SegmentedButton --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new SegmentedButton.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getButtons buttons} <strong>(default aggregation)</strong> : sap.m.Button[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedButton selectedButton} : string | sap.m.Button</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.SegmentedButton#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A SegmentedButton Control is a horizontal control made of multiple buttons which can display a title or an image. It automatically resizes the buttons to fit proportionally within the control. When no width is set, the control uses the available width.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.SegmentedButton = function(sId,mSettings) {};
/**
 * 
 * Event is fired when the user selects a button, which returns the id and button object 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.Button} oControlEvent.getParameters.button Reference to the button that has just been selected
 * @param {string} oControlEvent.getParameters.id Id of the button which has just been selected
 * @public
 */
sap.m.SegmentedButton.prototype.select = function(oControlEvent) { return null; };

/**
 * 
 * Adds some button <code>oButton</code> 
 * to the aggregation named <code>buttons</code>.
 * @param {sap.m.Button}
 *            oButton the button to add; if empty, nothing is inserted
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.addButton = function(oButton) { return new sap.m.SegmentedButton(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.SegmentedButton</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SegmentedButton</code>.<br/> itself. 
 * </p><p>
 * Event is fired when the user selects a button, which returns the id and button object 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SegmentedButton</code>.<br/> itself.
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.attachSelect = function(oData,fnFunction,oListener) { return new sap.m.SegmentedButton(); };

/**
 * 
 * Convenient method to add a button with a text as title or an uri for an icon. 
 * Only one is allowed.
 * @param {string}
 *         sText defines the title text of the newly created button
 * @param {sap.ui.core.URI}
 *        sURI defines the icon uri of the button
 * @param {boolean}
 *        [bEnabled] sets the enabled status of the button
 * @return
 * @type {sap.m.Button}
 * @public
 */
sap.m.SegmentedButton.prototype.createButton = function(sText,sURI,bEnabled) { return null; };

/**
 * 
 * Destroys all the buttons in the aggregation 
 * named <code>buttons</code>.
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.destroyButtons = function() { return new sap.m.SegmentedButton(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.SegmentedButton</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.detachSelect = function(fnFunction,oListener) { return new sap.m.SegmentedButton(); };

/**
 * 
 * Creates a new subclass of class sap.m.SegmentedButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.SegmentedButton.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event select to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'button' of type <code>sap.m.Button</code> Reference to the button that has just been selected</li>
 * <li>'id' of type <code>string</code> Id of the button which has just been selected</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SegmentedButton.prototype.fireSelect = function(mArguments) { return new sap.m.SegmentedButton(); };

/**
 * 
 * Getter for aggregation <code>buttons</code>.<br/>
 * Buttons of the SegmentedButton control
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for SegmentedButton.
 * @return {sap.m.Button[]}
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.getButtons = function() { return new Array(); };

/**
 * 
 * Getter for property <code>enabled</code>.
 * If disabled all buttons look grey, you cannot focus on them, you can not even click on them.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.getEnabled = function() { return false; };

/**
 * 
 * Pointer to the selected button of a SegmentedButton control.
 * @return {string} Id of the element which is the current target of the <code>selectedButton</code> association, or null
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.getSelectedButton = function() { return ""; };

/**
 * 
 * Getter for property <code>visible</code>.
 * boolean property to make the control visible or invisible
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.getVisible = function() { return false; };

/**
 * 
 * Getter for property <code>width</code>.
 * Set the width of the SegmentedButton control. If not set, it uses the minimum required width to make all buttons inside of the same size (based on the biggest button).
 * </p><p>
 * </p><p>
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Checks for the provided <code>sap.m.Button</code> in the aggregation named <code>buttons</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Button}
 *            oButton the button whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.indexOfButton = function(oButton) { return 0; };

/**
 * 
 * Inserts a button into the aggregation named <code>buttons</code>.
 * @param {sap.m.Button}
 *          oButton the button to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the button should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the button is inserted at 
 *             the last position        
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.insertButton = function(oButton,iIndex) { return new sap.m.SegmentedButton(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>buttons</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Button[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.removeAllButtons = function() { return new Array(); };

/**
 * 
 * Removes an button from the aggregation named <code>buttons</code>.
 * @param {int | string | sap.m.Button} vButton the button to remove or its index or id
 * @return {sap.m.Button} the removed button or null
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.removeButton = function(vButton) { return new sap.m.Button(); };

/**
 * 
 * Setter for property <code>enabled</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.setEnabled = function(bEnabled) { return new sap.m.SegmentedButton(); };

/**
 * 
 * Pointer to the selected button of a SegmentedButton control.
 * @param {string | sap.m.Button} vSelectedButton 
 *    Id of an element which becomes the new target of this <code>selectedButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.setSelectedButton = function(vSelectedButton) { return new sap.m.SegmentedButton(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.setVisible = function(bVisible) { return new sap.m.SegmentedButton(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.setWidth = function(sWidth) { return new sap.m.SegmentedButton(); };


// ---- sap.m.Select --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new Select.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 'auto')</li>
 * <li>{@link #getMaxWidth maxWidth} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getSelectedKey selectedKey} : string</li>
 * <li>{@link #getSelectedItemId selectedItemId} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getType type} : sap.m.SelectType (default: sap.m.SelectType.Default)</li>
 * <li>{@link #getAutoAdjustWidth autoAdjustWidth} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} <strong>(default aggregation)</strong> : sap.ui.core.Item[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedItem selectedItem} : string | sap.ui.core.Item</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Select#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The select control provides a menu of predefined items that allows end users to choose options.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.Select = function(sId,mSettings) {};
/**
 * 
 * This hook method can be used to add additional content.
 * @param {sap.m.Dialog | sap.m.Popover} [oPopup]
 * @protected
 * 
 */
sap.m.Select.prototype.addContent = null

/**
 * 
 * This hook method is called after the Select Popup is rendered.
 * @protected
 * 
 */
sap.m.Select.prototype.onAfterRenderingPopup = null

/**
 * 
 * This hook method is called before the Select Popup is rendered.
 * @protected
 * 
 */
sap.m.Select.prototype.onBeforeRenderingPopup = null

/**
 * 
 * This event will be triggered when the user changes the selected item. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Item} oControlEvent.getParameters.selectedItem The selected item.
 * @public
 */
sap.m.Select.prototype.change = function(oControlEvent) { return null; };

/**
 * 
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 * @param {sap.ui.core.Item}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Select.prototype.addItem = function(oItem) { return new sap.m.Select(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.Select</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Select</code>.<br/> itself. 
 * </p><p>
 * This event will be triggered when the user changes the selected item. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Select</code>.<br/> itself.
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Select.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.Select(); };

/**
 * 
 * Binder for aggregation <code>items</code>.
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Select.prototype.bindItems = function(sPath,oTemplate,oSorter,aFilters) { return new sap.m.Select(); };

/**
 * 
 * Closes the Select.
 * @returns {sap.m.Select} <code>this</code> to allow method chaining.
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.close = function() { return new sap.m.Select(); };

/**
 * 
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Select.prototype.destroyItems = function() { return new sap.m.Select(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.Select</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Select.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.Select(); };

/**
 * 
 * Creates a new subclass of class sap.m.Select with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Select.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event change to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItem' of type <code>sap.ui.core.Item</code> The selected item.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Select.prototype.fireChange = function(mArguments) { return new sap.m.Select(); };

/**
 * 
 * Getter for property <code>autoAdjustWidth</code>.
 * If set to true, the width of the select input is determined by the selected item’s content.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>autoAdjustWidth</code>
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.getAutoAdjustWidth = function() { return false; };

/**
 * 
 * Getter for property <code>enabled</code>.
 * Determines whether the user can change the selected value.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.Select.prototype.getEnabled = function() { return false; };

/**
 * 
 * Retrieves the first item from the aggregation named <code>items</code>.
 * @returns {sap.ui.core.Item | null} The first item, or null if there are no items.
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.getFirstItem = function() { return new sap.ui.core.Item (); };

/**
 * 
 * Getter for property <code>icon</code>.
 * The URI to the icon that will be displayed only when using the “IconOnly” type.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Retrieves the item from the aggregation named <code>items</code> at the given 0-based index.
 * @param {int} iIndex Index of the item to return.
 * @returns {sap.ui.core.Item | null} Item at the given index, or null if none.
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.getItemAt = function(iIndex) { return new sap.ui.core.Item (); };

/**
 * 
 * Retrieves the first item object from the aggregation named <code>items</code>,
 * based on the item key value supplied.
 * @param {string} sKey An item key that specifies the item to retrieve.
 * @returns {sap.ui.core.Item | null}
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.getItemByKey = function(sKey) { return new sap.ui.core.Item (); };

/**
 * 
 * Getter for aggregation <code>items</code>.<br/>
 * Items of the Item control.
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for Select.
 * @return {sap.ui.core.Item[]}
 * @public
 * 
 */
sap.m.Select.prototype.getItems = function() { return new Array(); };

/**
 * 
 * Retrieves the last item from the aggregation named <code>items</code>.
 * @returns {sap.ui.core.Item | null} The last item, or null if there are no items.
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.getLastItem = function() { return new sap.ui.core.Item (); };

/**
 * 
 * Getter for property <code>maxWidth</code>.
 * Defines the maximum width of the select input. This value can be provided in %, em, px… and all valid CSS measures.
 * </p><p>
 * Default value is <code>100%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>maxWidth</code>
 * @public
 * 
 */
sap.m.Select.prototype.getMaxWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for property <code>name</code>.
 * The name to be used in the HTML code (e.g. for HTML forms that send data to the server via submit).
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>name</code>
 * @public
 * 
 */
sap.m.Select.prototype.getName = function() { return ""; };

/**
 * 
 * Getter for the Select Popup.
 * @returns {sap.m.Dialog | sap.m.Popover | null}
 * @protected
 */
sap.m.Select.prototype.getPopup = function() { return new sap.m.Dialog (); };

/**
 * 
 * Retrieves the selected item object from the aggregation named <code>items</code>.
 * @returns {sap.ui.core.Item | null} The current target of the <code>selectedItem</code> association, or null.
 * @public
 * 
 */
sap.m.Select.prototype.getSelectedItem = function() { return new sap.ui.core.Item (); };

/**
 * 
 * Getter for property <code>selectedItemId</code>.
 * Id of the selected item. If the id has no corresponding aggregated item, no changes will apply.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>selectedItemId</code>
 * @public
 * @since 1.12
 * 
 */
sap.m.Select.prototype.getSelectedItemId = function() { return ""; };

/**
 * 
 * Getter for property <code>selectedKey</code>.
 * Key of the selected item. If the key has no corresponding aggregated item, no changes will apply. If duplicate keys exists the first item matching the key is used.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>selectedKey</code>
 * @public
 * @since 1.11
 * 
 */
sap.m.Select.prototype.getSelectedKey = function() { return ""; };

/**
 * 
 * Getter for property <code>type</code>.
 * Type of a select. Possibles values "Default", "IconOnly".
 * </p><p>
 * Default value is <code>Default</code>
 * @return {sap.m.SelectType} the value of property <code>type</code>
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.getType = function() { return new sap.m.SelectType(); };

/**
 * 
 * Getter for property <code>visible</code>.
 * Determines whether the control is visible or not.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.Select.prototype.getVisible = function() { return false; };

/**
 * 
 * Getter for property <code>width</code>.
 * Defines the width of the select input. The default width of a select control depends on the width of the widest option/item in the list. This value can be provided in %, em, px… and all possible CSS measures.
 * Note: The width will be ignored if the "autoAdjustWidth" property is set to true.
 * </p><p>
 * Default value is <code>auto</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.Select.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Determines whether the Select has content or not.
 * @returns {boolean}
 * @protected
 */
sap.m.Select.prototype.hasContent = function() { return false; };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Item}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Select.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * 
 * Inserts a item into the aggregation named <code>items</code>.
 * @param {sap.ui.core.Item}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Select.prototype.insertItem = function(oItem,iIndex) { return new sap.m.Select(); };

/**
 * 
 * Checks if the Select is open. It returns true when the Select is currently open,
 * this includes opening and closing animations, otherwise it returns false.
 * @returns {boolean} Determines whether the Select is currently open (this includes opening and closing animations).
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.isOpen = function() { return false; };

/**
 * 
 * Open the Select.
 * @returns {sap.m.Select} <code>this</code> to allow method chaining.
 * @protected
 * @since 1.16
 * 
 */
sap.m.Select.prototype.open = function() { return new sap.m.Select(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Item[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Select.prototype.removeAllItems = function() { return new Array(); };

/**
 * 
 * Removes an item from the aggregation named <code>items</code>.
 * @param {int | string | sap.ui.core.Item} vItem the item to remove or its index or id.
 * @returns {sap.ui.core.Item} the removed item or null.
 * @public
 * 
 */
sap.m.Select.prototype.removeItem = function(vItem) { return new sap.ui.core.Item(); };

/**
 * 
 * Setter for property <code>autoAdjustWidth</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bAutoAdjustWidth  new value for property <code>autoAdjustWidth</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.setAutoAdjustWidth = function(bAutoAdjustWidth) { return new sap.m.Select(); };

/**
 * 
 * Setter for property <code>enabled</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Select.prototype.setEnabled = function(bEnabled) { return new sap.m.Select(); };

/**
 * 
 * Setter for property <code>icon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.setIcon = function(sIcon) { return new sap.m.Select(); };

/**
 * 
 * Setter for property <code>maxWidth</code>.
 * </p><p>
 * Default value is <code>100%</code> 
 * @param {sap.ui.core.CSSSize} sMaxWidth  new value for property <code>maxWidth</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Select.prototype.setMaxWidth = function(sMaxWidth) { return new sap.m.Select(); };

/**
 * 
 * Setter for property <code>name</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Select.prototype.setName = function(sName) { return new sap.m.Select(); };

/**
 * 
 * Setter for association <code>selectedItem</code>.
 * @param {string | sap.ui.core.Item | null} vItem new value for association <code>selectedItem</code>
 *    Id of an sap.ui.core.Item which becomes the new target of this <code>selectedItem</code> association.
 *    Alternatively, an sap.ui.core.Item instance may be given or null.
 *    If the value of null is provided the first enabled item will be selected (if any).
 * @returns {sap.m.Select} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.Select.prototype.setSelectedItem = function(vItem) { return new sap.m.Select(); };

/**
 * 
 * Setter for property <code>selectedItemId</code>.
 * </p><p>
 * Default value is an empty string <code>""</code> or <code>undefined</code>.
 * If the provided <code>vItem</code> has a default value,
 * the first enabled item will be selected (if any).
 * @param {string | undefined} vItem new value for property <code>selectedItemId</code>.
 * @returns {sap.m.Select} <code>this</code> to allow method chaining.
 * @public
 * @since 1.12
 * 
 */
sap.m.Select.prototype.setSelectedItemId = function(vItem) { return new sap.m.Select(); };

/**
 * 
 * Setter for property <code>selectedKey</code>.
 * </p><p>
 * Default value is an empty string <code>""</code> or <code>undefined</code>.
 * </p><p>
 * If the provided <code>sKey</code> has a default value,
 * the first enabled item will be selected (if any).
 * In the case that an item has the default key value, it will be selected instead.
 * @param {string} sKey new value for property <code>selectedKey</code>.
 * @returns {sap.m.Select} <code>this</code> to allow method chaining.
 * @public
 * @since 1.11
 * 
 */
sap.m.Select.prototype.setSelectedKey = function(sKey) { return new sap.m.Select(); };

/**
 * 
 * Setter for property <code>type</code>.
 * </p><p>
 * Default value is <code>Default</code> 
 * @param {sap.m.SelectType} oType  new value for property <code>type</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.setType = function(oType) { return new sap.m.Select(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Select.prototype.setVisible = function(bVisible) { return new sap.m.Select(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is <code>auto</code> 
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Select.prototype.setWidth = function(sWidth) { return new sap.m.Select(); };

/**
 * 
 * Unbinder for aggregation <code>items</code>.
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Select.prototype.unbindItems = function() { return new sap.m.Select(); };


// ---- sap.m.SelectDialog --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new SelectDialog.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getNoDataText noDataText} : string</li>
 * <li>{@link #getMultiSelect multiSelect} : boolean (default: false)</li>
 * <li>{@link #getGrowingThreshold growingThreshold} : int</li>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getRememberSelections rememberSelections} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} <strong>(default aggregation)</strong> : sap.m.ListItemBase[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.SelectDialog#event:confirm confirm} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SelectDialog#event:search search} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SelectDialog#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SelectDialog#event:cancel cancel} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A SelectDialog is a dialog containing a list and search functionality to filter the list and confirmation/cancel buttons. The control can be used when the user should select one or multiple items out of many.
 * </p><p>
 * The list used in the SelectDialog is a growing list and can be filled with a any kind of list item. The search field triggers the events "search" and "liveChange" where a filter function can be applied to the list binding.
 * </p><p>
 * After selecting an item in single selection mode or after confirming in multi selection mode, the dialog will be closed and the event "confirm" is fired with the items that have been selected. By default, the selection will also be reset to allow for a new selection when opening the dialog again.
 * </p><p>
 * When cancelling the selection, the event "change" will be fired and the selection is restored to the state when the dialog was opened.
 * </p><p>
 * NOTE: The growing functionality of the list does not support Two Way Binding, so if you use this control with a JSON model make sure the binding mode is set to "OneWay" and that you update the selection model manually with the items passed in the "confirm" event.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.SelectDialog = function(sId,mSettings) {};
/**
 * 
 * This event will be fired when the cancel button is clicked 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.SelectDialog.prototype.cancel = function(oControlEvent) { return null; };

/**
 * 
 * This event will be fired when the dialog is confirmed by selecting an item in single selection mode or by pressing the confirmation button in multi selection mode . The items being selected are returned as event parameters. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.StandardListItem} oControlEvent.getParameters.selectedItem Returns the selected list item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.
 * @param {sap.m.StandardListItem[]} oControlEvent.getParameters.selectedItems Returns an array containing the visible selected list items. If no items are selected, an empty array is returned.
 * @param {string} oControlEvent.getParameters.selectedContexts Returns the binding contexts of the selected items including the non-visible items. 
 * NOTE: In contrast to the parameter "selectedItems", this parameter will also include the selected but NOT visible items (e.g. due to list filtering). An empty array will be set for this parameter if no Databinding is used.
 * NOTE: When the list binding is pre-filtered and there are items in the selection that are not visible upon opening the dialog the contexts are not loaded. Therefore, these items will not be included in the selectedContexts array unless they are displayed at least once.
 * @public
 */
sap.m.SelectDialog.prototype.confirm = function(oControlEvent) { return null; };

/**
 * 
 * This event will be fired when the value of the search field is changed by a user - e.g. at each key press 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The value to search on, which can change at any keypress
 * @param {any} oControlEvent.getParameters.itemsBinding The Items binding of the Select Dialog. It will only be available if the items aggregation is bound to a model.
 * @public
 */
sap.m.SelectDialog.prototype.liveChange = function(oControlEvent) { return null; };

/**
 * 
 * This event will be fired when the search button has been clicked on the searchfield on the visual control 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The value entered in the search
 * @param {any} oControlEvent.getParameters.itemsBinding The Items binding of the Select Dialog for search purposes. It will only be available if the items aggregation is bound to a model.
 * @public
 */
sap.m.SelectDialog.prototype.search = function(oControlEvent) { return null; };

/**
 * 
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 * @param {sap.m.ListItemBase}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.addItem = function(oItem) { return new sap.m.SelectDialog(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'cancel' event of this <code>sap.m.SelectDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SelectDialog</code>.<br/> itself. 
 * </p><p>
 * This event will be fired when the cancel button is clicked 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code>.<br/> itself.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.attachCancel = function(oData,fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'confirm' event of this <code>sap.m.SelectDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SelectDialog</code>.<br/> itself. 
 * </p><p>
 * This event will be fired when the dialog is confirmed by selecting an item in single selection mode or by pressing the confirmation button in multi selection mode . The items being selected are returned as event parameters. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code>.<br/> itself.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.attachConfirm = function(oData,fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.SelectDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SelectDialog</code>.<br/> itself. 
 * </p><p>
 * This event will be fired when the value of the search field is changed by a user - e.g. at each key press 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code>.<br/> itself.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.attachLiveChange = function(oData,fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'search' event of this <code>sap.m.SelectDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SelectDialog</code>.<br/> itself. 
 * </p><p>
 * This event will be fired when the search button has been clicked on the searchfield on the visual control 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code>.<br/> itself.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.attachSearch = function(oData,fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * 
 * Forwards aggregations with the name of items to the internal list.
 * @overwrite
 * @public
 * @param {string} sAggregationName the name for the binding
 * @param {object} oBindingInfo the configuration parameters for the binding
 * @returns {this} this pointer for chaining
 */
sap.m.SelectDialog.prototype.bindAggregation = function(sAggregationName,oBindingInfo) { return null; };

/**
 * 
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.destroyItems = function() { return new sap.m.SelectDialog(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'cancel' event of this <code>sap.m.SelectDialog</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.detachCancel = function(fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'confirm' event of this <code>sap.m.SelectDialog</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.detachConfirm = function(fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.SelectDialog</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.detachLiveChange = function(fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'search' event of this <code>sap.m.SelectDialog</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.detachSearch = function(fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * 
 * Creates a new subclass of class sap.m.SelectDialog with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.SelectDialog.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event cancel to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SelectDialog.prototype.fireCancel = function(mArguments) { return new sap.m.SelectDialog(); };

/**
 * 
 * Fire event confirm to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItem' of type <code>sap.m.StandardListItem</code> Returns the selected list item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.</li>
 * <li>'selectedItems' of type <code>sap.m.StandardListItem[]</code> Returns an array containing the visible selected list items. If no items are selected, an empty array is returned.</li>
 * <li>'selectedContexts' of type <code>string</code> Returns the binding contexts of the selected items including the non-visible items. 
 * NOTE: In contrast to the parameter "selectedItems", this parameter will also include the selected but NOT visible items (e.g. due to list filtering). An empty array will be set for this parameter if no Databinding is used.
 * NOTE: When the list binding is pre-filtered and there are items in the selection that are not visible upon opening the dialog the contexts are not loaded. Therefore, these items will not be included in the selectedContexts array unless they are displayed at least once.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SelectDialog.prototype.fireConfirm = function(mArguments) { return new sap.m.SelectDialog(); };

/**
 * 
 * Fire event liveChange to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> The value to search on, which can change at any keypress</li>
 * <li>'itemsBinding' of type <code>any</code> The Items binding of the Select Dialog. It will only be available if the items aggregation is bound to a model.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SelectDialog.prototype.fireLiveChange = function(mArguments) { return new sap.m.SelectDialog(); };

/**
 * 
 * Fire event search to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> The value entered in the search</li>
 * <li>'itemsBinding' of type <code>any</code> The Items binding of the Select Dialog for search purposes. It will only be available if the items aggregation is bound to a model.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SelectDialog.prototype.fireSearch = function(mArguments) { return new sap.m.SelectDialog(); };

/**
 * 
 * Reflector for the internal Dialog's contentWidth property
 * @overwrite
 * @public
 * @returns {sap.ui.core.CSSSize} sWidth the content width of the internal dialog
 */
sap.m.SelectDialog.prototype.getContentWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for property <code>growingThreshold</code>.
 * Number of items initially displayed in the list
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {int} the value of property <code>growingThreshold</code>
 * @public
 * 
 */
sap.m.SelectDialog.prototype.getGrowingThreshold = function() { return 0; };

/**
 * 
 * Getter for aggregation <code>items</code>.<br/>
 * The items of the list shown in the search dialog. It is recommended to use a StandardListItem for the dialog but other combinations are also possible.
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for SelectDialog.
 * @return {sap.m.ListItemBase[]}
 * @public
 * 
 */
sap.m.SelectDialog.prototype.getItems = function() { return new Array(); };

/**
 * 
 * Getter for property <code>multiSelect</code>.
 * If on, the user can select several options from the list
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>multiSelect</code>
 * @public
 * 
 */
sap.m.SelectDialog.prototype.getMultiSelect = function() { return false; };

/**
 * 
 * Reflector for the internal List's no data text property
 * @overwrite
 * @public
 * @returns {string} the current no data text
 */
sap.m.SelectDialog.prototype.getNoDataText = function() { return ""; };

/**
 * 
 * Getter for property <code>rememberSelections</code>.
 * This flag controls whether the dialog clears the selection or not after the confirm event has been fired. When the dialog is opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true". When the dialog should reset the selection to allow for a new selection each time set it to "false".
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>rememberSelections</code>
 * @public
 * @since 1.18
 * 
 */
sap.m.SelectDialog.prototype.getRememberSelections = function() { return false; };

/**
 * 
 * Getter for property <code>title</code>.
 * The title text that appears in the dialog header
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.SelectDialog.prototype.getTitle = function() { return ""; };

/**
 * 
 * Checks for the provided <code>sap.m.ListItemBase</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ListItemBase}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.SelectDialog.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * 
 * Inserts a item into the aggregation named <code>items</code>.
 * @param {sap.m.ListItemBase}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.insertItem = function(oItem,iIndex) { return new sap.m.SelectDialog(); };

/**
 * 
 * Opens the internal dialog with a searchfield and a list.
 * @public
 * @param {string} sValue Value for the list search.
 * @returns {this} this pointer for chaining
 */
sap.m.SelectDialog.prototype.open = function(sValue) { return null; };

/**
 * 
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ListItemBase[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.SelectDialog.prototype.removeAllItems = function() { return new Array(); };

/**
 * 
 * Removes an item from the aggregation named <code>items</code>.
 * @param {int | string | sap.m.ListItemBase} vItem the item to remove or its index or id
 * @return {sap.m.ListItemBase} the removed item or null
 * @public
 * 
 */
sap.m.SelectDialog.prototype.removeItem = function(vItem) { return new sap.m.ListItemBase(); };

/**
 * 
 * Reflector for the internal Dialog's contentWidth property
 * @param {sap.ui.core.CSSSize} sWidth the new content width value for the dialog
 * @public
 * @overwrite
 * @returns {this} this pointer for chaining
 */
sap.m.SelectDialog.prototype.setContentWidth = function(sWidth) { return null; };

/**
 * 
 * Sets the growing threshold to the internal list
 * @public
 * @param {int} iValue Value for the list's growing threshold.
 * @returns {this} this pointer for chaining
 */
sap.m.SelectDialog.prototype.setGrowingThreshold = function(iValue) { return null; };

/**
 * 
 * Enable/Disable multi selection mode.
 * @overwrite
 * @public
 * @param {boole} bMulti flag for multi selection mode
 * @returns {this} this pointer for chaining
 */
sap.m.SelectDialog.prototype.setMultiSelect = function(bMulti) { return null; };

/**
 * 
 * Reflector for the internal List's no data text property
 * @overwrite
 * @public
 * @param {string} sNoDataText the no data text for the list
 * @returns {this} this pointer for chaining
 */
sap.m.SelectDialog.prototype.setNoDataText = function(sNoDataText) { return null; };

/**
 * 
 * Setter for property <code>rememberSelections</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bRememberSelections  new value for property <code>rememberSelections</code>
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.18
 * 
 */
sap.m.SelectDialog.prototype.setRememberSelections = function(bRememberSelections) { return new sap.m.SelectDialog(); };

/**
 * 
 * Set the title of the internal dialog
 * @overwrite
 * @public
 * @param {string} sTitle the title text for the dialog
 * @returns {this} this pointer for chaining
 */
sap.m.SelectDialog.prototype.setTitle = function(sTitle) { return null; };


// ---- sap.m.SelectType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.SelectType.toString = function() { return ""; };

// ---- sap.m.Shell --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new Shell.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getLogo logo} : sap.ui.core.URI</li>
 * <li>{@link #getShowLogout showLogout} : boolean (default: true)</li>
 * <li>{@link #getHeaderRightText headerRightText} : string</li>
 * <li>{@link #getAppWidthLimited appWidthLimited} : boolean (default: true)</li>
 * <li>{@link #getBackgroundColor backgroundColor} : sap.ui.core.CSSColor</li>
 * <li>{@link #getBackgroundImage backgroundImage} : sap.ui.core.URI</li>
 * <li>{@link #getBackgroundRepeat backgroundRepeat} : boolean (default: false)</li>
 * <li>{@link #getBackgroundOpacity backgroundOpacity} : float (default: 1)</li>
 * <li>{@link #getHomeIcon homeIcon} : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getApp app} <strong>(default aggregation)</strong> : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Shell#event:logout logout} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The Shell control can be used as root element of applications, it can contain an App or SplitApp control.
 * The Shell provides some overarching functionality for the overall application and takes care of visual adaptation, like a frame around the App, on desktop browser platforms.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.12
 * 
 */
sap.m.Shell = function(sId,mSettings) {};
/**
 * 
 * Fired when the user presses the logout button/link. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.Shell.prototype.logout = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'logout' event of this <code>sap.m.Shell</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Shell</code>.<br/> itself. 
 * </p><p>
 * Fired when the user presses the logout button/link. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Shell</code>.<br/> itself.
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Shell.prototype.attachLogout = function(oData,fnFunction,oListener) { return new sap.m.Shell(); };

/**
 * 
 * Destroys the app in the aggregation 
 * named <code>app</code>.
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Shell.prototype.destroyApp = function() { return new sap.m.Shell(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'logout' event of this <code>sap.m.Shell</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Shell.prototype.detachLogout = function(fnFunction,oListener) { return new sap.m.Shell(); };

/**
 * 
 * Creates a new subclass of class sap.m.Shell with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Shell.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event logout to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Shell.prototype.fireLogout = function(mArguments) { return new sap.m.Shell(); };

/**
 * 
 * Getter for aggregation <code>app</code>.<br/>
 * A Shell contains an App or a SplitApp (they may be wrapped in a View). Other control types are not allowed.
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for Shell.
 * @return {sap.ui.core.Control}
 * @public
 * 
 */
sap.m.Shell.prototype.getApp = function() { return new sap.ui.core.Control(); };

/**
 * 
 * Getter for property <code>appWidthLimited</code>.
 * Whether the width of the content (the aggregated app) should be limited or extend to the full screen width.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>appWidthLimited</code>
 * @public
 * 
 */
sap.m.Shell.prototype.getAppWidthLimited = function() { return false; };

/**
 * 
 * Getter for property <code>backgroundColor</code>.
 * Background color of the Shell. If set, this color will override the default background defined by the theme. So this should only be set when really required.
 * Any configured background image will be placed above this colored background.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSColor} the value of property <code>backgroundColor</code>
 * @public
 * @since 1.11.2
 * 
 */
sap.m.Shell.prototype.getBackgroundColor = function() { return new sap.ui.core.CSSColor(); };

/**
 * 
 * Getter for property <code>backgroundImage</code>.
 * Background image of the Shell. If set, this image will override the default background defined by the theme. So this should only be set when really required.
 * This background image will be placed above any color set for the background.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>backgroundImage</code>
 * @public
 * @since 1.11.2
 * 
 */
sap.m.Shell.prototype.getBackgroundImage = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>backgroundOpacity</code>.
 * Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
 * This can be used to improve readability of the shell content by making the background image partly transparent.
 * </p><p>
 * Default value is <code>1</code>
 * @return {float} the value of property <code>backgroundOpacity</code>
 * @public
 * @since 1.11.2
 * 
 */
sap.m.Shell.prototype.getBackgroundOpacity = function() { return 0.0; };

/**
 * 
 * Getter for property <code>backgroundRepeat</code>.
 * Whether the background image (if configured) should be proportionally stretched to cover the whole Shell (false, default) or whether it should be tiled (true).
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>backgroundRepeat</code>
 * @public
 * @since 1.11.2
 * 
 */
sap.m.Shell.prototype.getBackgroundRepeat = function() { return false; };

/**
 * 
 * Getter for property <code>headerRightText</code>.
 * A text, like the name of the logged-in user, which should be displayed on the right side of the header (if there is enough space to display the header at all - this only happens on very tall screens (1568px height), otherwise it is always hidden.).
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>headerRightText</code>
 * @public
 * 
 */
sap.m.Shell.prototype.getHeaderRightText = function() { return ""; };

/**
 * 
 * Getter for property <code>homeIcon</code>.
 * Sets the icon used for the mobile device home screen and the icon to be used for bookmarks by desktop browsers.
 * </p><p>
 * This property should be only set once and as early as possible. Subsequent calls replace the previous icon settings and may lead to different behavior depending on the browser.
 * </p><p>
 * Different image sizes for device home screen need to be given as PNG images, an ICO file needs to be given as desktop browser bookmark icon (other file formats may not work in all browsers).
 * The "precomposed" flag defines whether there is already a glow effect contained in the home screen images (or whether iOS should add such an effect). The given structure could look like this:
 * {
 * 'phone':'phone-icon_57x57.png',
 * 'phone@2':'phone-retina_114x114.png',
 * 'tablet':'tablet-icon_72x72.png',
 * 'tablet@2':'tablet-retina_144x144.png',
 * 'precomposed':true,
 * 'favicon':'favicon.ico'
 * }
 * </p><p>
 * See jQuery.sap.setIcons() for full documentation.
 * </p><p>
 * </p><p>
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {object} the value of property <code>homeIcon</code>
 * @public
 * 
 */
sap.m.Shell.prototype.getHomeIcon = function() { return new Object(); };

/**
 * 
 * Getter for property <code>logo</code>.
 * A logo to be displayed next to the app when the screen is sufficiently large.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>logo</code>
 * @public
 * 
 */
sap.m.Shell.prototype.getLogo = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>showLogout</code>.
 * Whether the Logout button should be displayed. This currently only happens on very tall screens (1568px height), otherwise it is always hidden.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showLogout</code>
 * @public
 * 
 */
sap.m.Shell.prototype.getShowLogout = function() { return false; };

/**
 * 
 * Getter for property <code>title</code>.
 * The application title which may or may not be displayed outside the actual application, depending on the available screen size.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.Shell.prototype.getTitle = function() { return ""; };

/**
 * 
 * Setter for the aggregated <code>app</code>.
 * @param {sap.ui.core.Control} oApp
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Shell.prototype.setApp = function(oApp) { return new sap.m.Shell(); };

/**
 * 
 * Setter for property <code>appWidthLimited</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bAppWidthLimited  new value for property <code>appWidthLimited</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Shell.prototype.setAppWidthLimited = function(bAppWidthLimited) { return new sap.m.Shell(); };

/**
 * 
 * Setter for property <code>backgroundColor</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSColor} sBackgroundColor  new value for property <code>backgroundColor</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * 
 */
sap.m.Shell.prototype.setBackgroundColor = function(sBackgroundColor) { return new sap.m.Shell(); };

/**
 * 
 * Setter for property <code>backgroundImage</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sBackgroundImage  new value for property <code>backgroundImage</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * 
 */
sap.m.Shell.prototype.setBackgroundImage = function(sBackgroundImage) { return new sap.m.Shell(); };

/**
 * 
 * Setter for property <code>backgroundOpacity</code>.
 * </p><p>
 * Default value is <code>1</code> 
 * @param {float} fBackgroundOpacity  new value for property <code>backgroundOpacity</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * 
 */
sap.m.Shell.prototype.setBackgroundOpacity = function(fBackgroundOpacity) { return new sap.m.Shell(); };

/**
 * 
 * Setter for property <code>backgroundRepeat</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bBackgroundRepeat  new value for property <code>backgroundRepeat</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * 
 */
sap.m.Shell.prototype.setBackgroundRepeat = function(bBackgroundRepeat) { return new sap.m.Shell(); };

/**
 * 
 * Setter for property <code>headerRightText</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sHeaderRightText  new value for property <code>headerRightText</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Shell.prototype.setHeaderRightText = function(sHeaderRightText) { return new sap.m.Shell(); };

/**
 * 
 * Setter for property <code>homeIcon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {object} oHomeIcon  new value for property <code>homeIcon</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Shell.prototype.setHomeIcon = function(oHomeIcon) { return new sap.m.Shell(); };

/**
 * 
 * Setter for property <code>logo</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sLogo  new value for property <code>logo</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Shell.prototype.setLogo = function(sLogo) { return new sap.m.Shell(); };

/**
 * 
 * Setter for property <code>showLogout</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bShowLogout  new value for property <code>showLogout</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Shell.prototype.setShowLogout = function(bShowLogout) { return new sap.m.Shell(); };

/**
 * 
 * Setter for property <code>title</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Shell.prototype.setTitle = function(sTitle) { return new sap.m.Shell(); };


// ---- sap.m.Slider --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new Slider.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getMin min} : float (default: 0)</li>
 * <li>{@link #getMax max} : float (default: 100)</li>
 * <li>{@link #getStep step} : float (default: 1)</li>
 * <li>{@link #getProgress progress} : boolean (default: true)</li>
 * <li>{@link #getValue value} : float (default: 0)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Slider#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Slider#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A slider is a user interface control that enables the user to adjust values in a specified numerical range.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.Slider = function(sId,mSettings) {};
/**
 * 
 * This event is triggered after the end user finishes interacting, if there is any change. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {float} oControlEvent.getParameters.value The current value of the slider after a change.
 * @public
 */
sap.m.Slider.prototype.change = function(oControlEvent) { return null; };

/**
 * 
 * This event is triggered during the dragging period, each time the slider value changes. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {float} oControlEvent.getParameters.value The current value of the slider after a live change.
 * @public
 */
sap.m.Slider.prototype.liveChange = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.Slider</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Slider</code>.<br/> itself. 
 * </p><p>
 * This event is triggered after the end user finishes interacting, if there is any change. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Slider</code>.<br/> itself.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.Slider(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.Slider</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Slider</code>.<br/> itself. 
 * </p><p>
 * This event is triggered during the dragging period, each time the slider value changes. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Slider</code>.<br/> itself.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.attachLiveChange = function(oData,fnFunction,oListener) { return new sap.m.Slider(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.Slider</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.Slider(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.Slider</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.detachLiveChange = function(fnFunction,oListener) { return new sap.m.Slider(); };

/**
 * 
 * Creates a new subclass of class sap.m.Slider with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Slider.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event change to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>float</code> The current value of the slider after a change.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Slider.prototype.fireChange = function(mArguments) { return new sap.m.Slider(); };

/**
 * 
 * Fire event liveChange to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>float</code> The current value of the slider after a live change.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Slider.prototype.fireLiveChange = function(mArguments) { return new sap.m.Slider(); };

/**
 * 
 * Getter for property <code>enabled</code>.
 * Determines whether the user can change the slider value.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.Slider.prototype.getEnabled = function() { return false; };

/**
 * 
 * Getter for property <code>max</code>.
 * The maximum value of the slider.
 * </p><p>
 * Default value is <code>100</code>
 * @return {float} the value of property <code>max</code>
 * @public
 * 
 */
sap.m.Slider.prototype.getMax = function() { return 0.0; };

/**
 * 
 * Getter for property <code>min</code>.
 * The minimum value of the slider.
 * </p><p>
 * Default value is <code>0</code>
 * @return {float} the value of property <code>min</code>
 * @public
 * 
 */
sap.m.Slider.prototype.getMin = function() { return 0.0; };

/**
 * 
 * Getter for property <code>name</code>.
 * The name property to be used in the HTML code for the slider (e.g. for HTML forms that send data to the server via submit).
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>name</code>
 * @public
 * 
 */
sap.m.Slider.prototype.getName = function() { return ""; };

/**
 * 
 * Getter for property <code>progress</code>.
 * Show a progress bar indicator.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>progress</code>
 * @public
 * 
 */
sap.m.Slider.prototype.getProgress = function() { return false; };

/**
 * 
 * Getter for property <code>step</code>.
 * Define the amount of units to change the slider when adjusting by drag and drop.
 * </p><p>
 * Defines the size of the slider's selection intervals. (e.g. min = 0, max = 10, step = 5 would result in possible selection of the values 0, 5, 10, 15, 20).
 * </p><p>
 * The step must be positive, if a negative number is provided, the default value will be used instead.
 * If the width of the slider converted to pixels is less than the range (max – min), the value will be rounded to multiples of the step size.
 * </p><p>
 * Default value is <code>1</code>
 * @return {float} the value of property <code>step</code>
 * @public
 * 
 */
sap.m.Slider.prototype.getStep = function() { return 0.0; };

/**
 * 
 * Getter for property <code>value</code>.
 * Define the value of the slider.
 * </p><p>
 * If the value is lower/higher than the allowed minimum/maximum, the value of the properties "min"/"max" are used instead.
 * </p><p>
 * Default value is <code>0</code>
 * @return {float} the value of property <code>value</code>
 * @public
 * 
 */
sap.m.Slider.prototype.getValue = function() { return 0.0; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Determines whether the slider is visible. Invisible controls are not rendered.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.Slider.prototype.getVisible = function() { return false; };

/**
 * 
 * Getter for property <code>width</code>.
 * Defines the width of the slider, this value can be provided in %, em, px… and all possible CSS units.
 * </p><p>
 * Default value is <code>100%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.Slider.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Setter for property <code>enabled</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.setEnabled = function(bEnabled) { return new sap.m.Slider(); };

/**
 * 
 * Setter for property <code>max</code>.
 * </p><p>
 * Default value is <code>100</code> 
 * @param {float} fMax  new value for property <code>max</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.setMax = function(fMax) { return new sap.m.Slider(); };

/**
 * 
 * Setter for property <code>min</code>.
 * </p><p>
 * Default value is <code>0</code> 
 * @param {float} fMin  new value for property <code>min</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.setMin = function(fMin) { return new sap.m.Slider(); };

/**
 * 
 * Setter for property <code>name</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.setName = function(sName) { return new sap.m.Slider(); };

/**
 * 
 * Setter for property <code>progress</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bProgress  new value for property <code>progress</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.setProgress = function(bProgress) { return new sap.m.Slider(); };

/**
 * 
 * Setter for property <code>step</code>.
 * </p><p>
 * Default value is <code>1</code> 
 * @param {float} fStep  new value for property <code>step</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.setStep = function(fStep) { return new sap.m.Slider(); };

/**
 * 
 * Setter for property <code>value</code>.
 * </p><p>
 * Default value is <code>0</code>.
 * @param {float} fValue new value for property <code>value</code>.
 * @returns {sap.m.Slider} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.Slider.prototype.setValue = function(fValue) { return new sap.m.Slider(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.setVisible = function(bVisible) { return new sap.m.Slider(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is <code>100%</code> 
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.setWidth = function(sWidth) { return new sap.m.Slider(); };

/**
 * 
 * Decrements the slider value by multiplying the step the <code>step</code> with the given parameter.
 * @param {int} [iStep=1] The number of steps the slider goes down.
 * @returns {sap.m.Slider} <code>this</code> to allow method chaining.
 * @type sap.m.Slider
 * @public
 */
sap.m.Slider.prototype.stepDown = function(iStep) { return new sap.m.Slider(); };

/**
 * 
 * Increments the slider value by multiplying the <code>step</code> with the given parameter.
 * @param {int} [iStep=1] The number of steps the slider goes up.
 * @returns {sap.m.Slider} <code>this</code> to allow method chaining.
 * @type sap.m.Slider
 * @public
 */
sap.m.Slider.prototype.stepUp = function(iStep) { return new sap.m.Slider(); };


// ---- sap.m.SplitApp --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new SplitApp.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHomeIcon homeIcon} : any</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.SplitApp#event:orientationChange orientationChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.SplitContainer#constructor sap.m.SplitContainer}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * SplitApp is another root element of a UI5 mobile application besides App control. It maintains two NavContainers if runs in tablet and one NavContainer in phone. The display of master NavContainer depends on the portrait/landscape of the device and the mode of SplitApp.
 * @extends sap.m.SplitContainer
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.SplitApp = function(sId,mSettings) {};
/**
 * 
 * This event will be fired when orientation (portrait/landscape) is changed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.landscape Returns true if the device is in landscape.
 * @public
 */
sap.m.SplitApp.prototype.orientationChange = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'orientationChange' event of this <code>sap.m.SplitApp</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitApp</code>.<br/> itself. 
 * </p><p>
 * This event will be fired when orientation (portrait/landscape) is changed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitApp</code>.<br/> itself.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitApp.prototype.attachOrientationChange = function(oData,fnFunction,oListener) { return new sap.m.SplitApp(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'orientationChange' event of this <code>sap.m.SplitApp</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitApp.prototype.detachOrientationChange = function(fnFunction,oListener) { return new sap.m.SplitApp(); };

/**
 * 
 * Creates a new subclass of class sap.m.SplitApp with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.SplitApp.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event orientationChange to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'landscape' of type <code>boolean</code> Returns true if the device is in landscape.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SplitApp.prototype.fireOrientationChange = function(mArguments) { return new sap.m.SplitApp(); };

/**
 * 
 * Getter for property <code>homeIcon</code>.
 * The icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
 * </p><p>
 * Note that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.
 * </p><p>
 * This icon must be in PNG format. The property can either hold the URL of one single icon which is used for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the different required sizes.
 * </p><p>
 * A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting because the file can contain different images for different resolutions.
 * </p><p>
 * One example is:
 * </p><p>
 * app.setHomeIcon({
 * 'phone':'phone-icon.png',
 * 'phone@2':'phone-retina.png',
 * 'tablet':'tablet-icon.png',
 * 'tablet@2':'tablet-retina.png',
 * 'icon':'desktop.ico'
 * });
 * </p><p>
 * The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet.
 * If an object is given but one of the sizes is not given, the largest given icon will be used for this size.
 * </p><p>
 * On Android these icons may or may not be used by the device. Apparently chances can be improved by adding glare effect and rounded corners, setting the file name so it ends with "-precomposed.png" and setting the "homeIconPrecomposed" property to "true".
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {any} the value of property <code>homeIcon</code>
 * @public
 * 
 */
sap.m.SplitApp.prototype.getHomeIcon = function() { return null; };

/**
 * 
 * Setter for property <code>homeIcon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {any} oHomeIcon  new value for property <code>homeIcon</code>
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitApp.prototype.setHomeIcon = function(oHomeIcon) { return new sap.m.SplitApp(); };


// ---- sap.m.SplitAppMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.SplitAppMode.toString = function() { return ""; };

// ---- sap.m.SplitContainer --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new SplitContainer.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDefaultTransitionNameDetail defaultTransitionNameDetail} : string (default: "slide")</li>
 * <li>{@link #getDefaultTransitionNameMaster defaultTransitionNameMaster} : string (default: "slide")</li>
 * <li>{@link #getMode mode} : sap.m.SplitAppMode (default: sap.m.SplitAppMode.ShowHideMode)</li>
 * <li>{@link #getMasterButtonText masterButtonText} : string</li>
 * <li>{@link #getBackgroundColor backgroundColor} : string</li>
 * <li>{@link #getBackgroundImage backgroundImage} : sap.ui.core.URI</li>
 * <li>{@link #getBackgroundRepeat backgroundRepeat} : boolean (default: false)</li>
 * <li>{@link #getBackgroundOpacity backgroundOpacity} : float (default: 1)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getMasterPages masterPages} : sap.ui.core.Control[]</li>
 * <li>{@link #getDetailPages detailPages} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getInitialDetail initialDetail} : string | sap.ui.core.Control</li>
 * <li>{@link #getInitialMaster initialMaster} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.SplitContainer#event:masterNavigate masterNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitContainer#event:afterMasterNavigate afterMasterNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitContainer#event:masterButton masterButton} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitContainer#event:beforeMasterOpen beforeMasterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitContainer#event:afterMasterOpen afterMasterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitContainer#event:beforeMasterClose beforeMasterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitContainer#event:afterMasterClose afterMasterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitContainer#event:detailNavigate detailNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitContainer#event:afterDetailNavigate afterDetailNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * SplitContainer maintains two NavContainers if runs in tablet and one NavContainer in phone. The display of master NavContainer depends on the portrait/landscape of the device and the mode of SplitContainer.
 * </p><p>
 * This control must be rendered as a full screen control in order to make the show/hide master area work properly.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.SplitContainer = function(sId,mSettings) {};
/**
 * 
 * The event is fired when navigation between two pages in detail area has completed. In case of animated transitions this event is fired with some delay after the "navigate" event. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which had been shown before navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which had been shown before navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which is now shown after navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which is now shown after navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether was a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this was a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 */
sap.m.SplitContainer.prototype.afterDetailNavigate = function(oControlEvent) { return null; };

/**
 * 
 * This event is fired when the master area is fully closed after the animation when there is. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.SplitContainer.prototype.afterMasterClose = function(oControlEvent) { return null; };

/**
 * 
 * The event is fired when navigation between two pages in master area has completed. In case of animated transitions this event is fired with some delay after the "navigate" event. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which had been shown before navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which had been shown before navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which is now shown after navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which is now shown after navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether was a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this was a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 */
sap.m.SplitContainer.prototype.afterMasterNavigate = function(oControlEvent) { return null; };

/**
 * 
 * This event is fired when the master area is fully opened after animation if there is. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.SplitContainer.prototype.afterMasterOpen = function(oControlEvent) { return null; };

/**
 * 
 * This event is fired before the master area is closed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.SplitContainer.prototype.beforeMasterClose = function(oControlEvent) { return null; };

/**
 * 
 * This event is fired before the master area is opened. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.SplitContainer.prototype.beforeMasterOpen = function(oControlEvent) { return null; };

/**
 * 
 * The event is fired when navigation between two pages in detail area has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which was shown before the current navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which was shown before the current navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which will be shown after the current navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which will be shown after the current navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether this is a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this is a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this is a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 */
sap.m.SplitContainer.prototype.detailNavigate = function(oControlEvent) { return null; };

/**
 * 
 * Event gets triggered when a Master Button needs to be shown or hidden. This is necessary for custom headers when the SplitContainer control does not handle the placement of the master button automatically. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.SplitContainer.prototype.masterButton = function(oControlEvent) { return null; };

/**
 * 
 * The event is fired when navigation between two pages in master area has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which was shown before the current navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which was shown before the current navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which will be shown after the current navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which will be shown after the current navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether this is a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this is a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this is a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 */
sap.m.SplitContainer.prototype.masterNavigate = function(oControlEvent) { return null; };

/**
 * 
 * Adds some detailPage <code>oDetailPage</code> 
 * to the aggregation named <code>detailPages</code>.
 * @param {sap.ui.core.Control}
 *            oDetailPage the detailPage to add; if empty, nothing is inserted
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.addDetailPage = function(oDetailPage) { return new sap.m.SplitContainer(); };

/**
 * 
 * Adds some masterPage <code>oMasterPage</code> 
 * to the aggregation named <code>masterPages</code>.
 * @param {sap.ui.core.Control}
 *            oMasterPage the masterPage to add; if empty, nothing is inserted
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.addMasterPage = function(oMasterPage) { return new sap.m.SplitContainer(); };

/**
 * 
 * Add a content entity either to master area or detail area depending on the master parameter.
 * </p><p>
 * This method is provided mainly for providing API consistency between sap.m.SplitContainer and sap.m.App. So that the same code line can be reused.
 * @param {sap.ui.core.Control} 
 *         oPage
 *         The content entities between which this SplitContainer navigates in either master area or detail area depending on the master parameter. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
 * @param {boolean} 
 *         bMaster
 *         States if the page should be added to the master area. If it's set to false, the page is added to detail area.
 * @type sap.m.SplitContainer
 * @public
 * @since 1.11.1
 */
sap.m.SplitContainer.prototype.addPage = function(oPage,bMaster) { return new sap.m.SplitContainer(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'afterDetailNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. 
 * </p><p>
 * The event is fired when navigation between two pages in detail area has completed. In case of animated transitions this event is fired with some delay after the "navigate" event. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachAfterDetailNavigate = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'afterMasterClose' event of this <code>sap.m.SplitContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. 
 * </p><p>
 * This event is fired when the master area is fully closed after the animation when there is. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachAfterMasterClose = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'afterMasterNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. 
 * </p><p>
 * The event is fired when navigation between two pages in master area has completed. In case of animated transitions this event is fired with some delay after the "navigate" event. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachAfterMasterNavigate = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'afterMasterOpen' event of this <code>sap.m.SplitContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. 
 * </p><p>
 * This event is fired when the master area is fully opened after animation if there is. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachAfterMasterOpen = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'beforeMasterClose' event of this <code>sap.m.SplitContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. 
 * </p><p>
 * This event is fired before the master area is closed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachBeforeMasterClose = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'beforeMasterOpen' event of this <code>sap.m.SplitContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. 
 * </p><p>
 * This event is fired before the master area is opened. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachBeforeMasterOpen = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'detailNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. 
 * </p><p>
 * The event is fired when navigation between two pages in detail area has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachDetailNavigate = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'masterButton' event of this <code>sap.m.SplitContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. 
 * </p><p>
 * Event gets triggered when a Master Button needs to be shown or hidden. This is necessary for custom headers when the SplitContainer control does not handle the placement of the master button automatically. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachMasterButton = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'masterNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. 
 * </p><p>
 * The event is fired when navigation between two pages in master area has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachMasterNavigate = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * 
 * navigate back within DetailView
 * @param {object} 
 *         oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * </p><p>
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * </p><p>
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameter
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * </p><p>
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * </p><p>
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.m.SplitContainer
 * @public
 */
sap.m.SplitContainer.prototype.backDetail = function(oBackData,oTransitionParameter) { return new sap.m.SplitContainer(); };

/**
 * 
 * navigate back within MasterView
 * @param {object} 
 *         oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * </p><p>
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * </p><p>
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameter
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * </p><p>
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * </p><p>
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.m.SplitContainer
 * @public
 */
sap.m.SplitContainer.prototype.backMaster = function(oBackData,oTransitionParameter) { return new sap.m.SplitContainer(); };

/**
 * 
 * Navigates back to the nearest previous page in the SplitContainer history with the given ID. If there is no such page among the previous pages, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 * </p><p>
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the SplitContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property. The original "data" object from the "to" navigation is also available in these event objects.
 * @param {string} 
 *         sPageId
 *         The screen to which drilldown should happen. The ID or the control itself can be given.
 * @param {object} 
 *         oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * </p><p>
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * </p><p>
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * </p><p>
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * </p><p>
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.m.SplitContainer
 * @public
 * @since 1.10.0
 */
sap.m.SplitContainer.prototype.backToPage = function(sPageId,oBackData,oTransitionParameters) { return new sap.m.SplitContainer(); };

/**
 * 
 * Navigates back to the initial/top level of Detail (this is the element aggregated as "initialPage", or the first added element). If already on the initial page, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 * @param {object} 
 *         oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * </p><p>
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * </p><p>
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameter
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * </p><p>
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * </p><p>
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.ui.core.Control
 * @public
 */
sap.m.SplitContainer.prototype.backToTopDetail = function(oBackData,oTransitionParameter) { return new sap.ui.core.Control(); };

/**
 * 
 * Navigates back to the initial/top level of Master (this is the element aggregated as "initialPage", or the first added element). If already on the initial page, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 * @param {object} 
 *         oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * </p><p>
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * </p><p>
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameter
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * </p><p>
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * </p><p>
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.ui.core.Control
 * @public
 */
sap.m.SplitContainer.prototype.backToTopMaster = function(oBackData,oTransitionParameter) { return new sap.ui.core.Control(); };

/**
 * 
 * Destroys all the detailPages in the aggregation 
 * named <code>detailPages</code>.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.destroyDetailPages = function() { return new sap.m.SplitContainer(); };

/**
 * 
 * Destroys all the masterPages in the aggregation 
 * named <code>masterPages</code>.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.destroyMasterPages = function() { return new sap.m.SplitContainer(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'afterDetailNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachAfterDetailNavigate = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'afterMasterClose' event of this <code>sap.m.SplitContainer</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachAfterMasterClose = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'afterMasterNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachAfterMasterNavigate = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'afterMasterOpen' event of this <code>sap.m.SplitContainer</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachAfterMasterOpen = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'beforeMasterClose' event of this <code>sap.m.SplitContainer</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachBeforeMasterClose = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'beforeMasterOpen' event of this <code>sap.m.SplitContainer</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachBeforeMasterOpen = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'detailNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachDetailNavigate = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'masterButton' event of this <code>sap.m.SplitContainer</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachMasterButton = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'masterNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachMasterNavigate = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * 
 * Creates a new subclass of class sap.m.SplitContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.SplitContainer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event afterDetailNavigate to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code> The page which had been shown before navigation.</li>
 * <li>'fromId' of type <code>string</code> The ID of the page which had been shown before navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code> The page which is now shown after navigation.</li>
 * <li>'toId' of type <code>string</code> The ID of the page which is now shown after navigation.</li>
 * <li>'firstTime' of type <code>boolean</code> Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code> Whether was a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code> Whether this was a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code> How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireAfterDetailNavigate = function(mArguments) { return new sap.m.SplitContainer(); };

/**
 * 
 * Fire event afterMasterClose to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireAfterMasterClose = function(mArguments) { return new sap.m.SplitContainer(); };

/**
 * 
 * Fire event afterMasterNavigate to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code> The page which had been shown before navigation.</li>
 * <li>'fromId' of type <code>string</code> The ID of the page which had been shown before navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code> The page which is now shown after navigation.</li>
 * <li>'toId' of type <code>string</code> The ID of the page which is now shown after navigation.</li>
 * <li>'firstTime' of type <code>boolean</code> Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code> Whether was a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code> Whether this was a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code> How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireAfterMasterNavigate = function(mArguments) { return new sap.m.SplitContainer(); };

/**
 * 
 * Fire event afterMasterOpen to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireAfterMasterOpen = function(mArguments) { return new sap.m.SplitContainer(); };

/**
 * 
 * Fire event beforeMasterClose to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireBeforeMasterClose = function(mArguments) { return new sap.m.SplitContainer(); };

/**
 * 
 * Fire event beforeMasterOpen to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireBeforeMasterOpen = function(mArguments) { return new sap.m.SplitContainer(); };

/**
 * 
 * Fire event detailNavigate to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code> The page which was shown before the current navigation.</li>
 * <li>'fromId' of type <code>string</code> The ID of the page which was shown before the current navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code> The page which will be shown after the current navigation.</li>
 * <li>'toId' of type <code>string</code> The ID of the page which will be shown after the current navigation.</li>
 * <li>'firstTime' of type <code>boolean</code> Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code> Whether this is a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code> Whether this is a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code> Whether this is a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code> How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireDetailNavigate = function(mArguments) { return new sap.m.SplitContainer(); };

/**
 * 
 * Fire event masterButton to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireMasterButton = function(mArguments) { return new sap.m.SplitContainer(); };

/**
 * 
 * Fire event masterNavigate to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code> The page which was shown before the current navigation.</li>
 * <li>'fromId' of type <code>string</code> The ID of the page which was shown before the current navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code> The page which will be shown after the current navigation.</li>
 * <li>'toId' of type <code>string</code> The ID of the page which will be shown after the current navigation.</li>
 * <li>'firstTime' of type <code>boolean</code> Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code> Whether this is a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code> Whether this is a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code> Whether this is a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code> How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireMasterNavigate = function(mArguments) { return new sap.m.SplitContainer(); };

/**
 * 
 * Getter for property <code>backgroundColor</code>.
 * Background color of the SplitContainer. If set, this color will override the default background defined by the theme. So this should only be set when really required.
 * Any configured background image will be placed above this colored background. But any theme adaptation in the Theme Designer will override this setting.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete SplitContainer or whether it should be tiled.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>backgroundColor</code>
 * @public
 * @since 1.11.2
 * 
 */
sap.m.SplitContainer.prototype.getBackgroundColor = function() { return ""; };

/**
 * 
 * Getter for property <code>backgroundImage</code>.
 * Background image of the SplitContainer. If set, this image will override the default background defined by the theme. So this should only be set when really required.
 * This background image will be placed above any color set for the background. But any theme adaptation in the Theme Designer will override this image setting.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete SplitContainer or whether it should be tiled.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>backgroundImage</code>
 * @public
 * @since 1.11.2
 * 
 */
sap.m.SplitContainer.prototype.getBackgroundImage = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>backgroundOpacity</code>.
 * Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
 * This can be used to make the application content better readable by making the background image partly transparent.
 * </p><p>
 * Default value is <code>1</code>
 * @return {float} the value of property <code>backgroundOpacity</code>
 * @public
 * @since 1.11.2
 * 
 */
sap.m.SplitContainer.prototype.getBackgroundOpacity = function() { return 0.0; };

/**
 * 
 * Getter for property <code>backgroundRepeat</code>.
 * Whether the background image (if configured) should be proportionally stretched to cover the whole SplitContainer (false) or whether it should be tiled (true).
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>backgroundRepeat</code>
 * @public
 * @since 1.11.2
 * 
 */
sap.m.SplitContainer.prototype.getBackgroundRepeat = function() { return false; };

/**
 * 
 * Returns the current shown detail page.
 * @type sap.ui.core.Control
 * @public
 */
sap.m.SplitContainer.prototype.getCurrentDetailPage = function() { return new sap.ui.core.Control(); };

/**
 * 
 * Returns the current shown master page.
 * @type sap.ui.core.Control
 * @public
 */
sap.m.SplitContainer.prototype.getCurrentMasterPage = function() { return new sap.ui.core.Control(); };

/**
 * 
 * Returns the current shown page either in master area or in detail area. When the parameter is set to true, the current page in master area is returned. Otherwise the current page in detail area is returned.
 * </p><p>
 * This method is provided mainly for providing API consistency between sap.m.SplitContainer and sap.m.App. So that the same code line can be reused.
 * @param {boolean} 
 *         bMaster
 *         States if this function returns the current page in master area. If it's set to false, the current page in detail area will be returned.
 * @type sap.ui.core.Control
 * @public
 * @since 1.11.1
 */
sap.m.SplitContainer.prototype.getCurrentPage = function(bMaster) { return new sap.ui.core.Control(); };

/**
 * 
 * Getter for property <code>defaultTransitionNameDetail</code>.
 * The type of the transition/animation to apply when "to()" is called without defining the transition to use. The default is "slide", other options are: "fade" and "show" and the names of any registered custom transitions.
 * </p><p>
 * Default value is <code>"slide"</code>
 * @return {string} the value of property <code>defaultTransitionNameDetail</code>
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getDefaultTransitionNameDetail = function() { return ""; };

/**
 * 
 * Getter for property <code>defaultTransitionNameMaster</code>.
 * The type of the transition/animation to apply when "to()" is called without defining the transition to use. The default is "slide", other options are: "fade" and "show" and the names of any registered custom transitions.
 * </p><p>
 * Default value is <code>"slide"</code>
 * @return {string} the value of property <code>defaultTransitionNameMaster</code>
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getDefaultTransitionNameMaster = function() { return ""; };

/**
 * 
 * Returns the page with the given id in detail area. If there's no page that has the given id, null is returned.
 * @param {string} 
 *         sId
 *         The id of the page that needs to be fetched.
 * @type sap.ui.core.Control
 * @public
 * @since 1.11.1
 */
sap.m.SplitContainer.prototype.getDetailPage = function(sId) { return new sap.ui.core.Control(); };

/**
 * 
 * Getter for aggregation <code>detailPages</code>.<br/>
 * The content entities between which this SplitContainer navigates in detail area. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
 * </p><p>
 * These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getDetailPages = function() { return new Array(); };

/**
 * 
 * Sets the initial detail page, which is shown on application launch.
 * @return {string} Id of the element which is the current target of the <code>initialDetail</code> association, or null
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getInitialDetail = function() { return ""; };

/**
 * 
 * Sets the initial master page, which is shown on application launch.
 * @return {string} Id of the element which is the current target of the <code>initialMaster</code> association, or null
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getInitialMaster = function() { return ""; };

/**
 * 
 * Getter for property <code>masterButtonText</code>.
 * This is the text shown in master button which has a default value "Navigation". This text is only shown in iOS platform and the icon from the current page in detail area is shown in the master button in the other platfroms.
 * </p><p>
 * The master button is shown/hidden depending on the orientation of device and also whether the master area is open or not. SplitContainer manages the show/hide of master button by itself only when the page added to detail area are sap.m.Page with built-in header or sap.m.Page with built-in header which is wrapped by one or several sap.ui.core.mvc.View. Otherwise the show/hide of master button needs to be managed by the application.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>masterButtonText</code>
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getMasterButtonText = function() { return ""; };

/**
 * 
 * Returns the page with the given id in master area. If there's no page that has the given id, null is returned.
 * @param {string} 
 *         sId
 *         The id of the page that needs to be fetched.
 * @type sap.ui.core.Control
 * @public
 * @since 1.11.1
 */
sap.m.SplitContainer.prototype.getMasterPage = function(sId) { return new sap.ui.core.Control(); };

/**
 * 
 * Getter for aggregation <code>masterPages</code>.<br/>
 * The content entities between which this SplitContainer navigates in master area. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
 * </p><p>
 * These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getMasterPages = function() { return new Array(); };

/**
 * 
 * Getter for property <code>mode</code>.
 * This mode defines whether the master page will always be shown (in portrait and in landscape)[StretchCompressMode], or if it should be hidden when in protrait mode [ShowHideMode]. Default is ShowHideMode
 * </p><p>
 * Default value is <code>ShowHideMode</code>
 * @return {sap.m.SplitAppMode} the value of property <code>mode</code>
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getMode = function() { return new sap.m.SplitAppMode(); };

/**
 * 
 * Returns the page with the given id from either master area or detail area depending on the master parameter. If there's no page that has the given id, null is returned.
 * @param {string} 
 *         sId
 *         The id of the page that needs to be fetched.
 * @param {boolean} 
 *         bMaster
 *         If the page with given id should be fetched from the master area. If it's set to false, the page will be fetched from detail area.
 * @type sap.ui.core.Control
 * @public
 * @since 1.11.1
 */
sap.m.SplitContainer.prototype.getPage = function(sId,bMaster) { return new sap.ui.core.Control(); };

/**
 * 
 * Returns the previous page (the page from which the user drilled down to the current page with "to()").
 * Note: this is not the page which the user has seen before, but the page which is the target of the next "back()" navigation.
 * If there is no previous page, "undefined" is returned.
 * @param {boolean} 
 *         bMaster
 *         States if this function returns the previous page in master area. If it's set to false, the previous page in detail area will be returned.
 * @type sap.ui.core.Control
 * @public
 */
sap.m.SplitContainer.prototype.getPreviousPage = function(bMaster) { return new sap.ui.core.Control(); };

/**
 * 
 * When in ShowHideMode and the device is in portrait mode, this function can be used to hide the master page.
 * @type sap.m.SplitContainer
 * @public
 */
sap.m.SplitContainer.prototype.hideMaster = function() { return new sap.m.SplitContainer(); };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>detailPages</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *            oDetailPage the detailPage whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.SplitContainer.prototype.indexOfDetailPage = function(oDetailPage) { return 0; };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>masterPages</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *            oMasterPage the masterPage whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.SplitContainer.prototype.indexOfMasterPage = function(oMasterPage) { return 0; };

/**
 * 
 * Inserts a detailPage into the aggregation named <code>detailPages</code>.
 * @param {sap.ui.core.Control}
 *          oDetailPage the detailPage to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the detailPage should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the detailPage is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the detailPage is inserted at 
 *             the last position        
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.insertDetailPage = function(oDetailPage,iIndex) { return new sap.m.SplitContainer(); };

/**
 * 
 * Inserts a masterPage into the aggregation named <code>masterPages</code>.
 * @param {sap.ui.core.Control}
 *          oMasterPage the masterPage to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the masterPage should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the masterPage is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the masterPage is inserted at 
 *             the last position        
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.insertMasterPage = function(oMasterPage,iIndex) { return new sap.m.SplitContainer(); };

/**
 * 
 * Inserts the page/control with the specified ID into the navigation history stack of the NavContainer.
 * </p><p>
 * This can be used for deep-linking when the user directly reached a drilldown detail page using a bookmark and then wants to navigate up in the drilldown hierarchy. Normally such a back navigation would not be possible because there is no previous page in the SplitContainer's history stack.
 * @param {string} 
 *         sPageId
 *         The ID of the control/page/screen which is inserted into the history stack. The respective control must be aggregated by the SplitContainer, otherwise this will cause an error.
 * @param {string} 
 *         sTransitionName
 *         The type of the transition/animation which would have been used to navigate from the (inserted) previous page to the current page. When navigating back, the inverse animation will be applied.
 * This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 * @param {object} 
 *         oData
 *         This optional object can carry any payload data which would have been given to the inserted previous page if the user would have done a normal forward navigation to it.
 * @type sap.m.SplitContainer
 * @public
 */
sap.m.SplitContainer.prototype.insertPreviousPage = function(sPageId,sTransitionName,oData) { return new sap.m.SplitContainer(); };

/**
 * 
 * </p><p>
 * Returns whether master area is currently shown on the screen. In desktop browser or tablet, this method returns true when master area is shown on the screen no matter in portrait or landscape mode. And on mobile phone devices, this method returns true when the current shown page is from the pages which are added to the master area, otherwise it returns false.
 * @type boolean
 * @public
 * @since 1.16.5
 */
sap.m.SplitContainer.prototype.isMasterShown = function() { return false; };

/**
 * 
 * Removes all the controls in the aggregation named <code>detailPages</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.SplitContainer.prototype.removeAllDetailPages = function() { return new Array(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>masterPages</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.SplitContainer.prototype.removeAllMasterPages = function() { return new Array(); };

/**
 * 
 * Removes an detailPage from the aggregation named <code>detailPages</code>.
 * @param {int | string | sap.ui.core.Control} vDetailPage the detailPage to remove or its index or id
 * @return {sap.ui.core.Control} the removed detailPage or null
 * @public
 * 
 */
sap.m.SplitContainer.prototype.removeDetailPage = function(vDetailPage) { return new sap.ui.core.Control(); };

/**
 * 
 * Removes an masterPage from the aggregation named <code>masterPages</code>.
 * @param {int | string | sap.ui.core.Control} vMasterPage the masterPage to remove or its index or id
 * @return {sap.ui.core.Control} the removed masterPage or null
 * @public
 * 
 */
sap.m.SplitContainer.prototype.removeMasterPage = function(vMasterPage) { return new sap.ui.core.Control(); };

/**
 * 
 * Setter for property <code>backgroundColor</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sBackgroundColor  new value for property <code>backgroundColor</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * 
 */
sap.m.SplitContainer.prototype.setBackgroundColor = function(sBackgroundColor) { return new sap.m.SplitContainer(); };

/**
 * 
 * Setter for property <code>backgroundImage</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sBackgroundImage  new value for property <code>backgroundImage</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * 
 */
sap.m.SplitContainer.prototype.setBackgroundImage = function(sBackgroundImage) { return new sap.m.SplitContainer(); };

/**
 * 
 * Setter for property <code>backgroundOpacity</code>.
 * </p><p>
 * Default value is <code>1</code> 
 * @param {float} fBackgroundOpacity  new value for property <code>backgroundOpacity</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * 
 */
sap.m.SplitContainer.prototype.setBackgroundOpacity = function(fBackgroundOpacity) { return new sap.m.SplitContainer(); };

/**
 * 
 * Setter for property <code>backgroundRepeat</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bBackgroundRepeat  new value for property <code>backgroundRepeat</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * 
 */
sap.m.SplitContainer.prototype.setBackgroundRepeat = function(bBackgroundRepeat) { return new sap.m.SplitContainer(); };

/**
 * 
 * Setter for property <code>defaultTransitionNameDetail</code>.
 * </p><p>
 * Default value is <code>"slide"</code> 
 * @param {string} sDefaultTransitionNameDetail  new value for property <code>defaultTransitionNameDetail</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setDefaultTransitionNameDetail = function(sDefaultTransitionNameDetail) { return new sap.m.SplitContainer(); };

/**
 * 
 * Setter for property <code>defaultTransitionNameMaster</code>.
 * </p><p>
 * Default value is <code>"slide"</code> 
 * @param {string} sDefaultTransitionNameMaster  new value for property <code>defaultTransitionNameMaster</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setDefaultTransitionNameMaster = function(sDefaultTransitionNameMaster) { return new sap.m.SplitContainer(); };

/**
 * 
 * Sets the initial detail page, which is shown on application launch.
 * @param {string | sap.ui.core.Control} vInitialDetail 
 *    Id of an element which becomes the new target of this <code>initialDetail</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setInitialDetail = function(vInitialDetail) { return new sap.m.SplitContainer(); };

/**
 * 
 * Sets the initial master page, which is shown on application launch.
 * @param {string | sap.ui.core.Control} vInitialMaster 
 *    Id of an element which becomes the new target of this <code>initialMaster</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setInitialMaster = function(vInitialMaster) { return new sap.m.SplitContainer(); };

/**
 * 
 * Setter for property <code>masterButtonText</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sMasterButtonText  new value for property <code>masterButtonText</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setMasterButtonText = function(sMasterButtonText) { return new sap.m.SplitContainer(); };

/**
 * 
 * Setter for property <code>mode</code>.
 * </p><p>
 * Default value is <code>ShowHideMode</code> 
 * @param {sap.m.SplitAppMode} oMode  new value for property <code>mode</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setMode = function(oMode) { return new sap.m.SplitContainer(); };

/**
 * 
 * When in ShowHideMode and the device is in portrait mode, this function can be used to make the master page visible.
 * @type sap.m.SplitContainer
 * @public
 */
sap.m.SplitContainer.prototype.showMaster = function() { return new sap.m.SplitContainer(); };

/**
 * 
 * Navigate to given page inside the SplitContainer. The navigation is done inside the master area if the page has been added, otherwise it tries to do the page navigation in the detail area.
 * @param {string} 
 *         sPageId
 *         The screen to which drilldown should happen. The ID or the control itself can be given.
 * @param {string} 
 *         sTransitionName
 *         The type of the transition/animation to apply. This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 * Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
 * </p><p>
 * None of the standard transitions is currently making use of any given transition parameters.
 * @param {object} 
 *         oData
 *         This optional object can carry any payload data which should be made available to the target page. The "beforeShow" event on the target page will contain this data object as "data" property.
 * </p><p>
 * Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * </p><p>
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters
 *         This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * </p><p>
 * For a proper parameter order, the "data" parameter must be given when the "transitionParameters" parameter is used. (it can be given as "null")
 * </p><p>
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * The "show", "slide" and "fade" transitions do not use any parameter.
 * @type sap.m.SplitContainer
 * @public
 * @since 1.10.0
 */
sap.m.SplitContainer.prototype.to = function(sPageId,sTransitionName,oData,oTransitionParameters) { return new sap.m.SplitContainer(); };

/**
 * 
 * navigate to given detail page
 * @param {string} 
 *         sPageId
 * @param {string} 
 *         sTransitionName
 *         The type of the transition/animation to apply. This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 * Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
 * </p><p>
 * None of the standard transitions is currently making use of any given transition parameters.
 * @param {object} 
 *         oData
 *         This optional object can carry any payload data which should be made available to the target page. The "beforeShow" event on the target page will contain this data object as "data" property.
 * </p><p>
 * Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * </p><p>
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameter
 *         This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * </p><p>
 * For a proper parameter order, the "data" parameter must be given when the "transitionParameters" parameter is used. (it can be given as "null")
 * </p><p>
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * The "show", "slide" and "fade" transitions do not use any parameter.
 * @type sap.m.SplitContainer
 * @public
 */
sap.m.SplitContainer.prototype.toDetail = function(sPageId,sTransitionName,oData,oTransitionParameter) { return new sap.m.SplitContainer(); };

/**
 * 
 * navigate to given master page
 * @param {string} 
 *         sPageId
 *         The screen to which drilldown should happen. The ID or the control itself can be given.
 * @param {string} 
 *         sTransitionName
 *         The type of the transition/animation to apply. This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 * Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
 * </p><p>
 * None of the standard transitions is currently making use of any given transition parameters.
 * @param {object} 
 *         oData
 * @since 1.7.1 *         This optional object can carry any payload data which should be made available to the target page. The "beforeShow" event on the target page will contain this data object as "data" property.
 * </p><p>
 * Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * </p><p>
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters
 * @since 1.7.1 *         This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * </p><p>
 * For a proper parameter order, the "data" parameter must be given when the "transitionParameters" parameter is used. (it can be given as "null")
 * </p><p>
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * The "show", "slide" and "fade" transitions do not use any parameter.
 * @type sap.m.SplitContainer
 * @public
 */
sap.m.SplitContainer.prototype.toMaster = function(sPageId,sTransitionName,oData,oTransitionParameters) { return new sap.m.SplitContainer(); };


// ---- sap.m.StandardListItem --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new StandardListItem.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconInset iconInset} : boolean (default: true)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getInfo info} : string</li>
 * <li>{@link #getInfoState infoState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getAdaptTitleSize adaptTitleSize} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The StandardListItem is a list item providing image, titel and description.
 * @extends sap.m.ListItemBase
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.StandardListItem = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.m.StandardListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.StandardListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>activeIcon</code>.
 * List item active icon
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>activeIcon</code>
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getActiveIcon = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>adaptTitleSize</code>.
 * By default the title size adapts to the available space and gets bigger if the description is empty. If you have list items with and without description this results in titles with different sizes. In this cases it can be better to switch the size adaption off with setting this property to "false".
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>adaptTitleSize</code>
 * @public
 * @since 1.16.3
 * 
 */
sap.m.StandardListItem.prototype.getAdaptTitleSize = function() { return false; };

/**
 * 
 * Getter for property <code>description</code>.
 * Description
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>description</code>
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getDescription = function() { return ""; };

/**
 * 
 * Getter for property <code>icon</code>.
 * List item icon
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * </p><p>
 * If bandwidth is the key for the application, set this value to false.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getIconDensityAware = function() { return false; };

/**
 * 
 * Getter for property <code>iconInset</code>.
 * If false image will not be shown as embedded icon. Instead it will take the full height of the listitem.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconInset</code>
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getIconInset = function() { return false; };

/**
 * 
 * Getter for property <code>info</code>.
 * Info text shown on the right side of the description.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>info</code>
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getInfo = function() { return ""; };

/**
 * 
 * Getter for property <code>infoState</code>.
 * Info state defines the color of the info text. E.g. Error, Warning, Success...
 * </p><p>
 * Default value is <code>None</code>
 * @return {sap.ui.core.ValueState} the value of property <code>infoState</code>
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getInfoState = function() { return new sap.ui.core.ValueState(); };

/**
 * 
 * Getter for property <code>title</code>.
 * List item text
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getTitle = function() { return ""; };

/**
 * 
 * Setter for property <code>activeIcon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sActiveIcon  new value for property <code>activeIcon</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setActiveIcon = function(sActiveIcon) { return new sap.m.StandardListItem(); };

/**
 * 
 * Setter for property <code>adaptTitleSize</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bAdaptTitleSize  new value for property <code>adaptTitleSize</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.3
 * 
 */
sap.m.StandardListItem.prototype.setAdaptTitleSize = function(bAdaptTitleSize) { return new sap.m.StandardListItem(); };

/**
 * 
 * Setter for property <code>description</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sDescription  new value for property <code>description</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setDescription = function(sDescription) { return new sap.m.StandardListItem(); };

/**
 * 
 * Setter for property <code>icon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setIcon = function(sIcon) { return new sap.m.StandardListItem(); };

/**
 * 
 * Setter for property <code>iconDensityAware</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.StandardListItem(); };

/**
 * 
 * Setter for property <code>iconInset</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bIconInset  new value for property <code>iconInset</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setIconInset = function(bIconInset) { return new sap.m.StandardListItem(); };

/**
 * 
 * Setter for property <code>info</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sInfo  new value for property <code>info</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setInfo = function(sInfo) { return new sap.m.StandardListItem(); };

/**
 * 
 * Setter for property <code>infoState</code>.
 * </p><p>
 * Default value is <code>None</code> 
 * @param {sap.ui.core.ValueState} oInfoState  new value for property <code>infoState</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setInfoState = function(oInfoState) { return new sap.m.StandardListItem(); };

/**
 * 
 * Setter for property <code>title</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setTitle = function(sTitle) { return new sap.m.StandardListItem(); };


// ---- sap.m.StandardTile --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new StandardTile.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getInfo info} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getNumber number} : string</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getInfoState infoState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getType type} : sap.m.StandardTileType (default: sap.m.StandardTileType.None)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.Tile#constructor sap.m.Tile}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The StandardTile
 * @extends sap.m.Tile
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.12
 * 
 */
sap.m.StandardTile = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.m.StandardTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.StandardTile.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>activeIcon</code>.
 * Tile active icon
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.URI} the value of property <code>activeIcon</code>
 * @public
 * 
 */
sap.m.StandardTile.prototype.getActiveIcon = function() { return new sap.ui.core.URI(); };

/**
 * 
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * </p><p>
 * If bandwidth is the key for the application, set this value to false.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * 
 */
sap.m.StandardTile.prototype.getIconDensityAware = function() { return false; };

/**
 * 
 * Getter for property <code>info</code>.
 * Tile description
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>info</code>
 * @public
 * 
 */
sap.m.StandardTile.prototype.getInfo = function() { return ""; };

/**
 * 
 * Getter for property <code>infoState</code>.
 * Info state defines the color of the info text. E.g. Error, Warning, Success...
 * </p><p>
 * Default value is <code>None</code>
 * @return {sap.ui.core.ValueState} the value of property <code>infoState</code>
 * @public
 * 
 */
sap.m.StandardTile.prototype.getInfoState = function() { return new sap.ui.core.ValueState(); };

/**
 * 
 * Getter for property <code>number</code>.
 * Number field
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>number</code>
 * @public
 * 
 */
sap.m.StandardTile.prototype.getNumber = function() { return ""; };

/**
 * 
 * Getter for property <code>numberUnit</code>.
 * Number units qualifier
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>numberUnit</code>
 * @public
 * 
 */
sap.m.StandardTile.prototype.getNumberUnit = function() { return ""; };

/**
 * 
 * Getter for property <code>title</code>.
 * Tile title
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.StandardTile.prototype.getTitle = function() { return ""; };

/**
 * 
 * Getter for property <code>type</code>.
 * Tile type.
 * </p><p>
 * Default value is <code>None</code>
 * @return {sap.m.StandardTileType} the value of property <code>type</code>
 * @public
 * 
 */
sap.m.StandardTile.prototype.getType = function() { return new sap.m.StandardTileType(); };

/**
 * 
 * Setter for property <code>activeIcon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sActiveIcon  new value for property <code>activeIcon</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardTile.prototype.setActiveIcon = function(sActiveIcon) { return new sap.m.StandardTile(); };

/**
 * 
 * Setter for property <code>icon</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardTile.prototype.setIcon = function(sIcon) { return new sap.m.StandardTile(); };

/**
 * 
 * Setter for property <code>iconDensityAware</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardTile.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.StandardTile(); };

/**
 * 
 * Setter for property <code>info</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sInfo  new value for property <code>info</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardTile.prototype.setInfo = function(sInfo) { return new sap.m.StandardTile(); };

/**
 * 
 * Setter for property <code>infoState</code>.
 * </p><p>
 * Default value is <code>None</code> 
 * @param {sap.ui.core.ValueState} oInfoState  new value for property <code>infoState</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardTile.prototype.setInfoState = function(oInfoState) { return new sap.m.StandardTile(); };

/**
 * 
 * Setter for property <code>number</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sNumber  new value for property <code>number</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardTile.prototype.setNumber = function(sNumber) { return new sap.m.StandardTile(); };

/**
 * 
 * Setter for property <code>numberUnit</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sNumberUnit  new value for property <code>numberUnit</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardTile.prototype.setNumberUnit = function(sNumberUnit) { return new sap.m.StandardTile(); };

/**
 * 
 * Setter for property <code>title</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardTile.prototype.setTitle = function(sTitle) { return new sap.m.StandardTile(); };

/**
 * 
 * Setter for property <code>type</code>.
 * </p><p>
 * Default value is <code>None</code> 
 * @param {sap.m.StandardTileType} oType  new value for property <code>type</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.StandardTile.prototype.setType = function(oType) { return new sap.m.StandardTile(); };


// ---- sap.m.StandardTileType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.StandardTileType.toString = function() { return ""; };

// ---- sap.m.Support --------------------------------------------------------------------------

/**
 * 
 * Disables support.
 * @return {object} sap.m.Support
 * @protected
 * 
 * @memberOf sap.m.Support
 */
sap.m.Support.off = function() { return new Object(); };

/**
 * 
 * Enables support.
 * @return {object} sap.m.Support
 * @protected
 * 
 * @memberOf sap.m.Support
 */
sap.m.Support.on = function() { return new Object(); };


// ---- sap.m.SwipeDirection --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.SwipeDirection.toString = function() { return ""; };

// ---- sap.m.Switch --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new Switch.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getState state} : boolean (default: false)</li>
 * <li>{@link #getCustomTextOn customTextOn} : string</li>
 * <li>{@link #getCustomTextOff customTextOff} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getType type} : sap.m.SwitchType (default: sap.m.SwitchType.Default)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Switch#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A switch is a user interface control on mobile devices that is used for change between binary states. The user can also drag the button handle or tap to change the state.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.Switch = function(sId,mSettings) {};
/**
 * 
 * Triggered when a switch changes the state. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.state The new state of the switch.
 * @public
 */
sap.m.Switch.prototype.change = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.Switch</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Switch</code>.<br/> itself. 
 * </p><p>
 * Triggered when a switch changes the state. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Switch</code>.<br/> itself.
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Switch.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.Switch(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.Switch</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Switch.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.Switch(); };

/**
 * 
 * Creates a new subclass of class sap.m.Switch with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Switch.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event change to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'state' of type <code>boolean</code> The new state of the switch.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Switch.prototype.fireChange = function(mArguments) { return new sap.m.Switch(); };

/**
 * 
 * Getter for property <code>customTextOff</code>.
 * Custom text for the "OFF" state.
 * </p><p>
 * "OFF" translated to the current language is the default value.
 * Beware that the given text will be cut off after three characters.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>customTextOff</code>
 * @public
 * 
 */
sap.m.Switch.prototype.getCustomTextOff = function() { return ""; };

/**
 * 
 * Getter for property <code>customTextOn</code>.
 * Custom text for the "ON" state.
 * </p><p>
 * "ON" translated to the current language is the default value.
 * Beware that the given text will be cut off after three characters.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>customTextOn</code>
 * @public
 * 
 */
sap.m.Switch.prototype.getCustomTextOn = function() { return ""; };

/**
 * 
 * Getter for property <code>enabled</code>.
 * Whether the switch is enabled.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.Switch.prototype.getEnabled = function() { return false; };

/**
 * 
 * Getter for property <code>name</code>.
 * The name to be used in the HTML code for the switch (e.g. for HTML forms that send data to the server via submit).
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>name</code>
 * @public
 * 
 */
sap.m.Switch.prototype.getName = function() { return ""; };

/**
 * 
 * Getter for property <code>state</code>.
 * A boolean value indicating whether the switch is on or off.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>state</code>
 * @public
 * 
 */
sap.m.Switch.prototype.getState = function() { return false; };

/**
 * 
 * Getter for property <code>type</code>.
 * Type of a Switch. Possibles values "Default", "AcceptReject".
 * </p><p>
 * Default value is <code>Default</code>
 * @return {sap.m.SwitchType} the value of property <code>type</code>
 * @public
 * 
 */
sap.m.Switch.prototype.getType = function() { return new sap.m.SwitchType(); };

/**
 * 
 * Getter for property <code>visible</code>.
 * Invisible switches are not rendered.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.Switch.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>customTextOff</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sCustomTextOff  new value for property <code>customTextOff</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Switch.prototype.setCustomTextOff = function(sCustomTextOff) { return new sap.m.Switch(); };

/**
 * 
 * Setter for property <code>customTextOn</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sCustomTextOn  new value for property <code>customTextOn</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Switch.prototype.setCustomTextOn = function(sCustomTextOn) { return new sap.m.Switch(); };

/**
 * 
 * Setter for property <code>enabled</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Switch.prototype.setEnabled = function(bEnabled) { return new sap.m.Switch(); };

/**
 * 
 * Setter for property <code>name</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Switch.prototype.setName = function(sName) { return new sap.m.Switch(); };

/**
 * 
 * Change the switch state between on and off.
 * @param {boolean} bState
 * @public
 * @return {sap.m.Switch} <code>this</code> to allow method chaining.
 */
sap.m.Switch.prototype.setState = function(bState,bTriggerEvent) { return new sap.m.Switch(); };

/**
 * 
 * Setter for property <code>type</code>.
 * </p><p>
 * Default value is <code>Default</code> 
 * @param {sap.m.SwitchType} oType  new value for property <code>type</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Switch.prototype.setType = function(oType) { return new sap.m.Switch(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Switch.prototype.setVisible = function(bVisible) { return new sap.m.Switch(); };


// ---- sap.m.SwitchType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.SwitchType.toString = function() { return ""; };

// ---- sap.m.Table --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new Table.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.BackgroundDesign (default: sap.m.BackgroundDesign.Translucent)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getColumns columns} : sap.m.Column[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.ListBase#constructor sap.m.ListBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The Table control provides a set of sophisticated and convenience functions for responsive table design.
 * For mobile devices, the recommended limit of table rows is 100(based on 4 columns) to assure proper performance. To improve initial rendering on large tables, use the "growing" feature. Please refer to the SAPUI5 Developer Guide for more information
 * @extends sap.m.ListBase
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.16
 * 
 */
sap.m.Table = function(sId,mSettings) {};
/**
 * 
 * Adds some column <code>oColumn</code> 
 * to the aggregation named <code>columns</code>.
 * @param {sap.m.Column}
 *            oColumn the column to add; if empty, nothing is inserted
 * @return {sap.m.Table} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Table.prototype.addColumn = function(oColumn) { return new sap.m.Table(); };

/**
 * 
 * Destroys all the columns in the aggregation 
 * named <code>columns</code>.
 * @return {sap.m.Table} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Table.prototype.destroyColumns = function() { return new sap.m.Table(); };

/**
 * 
 * Creates a new subclass of class sap.m.Table with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Table.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>backgroundDesign</code>.
 * This property is used to set the background color of the table. Depending on the theme you can change the state of the background from "Solid" over "Translucent" to "Transparent".
 * </p><p>
 * Default value is <code>Translucent</code>
 * @return {sap.m.BackgroundDesign} the value of property <code>backgroundDesign</code>
 * @public
 * 
 */
sap.m.Table.prototype.getBackgroundDesign = function() { return new sap.m.BackgroundDesign(); };

/**
 * 
 * Getter for aggregation columns.
 * @param {Boolean} [bSort] set true to get the columns in an order that respects personalization settings
 * @returns {sap.m.Column[]} columns of the Table
 * @public
 */
sap.m.Table.prototype.getColumns = function(bSort) { return new Array(); };

/**
 * 
 * Checks for the provided <code>sap.m.Column</code> in the aggregation named <code>columns</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Column}
 *            oColumn the column whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Table.prototype.indexOfColumn = function(oColumn) { return 0; };

/**
 * 
 * Inserts a column into the aggregation named <code>columns</code>.
 * @param {sap.m.Column}
 *          oColumn the column to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the column should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the column is inserted at 
 *             the last position        
 * @return {sap.m.Table} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Table.prototype.insertColumn = function(oColumn,iIndex) { return new sap.m.Table(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>columns</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Column[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Table.prototype.removeAllColumns = function() { return new Array(); };

/**
 * 
 * Removes an column from the aggregation named <code>columns</code>.
 * @param {int | string | sap.m.Column} vColumn the column to remove or its index or id
 * @return {sap.m.Column} the removed column or null
 * @public
 * 
 */
sap.m.Table.prototype.removeColumn = function(vColumn) { return new sap.m.Column(); };

/**
 * 
 * Setter for property <code>backgroundDesign</code>.
 * </p><p>
 * Default value is <code>Translucent</code> 
 * @param {sap.m.BackgroundDesign} oBackgroundDesign  new value for property <code>backgroundDesign</code>
 * @return {sap.m.Table} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Table.prototype.setBackgroundDesign = function(oBackgroundDesign) { return new sap.m.Table(); };


// ---- sap.m.TablePersoController --------------------------------------------------------------------------

/**
 * 
 * The TablePersoController can be used to connect a table that you want to provide
 * a personalization dialog for, with a persistence service such as one provided by
 * the unified shell.
 * @param {string}
 * 			[sId] optional id for the new control; generated automatically if
 * 			no non-empty id is given Note: this can be omitted, no matter
 * 			whether <code>mSettings</code> will be given or not!
 * @param {object}
 * 			[mSettings] optional map/JSON-object with initial settings for the
 * 			new component instance
 * @public
 * @class Table Personalization Controller
 * @extends sap.ui.base.ManagedObject
 * @version 1.20.7
 * 
 */
sap.m.TablePersoController = function(sId,mSettings) {};
/**
 * 
 * Activates the controller, i.e. tries to retrieve existing persisted
 * personalizations, creates a TablePersoDialog for the associated
 * table and attaches a close handler to apply the personalizations to
 * the table and persist them.
 * @public
 */
sap.m.TablePersoController.prototype.activate = function() { return null; };

/**
 * 
 * Applies the personalizations by getting the existing personalizations
 * and adjusting to the table.
 * @public
 */
sap.m.TablePersoController.prototype.applyPersonalizations = function(oTable) { return null; };

/**
 * 
 * Do some clean up: remove event delegates, etc
 * @protected
 */
sap.m.TablePersoController.prototype.exit = function() { return null; };

/**
 * 
 * Reflector for the TablePersoDialog's Dialog's contentWidth property.
 * @public
 */
sap.m.TablePersoController.prototype.getContentWidth = function(sWidth) { return null; };

/**
 * 
 * Returns a  _tablePersoDialog instance if available. It can be NULL if
 * the controller has not been activated yet.
 * @public
 */
sap.m.TablePersoController.prototype.getTablePersoDialog = function() { return null; };

/**
 * 
 * Initializes the TablePersoController instance after creation.
 * @protected
 */
sap.m.TablePersoController.prototype.init = function() { return null; };

/**
 * 
 * Opens the TablePersoDialog, stores the personalized settings on close,
 * modifies the table columns, and sends them to the persistence service
 * @public
 */
sap.m.TablePersoController.prototype.openDialog = function() { return null; };

/**
 * 
 * Persist the personalizations
 * @public
 */
sap.m.TablePersoController.prototype.savePersonalizations = function() { return null; };

/**
 * 
 * Using this method, the first part of tablePerso persistence ids can be
 * provided, in case the table's app does not provide that part itself.
 * </p><p>
 * If a component name is set using this method, it will be used, regardless of
 * whether the table's app has a different component name or not.
 * @public
 */
sap.m.TablePersoController.prototype.setComponentName = function(sCompName) { return null; };


// ---- sap.m.TablePersoDialog --------------------------------------------------------------------------

/**
 * 
 * The TablePersoDialog can be used to display and allow modification of personalization settings relating to a Table. It displays the columns of the table that it refers to by using
 * <ul><li>The result of calling sap.m.TablePersoProvider's 'getCaption' callback if it is implemented and delivers a non-null value for a column</li>
 * <li>the column header control's 'text' property if no caption property is available</li>
 * <li>the column header control's 'title' property if neither 'text' nor 'caption' property are available</li>
 * <li>the column id is displayed as last fallback, if none of the above is at hand. In that case, a warning is logged. </li></ul>
 * @param {string}
 * 			[sId] optional id for the new control; generated automatically if
 * 			no non-empty id is given Note: this can be omitted, no matter
 * 			whether <code>mSettings</code> will be given or not!
 * @param {object}
 * 			[mSettings] optional map/JSON-object with initial settings for the
 * 			new component instance
 * @public
 * @class Table Personalization Dialog
 * @extends sap.ui.base.ManagedObject
 * @version 1.20.7
 * 
 */
sap.m.TablePersoDialog = function(sId,mSettings) {};
/**
 * 
 * Reflectors for the internal Dialog's contentWidth property
 * @public
 */
sap.m.TablePersoDialog.prototype.getContentWidth = function() { return null; };

/**
 * 
 * Initializes the TablePersoProvider instance after creation.
 * @protected
 */
sap.m.TablePersoDialog.prototype.init = function() { return null; };

/**
 * 
 * Sets the content of the dialog, being list items representing
 * the associated table's column settings, and opens the dialog
 * @public
 */
sap.m.TablePersoDialog.prototype.open = function() { return null; };

/**
 * 
 * Returns the personalizations made. Currently supports
 * a 'columns' property which holds an array of settings,
 * one element per column in the associated table. The element
 * contains column-specific information as follows: id: column id;
 * order: new order; text: the column's header text that was displayed
 * in the dialog; visible: visibility (true or false).
 * @return object personalizationData
 * @public
 */
sap.m.TablePersoDialog.prototype.retrievePersonalizations = function() { return null; };


// ---- sap.m.TablePersoProvider --------------------------------------------------------------------------

/**
 * 
 * This is an abstract TablePersoProvider, describing the interface for a real
 * TablePersoProvider.
 * @public
 * @class Table Personalization Provider
 * @extends sap.ui.base.ManagedObject
 * @abstract
 * @version 1.20.7
 * 
 */
sap.m.TablePersoProvider = function() {};
/**
 * 
 * Removes the personalization bundle
 * This must return a jQuery promise (see http://api.jquery.com/promise/)
 * @public
 */
sap.m.TablePersoProvider.prototype.delPersData = function() { return null; };

/**
 * 
 * Callback function which can be used to determine the title of a given column
 * within the TablePersoDialog. As a default, the column header controls are
 * asked for their 'text' or 'title' property. This works in most cases, for example
 * if the header control is a sap.m.Label (has 'text' property) or a sap.m.ObjectListItem
 * (has 'title' property). 
 * </p><p>
 * If the header control used in a column has neither 'text' nor 'title' property, or if you would like to 
 * display a modified column name for a certain column, this callback function can be used.
 * </p><p>
 * If the callback delivers null for a column (which is the default implementation), the default
 * texts described above are displayed for that column in the TablePersoDialog. 
 * </p><p>
 * In case neither the callback delovers null and neither 'text' nor ' title' property are at hand,
 * the TablePersoDialog will display the column id and a warning message is logged.
 * @param oColumn column control instance whose caption shall be determined
 * @public
 */
sap.m.TablePersoProvider.prototype.getCaption = function(oColumn) { return null; };

/**
 * 
 * Retrieves the personalization bundle. 
 * This must return a jQuery promise (see http://api.jquery.com/promise/)
 * @public
 */
sap.m.TablePersoProvider.prototype.getPersData = function() { return null; };

/**
 * 
 * Stores the personalization bundle, overwriting any
 * previous bundle completely
 * This must return a jQuery promise (see http://api.jquery.com/promise/)
 * @public
 */
sap.m.TablePersoProvider.prototype.setPersData = function(oBundle) { return null; };


// ---- sap.m.TableSelectDialog --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new TableSelectDialog.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getNoDataText noDataText} : string</li>
 * <li>{@link #getMultiSelect multiSelect} : boolean (default: false)</li>
 * <li>{@link #getGrowingThreshold growingThreshold} : int</li>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getRememberSelections rememberSelections} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} <strong>(default aggregation)</strong> : sap.m.ColumnListItem[]</li>
 * <li>{@link #getColumns columns} : sap.m.Column[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.TableSelectDialog#event:confirm confirm} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.TableSelectDialog#event:search search} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.TableSelectDialog#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.TableSelectDialog#event:cancel cancel} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A TableSelectDialog provides you a easier way to create a dialog that contains a list with grouping and search functionality.
 * The Table used in a SelectDialog is a Table with Columns. After selecting an item, the dialog will be closed and a callback function will return the item being selected.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.16
 * 
 */
sap.m.TableSelectDialog = function(sId,mSettings) {};
/**
 * 
 * This event will be fired when the cancel button is clicked 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.TableSelectDialog.prototype.cancel = function(oControlEvent) { return null; };

/**
 * 
 * This event will be fired when the dialog is confirmed by selecting an item in single selection mode or by pressing the confirmation button in multi selection mode . The items being selected are returned as event parameters. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.StandardListItem} oControlEvent.getParameters.selectedItem Returns the selected list item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.
 * @param {sap.m.StandardListItem[]} oControlEvent.getParameters.selectedItems Returns an array containing the visible selected list items. If no items are selected, an empty array is returned.
 * @param {string} oControlEvent.getParameters.selectedContexts Returns the binding contexts of the selected items including the non-visible items. 
 * Note: In contrast to the parameter "selectedItems", this parameter will also include the selected but NOT visible items (e.g. due to list filtering). An empty array will be set for this parameter if no Databinding is used.
 * @public
 */
sap.m.TableSelectDialog.prototype.confirm = function(oControlEvent) { return null; };

/**
 * 
 * This event is fired when the value of the search field is changed by a user - e.g. at each key press. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The value entered in the search field.
 * @param {any} oControlEvent.getParameters.itemsBinding The Items binding of the Table Select Dialog. It will only be available if the items aggregation is bound to a model.
 * @public
 */
sap.m.TableSelectDialog.prototype.liveChange = function(oControlEvent) { return null; };

/**
 * 
 * Fired when the search button has been clicked on dialog. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The value entered in the search field.
 * @param {any} oControlEvent.getParameters.itemsBinding The Items binding of the Table Select Dialog. It will only be available if the items aggregation is bound to a model.
 * @public
 */
sap.m.TableSelectDialog.prototype.search = function(oControlEvent) { return null; };

/**
 * 
 * Adds some column <code>oColumn</code> 
 * to the aggregation named <code>columns</code>.
 * @param {sap.m.Column}
 *            oColumn the column to add; if empty, nothing is inserted
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.addColumn = function(oColumn) { return new sap.m.TableSelectDialog(); };

/**
 * 
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 * @param {sap.m.ColumnListItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.addItem = function(oItem) { return new sap.m.TableSelectDialog(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'cancel' event of this <code>sap.m.TableSelectDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.TableSelectDialog</code>.<br/> itself. 
 * </p><p>
 * This event will be fired when the cancel button is clicked 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code>.<br/> itself.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.attachCancel = function(oData,fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'confirm' event of this <code>sap.m.TableSelectDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.TableSelectDialog</code>.<br/> itself. 
 * </p><p>
 * This event will be fired when the dialog is confirmed by selecting an item in single selection mode or by pressing the confirmation button in multi selection mode . The items being selected are returned as event parameters. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code>.<br/> itself.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.attachConfirm = function(oData,fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.TableSelectDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.TableSelectDialog</code>.<br/> itself. 
 * </p><p>
 * This event is fired when the value of the search field is changed by a user - e.g. at each key press. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code>.<br/> itself.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.attachLiveChange = function(oData,fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'search' event of this <code>sap.m.TableSelectDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.TableSelectDialog</code>.<br/> itself. 
 * </p><p>
 * Fired when the search button has been clicked on dialog. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code>.<br/> itself.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.attachSearch = function(oData,fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * 
 * Forwards aggregations with the name of items or columns to the internal table.
 * @overwrite
 * @public
 * @param {string} sAggregationName the name for the binding
 * @param {object} oBindingInfo the configuration parameters for the binding
 * @returns {this} this pointer for chaining
 */
sap.m.TableSelectDialog.prototype.bindAggregation = function(sAggregationName,oBindingInfo) { return null; };

/**
 * 
 * Binder for aggregation <code>columns</code>.
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.bindColumns = function(sPath,oTemplate,oSorter,aFilters) { return new sap.m.TableSelectDialog(); };

/**
 * 
 * Binder for aggregation <code>items</code>.
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.bindItems = function(sPath,oTemplate,oSorter,aFilters) { return new sap.m.TableSelectDialog(); };

/**
 * 
 * Destroys all the columns in the aggregation 
 * named <code>columns</code>.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.destroyColumns = function() { return new sap.m.TableSelectDialog(); };

/**
 * 
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.destroyItems = function() { return new sap.m.TableSelectDialog(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'cancel' event of this <code>sap.m.TableSelectDialog</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.detachCancel = function(fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'confirm' event of this <code>sap.m.TableSelectDialog</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.detachConfirm = function(fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.TableSelectDialog</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.detachLiveChange = function(fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'search' event of this <code>sap.m.TableSelectDialog</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.detachSearch = function(fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * 
 * Creates a new subclass of class sap.m.TableSelectDialog with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.TableSelectDialog.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event cancel to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.TableSelectDialog.prototype.fireCancel = function(mArguments) { return new sap.m.TableSelectDialog(); };

/**
 * 
 * Fire event confirm to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItem' of type <code>sap.m.StandardListItem</code> Returns the selected list item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.</li>
 * <li>'selectedItems' of type <code>sap.m.StandardListItem[]</code> Returns an array containing the visible selected list items. If no items are selected, an empty array is returned.</li>
 * <li>'selectedContexts' of type <code>string</code> Returns the binding contexts of the selected items including the non-visible items. 
 * Note: In contrast to the parameter "selectedItems", this parameter will also include the selected but NOT visible items (e.g. due to list filtering). An empty array will be set for this parameter if no Databinding is used.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.TableSelectDialog.prototype.fireConfirm = function(mArguments) { return new sap.m.TableSelectDialog(); };

/**
 * 
 * Fire event liveChange to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> The value entered in the search field.</li>
 * <li>'itemsBinding' of type <code>any</code> The Items binding of the Table Select Dialog. It will only be available if the items aggregation is bound to a model.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.TableSelectDialog.prototype.fireLiveChange = function(mArguments) { return new sap.m.TableSelectDialog(); };

/**
 * 
 * Fire event search to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> The value entered in the search field.</li>
 * <li>'itemsBinding' of type <code>any</code> The Items binding of the Table Select Dialog. It will only be available if the items aggregation is bound to a model.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.TableSelectDialog.prototype.fireSearch = function(mArguments) { return new sap.m.TableSelectDialog(); };

/**
 * 
 * Getter for aggregation <code>columns</code>.<br/>
 * The columns bindings.
 * @return {sap.m.Column[]}
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.getColumns = function() { return new Array(); };

/**
 * 
 * Reflector for the internal Dialog's contentWidth property
 * @overwrite
 * @public
 * @returns {sap.ui.core.CSSSize} sWidth the content width of the internal dialog
 */
sap.m.TableSelectDialog.prototype.getContentWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for property <code>growingThreshold</code>.
 * Number of items initially displayed in the table
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {int} the value of property <code>growingThreshold</code>
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.getGrowingThreshold = function() { return 0; };

/**
 * 
 * Getter for aggregation <code>items</code>.<br/>
 * The items of the table.
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for TableSelectDialog.
 * @return {sap.m.ColumnListItem[]}
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.getItems = function() { return new Array(); };

/**
 * 
 * Getter for property <code>multiSelect</code>.
 * If on, the user can select several options from the table.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>multiSelect</code>
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.getMultiSelect = function() { return false; };

/**
 * 
 * Reflector for the internal List's no data text property
 * @overwrite
 * @public
 * @returns {string} the current no data text
 */
sap.m.TableSelectDialog.prototype.getNoDataText = function() { return ""; };

/**
 * 
 * Getter for property <code>rememberSelections</code>.
 * This flag controls whether the dialog clears the selection or not. When the dialog is opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true". When the dialog should reset the selection to allow for a new selection each time set it to "false"
 * Note: This property must be set before the dialog is opened to have an effect.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>rememberSelections</code>
 * @public
 * @since 1.18
 * 
 */
sap.m.TableSelectDialog.prototype.getRememberSelections = function() { return false; };

/**
 * 
 * Getter for property <code>title</code>.
 * The title text appears in the dialog header.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.getTitle = function() { return ""; };

/**
 * 
 * Checks for the provided <code>sap.m.Column</code> in the aggregation named <code>columns</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Column}
 *            oColumn the column whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.indexOfColumn = function(oColumn) { return 0; };

/**
 * 
 * Checks for the provided <code>sap.m.ColumnListItem</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ColumnListItem}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * 
 * Inserts a column into the aggregation named <code>columns</code>.
 * @param {sap.m.Column}
 *          oColumn the column to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the column should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the column is inserted at 
 *             the last position        
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.insertColumn = function(oColumn,iIndex) { return new sap.m.TableSelectDialog(); };

/**
 * 
 * Inserts a item into the aggregation named <code>items</code>.
 * @param {sap.m.ColumnListItem}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.insertItem = function(oItem,iIndex) { return new sap.m.TableSelectDialog(); };

/**
 * 
 * Opens the internal dialog with a searchfield and a table.
 * @public
 * @param {string} sValue Value for the table search.
 * @returns {this} <code>this</code> to allow method chaining
 */
sap.m.TableSelectDialog.prototype.open = function(sValue) { return null; };

/**
 * 
 * Removes all the controls in the aggregation named <code>columns</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Column[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.removeAllColumns = function() { return new Array(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ColumnListItem[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.removeAllItems = function() { return new Array(); };

/**
 * 
 * Removes an column from the aggregation named <code>columns</code>.
 * @param {int | string | sap.m.Column} vColumn the column to remove or its index or id
 * @return {sap.m.Column} the removed column or null
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.removeColumn = function(vColumn) { return new sap.m.Column(); };

/**
 * 
 * Removes an item from the aggregation named <code>items</code>.
 * @param {int | string | sap.m.ColumnListItem} vItem the item to remove or its index or id
 * @return {sap.m.ColumnListItem} the removed item or null
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.removeItem = function(vItem) { return new sap.m.ColumnListItem(); };

/**
 * 
 * Reflector for the internal Dialog's contentWidth property
 * @param {sap.ui.core.CSSSize} sWidth the new content width value for the dialog
 * @public
 * @overwrite
 * @returns {this} this pointer for chaining
 */
sap.m.TableSelectDialog.prototype.setContentWidth = function(sWidth) { return null; };

/**
 * 
 * Sets the growing threshold to the internal table
 * @public
 * @param {int} iValue Value for the table's growing threshold.
 * @returns {this} this pointer for chaining
 */
sap.m.TableSelectDialog.prototype.setGrowingThreshold = function(iValue) { return null; };

/**
 * 
 * Enable/Disable multi selection mode.
 * @overwrite
 * @public
 * @param {boole} bMulti flag for multi selection mode
 * @returns {this} this pointer for chaining
 */
sap.m.TableSelectDialog.prototype.setMultiSelect = function(bMulti) { return null; };

/**
 * 
 * Set the no data text of the internal table
 * @overwrite
 * @public
 * @param {string} sNoDataText the no data text for the table
 */
sap.m.TableSelectDialog.prototype.setNoDataText = function(sNoDataText) { return null; };

/**
 * 
 * Setter for property <code>rememberSelections</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bRememberSelections  new value for property <code>rememberSelections</code>
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.18
 * 
 */
sap.m.TableSelectDialog.prototype.setRememberSelections = function(bRememberSelections) { return new sap.m.TableSelectDialog(); };

/**
 * 
 * Set the title of the internal dialog
 * @overwrite
 * @public
 * @param {string} sTitle the title text for the dialog
 * @returns {this} this pointer for chaining
 */
sap.m.TableSelectDialog.prototype.setTitle = function(sTitle) { return null; };

/**
 * 
 * Unbinder for aggregation <code>columns</code>.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.unbindColumns = function() { return new sap.m.TableSelectDialog(); };

/**
 * 
 * Unbinder for aggregation <code>items</code>.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.unbindItems = function() { return new sap.m.TableSelectDialog(); };


// ---- sap.m.Text --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new Text.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: '')</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWrapping wrapping} : boolean (default: true)</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getMaxLines maxLines} : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The Text control is used to display some continuous text.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.Text = function(sId,mSettings) {};
/**
 * 
 * Determines per instance whether line height should be cached or not.
 * Default value is true.
 * @since 1.22
 * @protected
 * @type {Boolean}
 */
sap.m.Text.prototype.cacheLineHeight = null

/**
 * 
 * Ellipsis(…) text to indicate more text when clampText function is used.
 * Can be overwritten with 3dots(...) if fonts do not support this UTF-8 character.
 * @since 1.13.2
 * @protected
 * @type {String}
 */
sap.m.Text.prototype.ellipsis = null

/**
 * 
 * Defines whether browser supports native line clamp or not
 * @since 1.13.2
 * @returns {Boolean}
 * @protected
 * @readonly
 * @static
 */
sap.m.Text.hasNativeLineClamp = null

/**
 * 
 * Default line height value as a number when line-height is normal.
 * This value is required during max-height calculation for the browsers that do not support line-clamping.
 * It is better to define line-height in CSS instead of "normal" to get consistent maxLines results since normal line-height
 * not only vary from browser to browser but they also vary from one font face to another and can also vary within a given face.
 * </p><p>
 * Default value is 1.2
 * @since 1.22
 * @protected
 * @type {Number}
 */
sap.m.Text.prototype.normalLineHeight = null

/**
 * 
 * Binder for property <code>text</code>.
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Text.prototype.bindText = function(sPath,fnFormatter,sMode) { return new sap.m.Text(); };

/**
 * 
 * Decides whether the control can use native line clamp feature or not.
 * In RTL mode native line clamp feature is not supported
 * @since 1.20
 * @protected
 * @return {Boolean}
 */
sap.m.Text.prototype.canUseNativeLineClamp = function() { return null; };

/**
 * 
 * Sets the max-height to support maxLines property
 * @since 1.22
 * @protected
 * @param {HTMLElement} [oDomRef] DOM reference of the text container.
 * @returns {Number} calculated max height value
 */
sap.m.Text.prototype.clampHeight = function(oDomRef) { return null; };

/**
 * 
 * Clamps the wrapping text according to max lines and returns the found ellipsis position.
 * Parameters can be used for better performance.
 * @param {HTMLElement} [oDomRef] DOM reference of the text container.
 * @param {number} [iStartPos] Start point of the ellipsis search.
 * @param {number} [iEndPos] End point of the ellipsis search.
 * @returns {number|undefined} Returns found ellipsis position or undefined
 * @since 1.20
 * @protected
 */
sap.m.Text.prototype.clampText = function(oDomRef,iStartPos,iEndPos) { return 0.0; };

/**
 * 
 * Creates a new subclass of class sap.m.Text with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Text.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Returns the max height according to max lines and line height calculation.
 * This is not calculated max-height!
 * @since 1.22
 * @protected
 * @param {HTMLElement} [oDomRef] DOM reference of the text container.
 * @returns {Number}
 */
sap.m.Text.prototype.getClampHeight = function(oDomRef) { return null; };

/**
 * 
 * Caches and returns the computed line height of the text.
 * @since 1.22
 * @protected
 * @see sap.m.Text#cacheLineHeight
 * @param {HTMLElement} [oDomRef] DOM reference of the text container.
 * @returns {Number}
 */
sap.m.Text.prototype.getLineHeight = function(oDomRef) { return null; };

/**
 * 
 * Getter for property <code>maxLines</code>.
 * Limits the number of lines for wrapping texts.
 * </p><p>
 * Note: The multi-line overflow indicator depends on the browser line clamping support. For such browsers, this will be shown as ellipsis, for the other browsers the overflow will just be hidden.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {int} the value of property <code>maxLines</code>
 * @public
 * @since 1.13.2
 * 
 */
sap.m.Text.prototype.getMaxLines = function() { return 0; };

/**
 * 
 * Getter for property <code>text</code>.
 * Text to be displayed.
 * </p><p>
 * Default value is <code>''</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.m.Text.prototype.getText = function() { return ""; };

/**
 * 
 * Getter for property <code>textAlign</code>.
 * Sets the horizontal alignment of the text.
 * </p><p>
 * Default value is <code>Begin</code>
 * @return {sap.ui.core.TextAlign} the value of property <code>textAlign</code>
 * @public
 * 
 */
sap.m.Text.prototype.getTextAlign = function() { return new sap.ui.core.TextAlign(); };

/**
 * 
 * Getter for property <code>textDirection</code>.
 * Available options for the text direction are LTR and RTL. By default the control inherits the text direction from its parent control.
 * </p><p>
 * Default value is <code>Inherit</code>
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * 
 */
sap.m.Text.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * 
 * Returns the text node container's DOM reference.
 * This can be different then getDomRef when inner wrapper is needed.
 * @since 1.22
 * @protected
 * @returns {HTMLElement|null}
 */
sap.m.Text.prototype.getTextDomRef = function() { return null; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set this property to false to make the text invisible.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.Text.prototype.getVisible = function() { return false; };

/**
 * 
 * Getter for property <code>width</code>.
 * By default, the Text control uses the full width available. Set this property to restrict the width to a custom value.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.Text.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for property <code>wrapping</code>.
 * Set this property to false to disable the automatic text wrapping.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>wrapping</code>
 * @public
 * 
 */
sap.m.Text.prototype.getWrapping = function() { return false; };

/**
 * 
 * Determines whether max lines should be rendered or not
 * @since 1.22
 * @protected
 * @returns {HTMLElement|null}
 */
sap.m.Text.prototype.hasMaxLines = function() { return null; };

/**
 * 
 * Setter for property <code>maxLines</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {int} iMaxLines  new value for property <code>maxLines</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @since 1.13.2
 * 
 */
sap.m.Text.prototype.setMaxLines = function(iMaxLines) { return new sap.m.Text(); };

/**
 * 
 * Setter for property <code>text</code>.
 * </p><p>
 * Default value is <code>''</code> 
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Text.prototype.setText = function(sText) { return new sap.m.Text(); };

/**
 * 
 * Setter for property <code>textAlign</code>.
 * </p><p>
 * Default value is <code>Begin</code> 
 * @param {sap.ui.core.TextAlign} oTextAlign  new value for property <code>textAlign</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Text.prototype.setTextAlign = function(oTextAlign) { return new sap.m.Text(); };

/**
 * 
 * Setter for property <code>textDirection</code>.
 * </p><p>
 * Default value is <code>Inherit</code> 
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Text.prototype.setTextDirection = function(oTextDirection) { return new sap.m.Text(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Text.prototype.setVisible = function(bVisible) { return new sap.m.Text(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Text.prototype.setWidth = function(sWidth) { return new sap.m.Text(); };

/**
 * 
 * Setter for property <code>wrapping</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bWrapping  new value for property <code>wrapping</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Text.prototype.setWrapping = function(bWrapping) { return new sap.m.Text(); };

/**
 * 
 * Unbinder for property <code>text</code>.
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Text.prototype.unbindText = function() { return new sap.m.Text(); };


// ---- sap.m.TextArea --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new TextArea.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getRows rows} : int (default: 2)</li>
 * <li>{@link #getCols cols} : int (default: 20)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getMaxLength maxLength} : int (default: 0)</li>
 * <li>{@link #getWrapping wrapping} : sap.ui.core.Wrapping</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.TextArea#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.InputBase#constructor sap.m.InputBase}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Enable users to input multi-line text.
 * @extends sap.m.InputBase
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.9.0
 * 
 */
sap.m.TextArea = function(sId,mSettings) {};
/**
 * 
 * This event is fired when the value of the input is changed - e.g. at each keypress 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The new value of the textarea.
 * @public
 */
sap.m.TextArea.prototype.liveChange = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.TextArea</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.TextArea</code>.<br/> itself. 
 * </p><p>
 * This event is fired when the value of the input is changed - e.g. at each keypress 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TextArea</code>.<br/> itself.
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TextArea.prototype.attachLiveChange = function(oData,fnFunction,oListener) { return new sap.m.TextArea(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.TextArea</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TextArea.prototype.detachLiveChange = function(fnFunction,oListener) { return new sap.m.TextArea(); };

/**
 * 
 * Creates a new subclass of class sap.m.TextArea with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.TextArea.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event liveChange to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> The new value of the textarea.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.TextArea.prototype.fireLiveChange = function(mArguments) { return new sap.m.TextArea(); };

/**
 * 
 * Getter for property <code>cols</code>.
 * Specifies the width of the textarea (in average character width).
 * </p><p>
 * Default value is <code>20</code>
 * @return {int} the value of property <code>cols</code>
 * @public
 * 
 */
sap.m.TextArea.prototype.getCols = function() { return 0; };

/**
 * 
 * Getter for property <code>height</code>.
 * Defines the height of the textarea with CSS. This property can overwrite the rows property.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.m.TextArea.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for property <code>maxLength</code>.
 * Maximum number of characters that user can input. If your value property's length bigger than maxLength then value is not truncated and user can see whole value property but cannot write anymore.
 * </p><p>
 * Default value is <code>0</code>
 * @return {int} the value of property <code>maxLength</code>
 * @public
 * 
 */
sap.m.TextArea.prototype.getMaxLength = function() { return 0; };

/**
 * 
 * Getter for property <code>rows</code>.
 * Specifies the height of the text area (in lines).
 * </p><p>
 * Default value is <code>2</code>
 * @return {int} the value of property <code>rows</code>
 * @public
 * 
 */
sap.m.TextArea.prototype.getRows = function() { return 0; };

/**
 * 
 * Getter for property <code>wrapping</code>.
 * The wrap attribute specifies how the text in a text area is to be wrapped when submitted in a form. Possible values are: Soft, Hard, Off.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.Wrapping} the value of property <code>wrapping</code>
 * @public
 * 
 */
sap.m.TextArea.prototype.getWrapping = function() { return new sap.ui.core.Wrapping(); };

/**
 * 
 * Setter for property <code>cols</code>.
 * </p><p>
 * Default value is <code>20</code> 
 * @param {int} iCols  new value for property <code>cols</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TextArea.prototype.setCols = function(iCols) { return new sap.m.TextArea(); };

/**
 * 
 * Setter for property <code>height</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TextArea.prototype.setHeight = function(sHeight) { return new sap.m.TextArea(); };

/**
 * 
 * Setter for property <code>maxLength</code>.
 * </p><p>
 * Default value is <code>0</code> 
 * @param {int} iMaxLength  new value for property <code>maxLength</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TextArea.prototype.setMaxLength = function(iMaxLength) { return new sap.m.TextArea(); };

/**
 * 
 * Setter for property <code>rows</code>.
 * </p><p>
 * Default value is <code>2</code> 
 * @param {int} iRows  new value for property <code>rows</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TextArea.prototype.setRows = function(iRows) { return new sap.m.TextArea(); };

/**
 * 
 * Setter for property <code>wrapping</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.Wrapping} oWrapping  new value for property <code>wrapping</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TextArea.prototype.setWrapping = function(oWrapping) { return new sap.m.TextArea(); };


// ---- sap.m.Tile --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new Tile.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getRemovable removable} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Tile#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A tile to be displayed in the tile container. Use this
 * tile as the base class for
 * specialized tile implementations.
 * Use the renderers _addOuterClass methods to add a style class to the main
 * surface of the Tile. In this class set the background color, gradients
 * or background images.
 * Instead of implementing the default render method in the renderer implement
 * your content HTML in the _renderContent method of the specialized
 * tile.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.12
 * 
 */
sap.m.Tile = function(sId,mSettings) {};
/**
 * 
 * Tap event is raised if the user tap or click to the
 * control. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.Tile.prototype.press = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Tile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Tile</code>.<br/> itself. 
 * </p><p>
 * Tap event is raised if the user tap or click to the
 * control. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Tile</code>.<br/> itself.
 * @return {sap.m.Tile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Tile.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.Tile(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Tile</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Tile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Tile.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.Tile(); };

/**
 * 
 * Creates a new subclass of class sap.m.Tile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Tile.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event press to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Tile} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Tile.prototype.firePress = function(mArguments) { return new sap.m.Tile(); };

/**
 * 
 * Getter for property <code>removable</code>.
 * Determines whether the tile is movable within the surrounding tile container. The remove event is fired by the tile contianer.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>removable</code>
 * @public
 * 
 */
sap.m.Tile.prototype.getRemovable = function() { return false; };

/**
 * 
 * Setter for property <code>removable</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bRemovable  new value for property <code>removable</code>
 * @return {sap.m.Tile} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Tile.prototype.setRemovable = function(bRemovable) { return new sap.m.Tile(); };


// ---- sap.m.TileContainer --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new TileContainer.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getEditable editable} : boolean</li>
 * <li>{@link #getAllowAdd allowAdd} : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTiles tiles} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.TileContainer#event:tileMove tileMove} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.TileContainer#event:tileDelete tileDelete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.TileContainer#event:tileAdd tileAdd} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A container that arranges same-size tiles nicely on carousel pages
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.12
 * 
 */
sap.m.TileContainer = function(sId,mSettings) {};
/**
 * 
 * Fired if a Tile is added 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.TileContainer.prototype.tileAdd = function(oControlEvent) { return null; };

/**
 * 
 * Fired if a tile is deleted during edit mode. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.Tile} oControlEvent.getParameters.tile The tile
 * @public
 */
sap.m.TileContainer.prototype.tileDelete = function(oControlEvent) { return null; };

/**
 * 
 * Fired if a tile was moved 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.Tile} oControlEvent.getParameters.tile The tile that has been moved
 * @param {int} oControlEvent.getParameters.newIndex The new index of the tile in the tiles aggregation
 * @public
 */
sap.m.TileContainer.prototype.tileMove = function(oControlEvent) { return null; };

/**
 * 
 * Adds a tile to the end of the tiles collection
 * @param {sap.m.Tile} oTile The tile to add.
 * @returns {sap.m.TileContainer} This tile container.
 * @override
 * @public
 */
sap.m.TileContainer.prototype.addTile = function(oTile) { return new sap.m.TileContainer(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'tileAdd' event of this <code>sap.m.TileContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.TileContainer</code>.<br/> itself. 
 * </p><p>
 * Fired if a Tile is added 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code>.<br/> itself.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.attachTileAdd = function(oData,fnFunction,oListener) { return new sap.m.TileContainer(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'tileDelete' event of this <code>sap.m.TileContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.TileContainer</code>.<br/> itself. 
 * </p><p>
 * Fired if a tile is deleted during edit mode. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code>.<br/> itself.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.attachTileDelete = function(oData,fnFunction,oListener) { return new sap.m.TileContainer(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'tileMove' event of this <code>sap.m.TileContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.TileContainer</code>.<br/> itself. 
 * </p><p>
 * Fired if a tile was moved 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code>.<br/> itself.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.attachTileMove = function(oData,fnFunction,oListener) { return new sap.m.TileContainer(); };

/**
 * 
 * Deletes a tile.
 * @param {sap.m.Tile} oTile The tile to move
 * @returns {sap.m.TileContainer} This tile container.
 * @override
 * @public
 */
sap.m.TileContainer.prototype.deleteTile = function(oTile) { return new sap.m.TileContainer(); };

/**
 * 
 * Destroys all the tiles in the aggregation 
 * named <code>tiles</code>.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.destroyTiles = function() { return new sap.m.TileContainer(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'tileAdd' event of this <code>sap.m.TileContainer</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.detachTileAdd = function(fnFunction,oListener) { return new sap.m.TileContainer(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'tileDelete' event of this <code>sap.m.TileContainer</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.detachTileDelete = function(fnFunction,oListener) { return new sap.m.TileContainer(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'tileMove' event of this <code>sap.m.TileContainer</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.detachTileMove = function(fnFunction,oListener) { return new sap.m.TileContainer(); };

/**
 * 
 * Creates a new subclass of class sap.m.TileContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.TileContainer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event tileAdd to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.TileContainer.prototype.fireTileAdd = function(mArguments) { return new sap.m.TileContainer(); };

/**
 * 
 * Fire event tileDelete to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'tile' of type <code>sap.m.Tile</code> The tile
 * </li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.TileContainer.prototype.fireTileDelete = function(mArguments) { return new sap.m.TileContainer(); };

/**
 * 
 * Fire event tileMove to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'tile' of type <code>sap.m.Tile</code> The tile that has been moved</li>
 * <li>'newIndex' of type <code>int</code> The new index of the tile in the tiles aggregation</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.TileContainer.prototype.fireTileMove = function(mArguments) { return new sap.m.TileContainer(); };

/**
 * 
 * Getter for property <code>allowAdd</code>.
 * Determines whether the user is allowed to add tiles in edit mode (editable = true)
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {boolean} the value of property <code>allowAdd</code>
 * @public
 * 
 */
sap.m.TileContainer.prototype.getAllowAdd = function() { return false; };

/**
 * 
 * Getter for property <code>editable</code>.
 * Whether the tile container is editable and you can move or delete or add tiles.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * 
 */
sap.m.TileContainer.prototype.getEditable = function() { return false; };

/**
 * 
 * Getter for property <code>height</code>.
 * The height of the container in pixel
 * </p><p>
 * Default value is <code>100%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.m.TileContainer.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Returns the index of the first tile that is visible in the current page
 * @returns {sap.m.TileContainer} The index of the first tile that is visible in the current page.
 * @public
 */
sap.m.TileContainer.prototype.getPageFirstTileIndex = function() { return new sap.m.TileContainer(); };

/**
 * 
 * Getter for aggregation <code>tiles</code>.<br/>
 * The tiles to be displayed by the tile container
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for TileContainer.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.TileContainer.prototype.getTiles = function() { return new Array(); };

/**
 * 
 * Getter for property <code>width</code>.
 * The width of the container in pixel
 * </p><p>
 * Default value is <code>100%</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.TileContainer.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>tiles</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *            oTile the tile whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.TileContainer.prototype.indexOfTile = function(oTile) { return 0; };

/**
 * 
 * Inserts a tile to the given index
 * @param {sap.m.Tile} oTile The tile to insert
 * @param {int} iIndex The new Tile position in the tiles aggregation.
 * @returns {sap.m.TileContainer} This tile container.
 * @override
 * @public
 */
sap.m.TileContainer.prototype.insertTile = function(oTile,iIndex) { return new sap.m.TileContainer(); };

/**
 * 
 * Moves a given tile to the given index.
 * @param {sap.m.Tile} oTile The tile to move
 * @param {int} iIndex The new Tile position in the tiles aggregation.
 * @returns {sap.m.TileContainer} This tile container.
 * @public
 */
sap.m.TileContainer.prototype.moveTile = function(oTile,iIndex) { return new sap.m.TileContainer(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>tiles</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.TileContainer.prototype.removeAllTiles = function() { return new Array(); };

/**
 * 
 * Removes an tile from the aggregation named <code>tiles</code>.
 * @param {int | string | sap.ui.core.Control} vTile the tile to remove or its index or id
 * @return {sap.ui.core.Control} the removed tile or null
 * @public
 * 
 */
sap.m.TileContainer.prototype.removeTile = function(vTile) { return new sap.ui.core.Control(); };

/**
 * 
 * Scrolls to the page where the given tile or tile index is included.
 * Optionally this can be done animated or not. With IE9 the scroll is never animated.
 * @param {sap.m.Tile|int} vTile The tile or tile index to be scrolled into view.
 * @param {boolean} bAnimated Whether the scroll should be animated.
 * @public
 */
sap.m.TileContainer.prototype.scrollIntoView = function(vTile,bAnimated) { return null; };

/**
 * 
 * Scrolls one page to the left
 * @public
 */
sap.m.TileContainer.prototype.scrollLeft = function() { return null; };

/**
 * 
 * Scrolls one page to the right.
 * @public
 */
sap.m.TileContainer.prototype.scrollRight = function() { return null; };

/**
 * 
 * Setter for property <code>allowAdd</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {boolean} bAllowAdd  new value for property <code>allowAdd</code>
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.setAllowAdd = function(bAllowAdd) { return new sap.m.TileContainer(); };

/**
 * 
 * Sets the editable property to the tile container that allows to move icons.
 * This is currently also set with a long tap
 * @param {boolean} Whether the container is in edit mode or not.
 * @returns {sap.m.TileContainer} This tile container.
 * @public
 */
sap.m.TileContainer.prototype.setEditable = function(Whether) { return new sap.m.TileContainer(); };

/**
 * 
 * Setter for property <code>height</code>.
 * </p><p>
 * Default value is <code>100%</code> 
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.setHeight = function(sHeight) { return new sap.m.TileContainer(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is <code>100%</code> 
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.setWidth = function(sWidth) { return new sap.m.TileContainer(); };


// ---- sap.m.Toolbar --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new Toolbar.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getActive active} : boolean (default: false)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '')</li>
 * <li>{@link #getDesign design} : sap.m.ToolbarDesign (default: sap.m.ToolbarDesign.Auto)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Toolbar#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The Toolbar control is a horizontal items container that can be used to get an input from user or just to display output.
 * </p><p>
 * Note: By default, when Toolbar overflows, it provides shrinking for text controls(e.g. Text, Label) and the control that have percent width.(e.g. Input, Slider). This behaviour can be overwritten by providing sap.m.ToolbarLayoutData for your items.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.16
 * 
 */
sap.m.Toolbar = function(sId,mSettings) {};
/**
 * 
 * If "active" property is set "true" then "press" event is fired when user clicks on the toolbar. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.srcControl The control which caused the press event within the toolbar.
 * @public
 */
sap.m.Toolbar.prototype.press = function(oControlEvent) { return null; };

/**
 * 
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Toolbar.prototype.addContent = function(oContent) { return new sap.m.Toolbar(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Toolbar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Toolbar</code>.<br/> itself. 
 * </p><p>
 * If "active" property is set "true" then "press" event is fired when user clicks on the toolbar. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Toolbar</code>.<br/> itself.
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Toolbar.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.Toolbar(); };

/**
 * 
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Toolbar.prototype.destroyContent = function() { return new sap.m.Toolbar(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Toolbar</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Toolbar.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.Toolbar(); };

/**
 * 
 * Creates a new subclass of class sap.m.Toolbar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Toolbar.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event press to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'srcControl' of type <code>sap.ui.core.Control</code> The control which caused the press event within the toolbar.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.Toolbar.prototype.firePress = function(mArguments) { return new sap.m.Toolbar(); };

/**
 * 
 * Getter for property <code>active</code>.
 * Indicates that the whole toolbar is clickable. Press event of this control is fired only if this property is set "true"
 * Note: This property should be used when there is no interactive control inside the toolbar but to make the toolbar itself interactive.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>active</code>
 * @public
 * 
 */
sap.m.Toolbar.prototype.getActive = function() { return false; };

/**
 * 
 * Returns the currently applied design property of the Toolbar.
 * @returns {sap.m.ToolbarDesign}
 * @protected
 */
sap.m.Toolbar.prototype.getActiveDesign = function() { return new sap.m.ToolbarDesign(); };

/**
 * 
 * Getter for aggregation <code>content</code>.<br/>
 * The content of the toolbar.
 * </p><p>
 * <strong>Note</strong>: this is the default aggregation for Toolbar.
 * @return {sap.ui.core.Control[]}
 * @public
 * 
 */
sap.m.Toolbar.prototype.getContent = function() { return new Array(); };

/**
 * 
 * Getter for property <code>design</code>.
 * Defines the toolbar design. Design settings are theme-dependent and can also define the default height of the toolbar.
 * </p><p>
 * Default value is <code>Auto</code>
 * @return {sap.m.ToolbarDesign} the value of property <code>design</code>
 * @public
 * @since 1.16.8
 * 
 */
sap.m.Toolbar.prototype.getDesign = function() { return new sap.m.ToolbarDesign(); };

/**
 * 
 * Getter for property <code>enabled</code>.
 * Sets the enabled property of all controls defined in the content aggregation. Note: This property is not for the toolbar itself. See also the "active" property.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.m.Toolbar.prototype.getEnabled = function() { return false; };

/**
 * 
 * Getter for property <code>height</code>.
 * Defines the height of the control.
 * Note: By default, the height property depends on the theme and the design property.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.m.Toolbar.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for property <code>visible</code>.
 * Sets the visibility of the control.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.m.Toolbar.prototype.getVisible = function() { return false; };

/**
 * 
 * Getter for property <code>width</code>.
 * Defines the width of the control.
 * By default the Toolbar is block element, if the the width is not explicitly set, control will simply have its own natural size.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.Toolbar.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.Toolbar.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * 
 * Inserts a content into the aggregation named <code>content</code>.
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Toolbar.prototype.insertContent = function(oContent,iIndex) { return new sap.m.Toolbar(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.Toolbar.prototype.removeAllContent = function() { return new Array(); };

/**
 * 
 * Removes an content from the aggregation named <code>content</code>.
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * 
 */
sap.m.Toolbar.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * 
 * Setter for property <code>active</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bActive  new value for property <code>active</code>
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Toolbar.prototype.setActive = function(bActive) { return new sap.m.Toolbar(); };

/**
 * 
 * Setter for property <code>design</code>.
 * </p><p>
 * Default value is <code>Auto</code> 
 * @param {sap.m.ToolbarDesign} oDesign  new value for property <code>design</code>
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.8
 * 
 */
sap.m.Toolbar.prototype.setDesign = function(oDesign) { return new sap.m.Toolbar(); };

/**
 * 
 * Setter for property <code>enabled</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Toolbar.prototype.setEnabled = function(bEnabled) { return new sap.m.Toolbar(); };

/**
 * 
 * Setter for property <code>height</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Toolbar.prototype.setHeight = function(sHeight) { return new sap.m.Toolbar(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Toolbar.prototype.setVisible = function(bVisible) { return new sap.m.Toolbar(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.Toolbar.prototype.setWidth = function(sWidth) { return new sap.m.Toolbar(); };


// ---- sap.m.ToolbarDesign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ToolbarDesign.toString = function() { return ""; };

// ---- sap.m.ToolbarLayoutData --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ToolbarLayoutData.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShrinkable shrinkable} : boolean (default: false)</li>
 * <li>{@link #getMinWidth minWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getMaxWidth maxWidth} : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Holds layout data for the toolbar items.
 * @extends sap.ui.core.LayoutData
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.20
 * 
 */
sap.m.ToolbarLayoutData = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.m.ToolbarLayoutData with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ToolbarLayoutData.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>maxWidth</code>.
 * Sets the maximum width of the toolbar item.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>maxWidth</code>
 * @public
 * 
 */
sap.m.ToolbarLayoutData.prototype.getMaxWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for property <code>minWidth</code>.
 * Sets the minimum width of the toolbar item.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>minWidth</code>
 * @public
 * 
 */
sap.m.ToolbarLayoutData.prototype.getMinWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for property <code>shrinkable</code>.
 * Determines whether the control in the toolbar is shrinkable or not. If the related control has fixed width(e.g. 100px, 5rem) then this property is ignored.
 * </p><p>
 * Note: Nested layout controls should not be shrinkable.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>shrinkable</code>
 * @public
 * 
 */
sap.m.ToolbarLayoutData.prototype.getShrinkable = function() { return false; };

/**
 * 
 * Setter for property <code>maxWidth</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSSize} sMaxWidth  new value for property <code>maxWidth</code>
 * @return {sap.m.ToolbarLayoutData} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ToolbarLayoutData.prototype.setMaxWidth = function(sMaxWidth) { return new sap.m.ToolbarLayoutData(); };

/**
 * 
 * Setter for property <code>minWidth</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSSize} sMinWidth  new value for property <code>minWidth</code>
 * @return {sap.m.ToolbarLayoutData} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ToolbarLayoutData.prototype.setMinWidth = function(sMinWidth) { return new sap.m.ToolbarLayoutData(); };

/**
 * 
 * Setter for property <code>shrinkable</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bShrinkable  new value for property <code>shrinkable</code>
 * @return {sap.m.ToolbarLayoutData} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ToolbarLayoutData.prototype.setShrinkable = function(bShrinkable) { return new sap.m.ToolbarLayoutData(); };


// ---- sap.m.ToolbarSpacer --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ToolbarSpacer.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * This control can be used to add horizontal space between toolbar items.
 * Note: ToolbarLayoutData should not be used with this control.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.16
 * 
 */
sap.m.ToolbarSpacer = function(sId,mSettings) {};
/**
 * 
 * Flexible Spacer Class Name
 * @protected
 */
sap.m.ToolbarSpacer.prototype.flexClass = null

/**
 * 
 * Creates a new subclass of class sap.m.ToolbarSpacer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ToolbarSpacer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>width</code>.
 * Defines the width of the horizontal space.
 * Note: Empty("") value makes the space flexible which means it covers the remaining space between toolbar items.
 * This feature can be used to push next item to the edge of the toolbar.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.m.ToolbarSpacer.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.ToolbarSpacer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ToolbarSpacer.prototype.setWidth = function(sWidth) { return new sap.m.ToolbarSpacer(); };


// ---- sap.m.touch --------------------------------------------------------------------------

/**
 * 
 * Given a list of touches, count the number of touches related with the given element.
 * @param {TouchList} oTouchList The list of touch objects to search.
 * @param {jQuery|Element|string} vElement A jQuery element or an element reference or an element id.
 * @return {number} The number of touches related with the given element.
 * @public
 * 
 * @memberOf sap.m.touch
 */
sap.m.touch.countContained = function(oTouchList,vElement) { return 0.0; };

/**
 * 
 * Given a list of touch objects, find the touch that matches the given one.
 * @param {TouchList} oTouchList The list of touch objects to search.
 * @param {Touch|number} oTouch A touch object to find or a Touch.identifier that uniquely identifies the current finger in the touch session.
 * @return {object|undefined} The touch matching if any.
 * @public
 * 
 * @memberOf sap.m.touch
 */
sap.m.touch.find = function(oTouchList,oTouch) { return new Object(); };


// ---- sap.m.URLHelper --------------------------------------------------------------------------

/**
 * 
 * Adds an event registration for redirect
 * @param {Function} fnFunction The function to call, when the event occurs.
 * @param {Object} [oListener] The object, that wants to be notified, when the event occurs
 * @return {Object} sap.m.URLHelper instance
 * @public
 * 
 * @memberOf sap.m.URLHelper
 */
sap.m.URLHelper.attachRedirect = function(fnFunction,oListener) { return null; };

/**
 * 
 * Detach already registered redirect event
 * @param {Function} fnFunction The function to call, when the event occurs.
 * @param {Object} [oListener] The object, that wants to be notified, when the event occurs
 * @return {Object} sap.m.URLHelper instance
 * @public
 * 
 * @memberOf sap.m.URLHelper
 */
sap.m.URLHelper.detachRedirect = function(fnFunction,oListener) { return null; };

/**
 * 
 * Builds Email URI from given parameter.
 * Trims spaces from email addresses
 * @param {String} [sEmail] Destination email address.
 * @param {String} [sSubject] Subject of the email address.
 * @param {String} [sBody] Default message text.
 * @param {String} [sCC] Carbon Copy email address.
 * @param {String} [sBCC] Blind carbon copy email address.
 * @return {String} Email URI scheme.
 * @public
 * 
 * @memberOf sap.m.URLHelper
 */
sap.m.URLHelper.normalizeEmail = function(sEmail,sSubject,sBody,sCC,sBCC) { return null; };

/**
 * 
 * Sanitize the given telephone number and returns SMS URI scheme
 * @param {String} [sTel] telephone number.
 * @return {String} SMS URI scheme.
 * @public
 * 
 * @memberOf sap.m.URLHelper
 */
sap.m.URLHelper.normalizeSms = function(sTel) { return null; };

/**
 * 
 * Sanitize the given telephone number and returns telephone URI scheme
 * @param {String} [sTel] telephone number.
 * @return {String} telephone URI scheme.
 * @public
 * 
 * @memberOf sap.m.URLHelper
 */
sap.m.URLHelper.normalizeTel = function(sTel) { return null; };

/**
 * 
 * Redirects to given URL
 * This method fires "redirect" event before open the URL
 * @param {String} sURL Uniform resource locator.
 * @param {boolean} [bNewWindow] Opens URL in a new browser window
 * @public
 * 
 * @memberOf sap.m.URLHelper
 */
sap.m.URLHelper.redirect = function(sURL,bNewWindow) { return null; };

/**
 * 
 * Trigger email application to send email
 * Trims spaces from email addresses
 * @param {String} [sEmail] Destination email address.
 * @param {String} [sSubject] Subject of the email address.
 * @param {String} [sBody] Default message text.
 * @param {String} [sCC] Carbon Copy email address.
 * @param {String} [sBCC] Blind carbon copy email address.
 * @public
 * 
 * @memberOf sap.m.URLHelper
 */
sap.m.URLHelper.triggerEmail = function(sEmail,sSubject,sBody,sCC,sBCC) { return null; };

/**
 * 
 * Trigger SMS application to send SMS to given telephone number
 * @param {String} [sTel] telephone number.
 * @public
 * 
 * @memberOf sap.m.URLHelper
 */
sap.m.URLHelper.triggerSms = function(sTel) { return null; };

/**
 * 
 * Trigger telephone to call given telephone number
 * @param {String} [sTel] telephone number.
 * @public
 * 
 * @memberOf sap.m.URLHelper
 */
sap.m.URLHelper.triggerTel = function(sTel) { return null; };


// ---- sap.m.VBox --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new VBox.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.FlexBox#constructor sap.m.FlexBox}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * The VBox control builds the container for a vertical flexible box layout. VBox is a convenience control as it is just a specialized FlexBox control.
 * </p><p>
 * Browser support:
 * This control is not supported in Internet Explorer 9!
 * @extends sap.m.FlexBox
 * @version 1.20.7
 * @constructor   
 * @public
 * 
 */
sap.m.VBox = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.m.VBox with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.VBox.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };


// ---- sap.m.ViewSettingsCustomItem --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ViewSettingsCustomItem.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getFilterCount filterCount} : int (default: 0)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCustomControl customControl} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.ViewSettingsItem#constructor sap.m.ViewSettingsItem}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ViewSettingsCustomItem is used for modelling custom filters in the ViewSettingsDialog.
 * @extends sap.m.ViewSettingsItem
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.16
 * 
 */
sap.m.ViewSettingsCustomItem = function(sId,mSettings) {};
/**
 * 
 * Destroys the customControl in the aggregation 
 * named <code>customControl</code>.
 * @return {sap.m.ViewSettingsCustomItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsCustomItem.prototype.destroyCustomControl = function() { return new sap.m.ViewSettingsCustomItem(); };

/**
 * 
 * Creates a new subclass of class sap.m.ViewSettingsCustomItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ViewSettingsCustomItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>customControl</code>.<br/>
 * A custom control for the filter field. It can be used for complex filtering mechanisms.
 * @return {sap.ui.core.Control}
 * @public
 * 
 */
sap.m.ViewSettingsCustomItem.prototype.getCustomControl = function() { return new sap.ui.core.Control(); };

/**
 * 
 * Getter for property <code>filterCount</code>.
 * The number of currently active filters for this custom filter item. It will be displayed in the filter list of the ViewSettingsDialog to represent the filter state of the custom control.
 * </p><p>
 * Default value is <code>0</code>
 * @return {int} the value of property <code>filterCount</code>
 * @public
 * 
 */
sap.m.ViewSettingsCustomItem.prototype.getFilterCount = function() { return 0; };

/**
 * 
 * Setter for the aggregated <code>customControl</code>.
 * @param {sap.ui.core.Control} oCustomControl
 * @return {sap.m.ViewSettingsCustomItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsCustomItem.prototype.setCustomControl = function(oCustomControl) { return new sap.m.ViewSettingsCustomItem(); };

/**
 * 
 * Setter for property <code>filterCount</code>.
 * </p><p>
 * Default value is <code>0</code> 
 * @param {int} iFilterCount  new value for property <code>filterCount</code>
 * @return {sap.m.ViewSettingsCustomItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsCustomItem.prototype.setFilterCount = function(iFilterCount) { return new sap.m.ViewSettingsCustomItem(); };


// ---- sap.m.ViewSettingsDialog --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ViewSettingsDialog.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getSortDescending sortDescending} : boolean (default: false)</li>
 * <li>{@link #getGroupDescending groupDescending} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSortItems sortItems} : sap.m.ViewSettingsItem[]</li>
 * <li>{@link #getGroupItems groupItems} : sap.m.ViewSettingsItem[]</li>
 * <li>{@link #getFilterItems filterItems} : sap.m.ViewSettingsItem[]</li>
 * <li>{@link #getPresetFilterItems presetFilterItems} : sap.m.ViewSettingsItem[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedSortItem selectedSortItem} : string | sap.m.ViewSettingsItem</li>
 * <li>{@link #getSelectedGroupItem selectedGroupItem} : string | sap.m.ViewSettingsItem</li>
 * <li>{@link #getSelectedPresetFilterItem selectedPresetFilterItem} : string | sap.m.ViewSettingsItem</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.ViewSettingsDialog#event:confirm confirm} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ViewSettingsDialog#event:cancel cancel} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ViewSettingsDialog#event:resetFilters resetFilters} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ViewSettingsDialog provides functionality to easily select the options for sorting, grouping, and filtering data. It is a composite control, consisting of a modal popover and several internal lists. There are three different tabs (Sort, Group, Filter) in the dialog that can be activated by filling the respecive associations. If only one assication is filled, the other tabs are automatically hidden. The selected options can be used to create sorters and filters for the table.
 * @extends sap.ui.core.Control
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.16
 * 
 */
sap.m.ViewSettingsDialog = function(sId,mSettings) {};
/**
 * 
 * Event is called when the cancel button is pressed. It can be used to set the state of custom filter controls. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.ViewSettingsDialog.prototype.cancel = function(oControlEvent) { return null; };

/**
 * 
 * The event indicates that the user has pressed the OK button and the selected sort, group, and filter settings should be applied to the data on this page. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.ViewSettingsItem} oControlEvent.getParameters.sortItem Selected sort item.
 * @param {boolean} oControlEvent.getParameters.sortDescending Selected sort order (true = descending, false = ascending).
 * @param {sap.m.ViewSettingsItem} oControlEvent.getParameters.groupItem Selected group item
 * @param {boolean} oControlEvent.getParameters.groupDescending Selected group order (true = descending, false = ascending).
 * @param {sap.m.ViewSettingsItem} oControlEvent.getParameters.presetFilterItem Selected preset filter item.
 * @param {sap.m.ViewSettingsItem[]} oControlEvent.getParameters.filterItems Selected filters in an array of ViewSettingsItem.
 * @param {object} oControlEvent.getParameters.filterKeys Selected filter items in an object notation format: { key: boolean }. If a custom control filter was displayed (e.g. the user clicked on the filter item), the value for its key is set to true to indicate that there has been an interaction with the control.
 * @param {string} oControlEvent.getParameters.filterString Selected filter items in string format to display in a control's header bar in format "Filtered by: key (subkey1, subkey2, subkey3)".
 * @public
 */
sap.m.ViewSettingsDialog.prototype.confirm = function(oControlEvent) { return null; };

/**
 * 
 * Event is called when the reset filters button is pressed. It can be used to clear the state of custom filter controls. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.m.ViewSettingsDialog.prototype.resetFilters = function(oControlEvent) { return null; };

/**
 * 
 * Adds some filterItem <code>oFilterItem</code> 
 * to the aggregation named <code>filterItems</code>.
 * @param {sap.m.ViewSettingsItem}
 *            oFilterItem the filterItem to add; if empty, nothing is inserted
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.addFilterItem = function(oFilterItem) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Adds a group item and sets the association to reflect the selected state
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem}
 *            oItem the item to be added to the aggregation
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 */
sap.m.ViewSettingsDialog.prototype.addGroupItem = function(oItem) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Adds a preset filter item and sets the association to reflect the selected
 * state
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem}
 *            oItem the selected item or a string with the key
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 */
sap.m.ViewSettingsDialog.prototype.addPresetFilterItem = function(oItem) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Adds a sort item and sets the association to reflect the selected state
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem}
 *            oItem the item to be added to the aggregation
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 */
sap.m.ViewSettingsDialog.prototype.addSortItem = function(oItem) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'cancel' event of this <code>sap.m.ViewSettingsDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ViewSettingsDialog</code>.<br/> itself. 
 * </p><p>
 * Event is called when the cancel button is pressed. It can be used to set the state of custom filter controls. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsDialog</code>.<br/> itself.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.attachCancel = function(oData,fnFunction,oListener) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'confirm' event of this <code>sap.m.ViewSettingsDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ViewSettingsDialog</code>.<br/> itself. 
 * </p><p>
 * The event indicates that the user has pressed the OK button and the selected sort, group, and filter settings should be applied to the data on this page. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsDialog</code>.<br/> itself.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.attachConfirm = function(oData,fnFunction,oListener) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'resetFilters' event of this <code>sap.m.ViewSettingsDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ViewSettingsDialog</code>.<br/> itself. 
 * </p><p>
 * Event is called when the reset filters button is pressed. It can be used to clear the state of custom filter controls. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsDialog</code>.<br/> itself.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.attachResetFilters = function(oData,fnFunction,oListener) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Binder for aggregation <code>filterItems</code>.
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.bindFilterItems = function(sPath,oTemplate,oSorter,aFilters) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Binder for aggregation <code>groupItems</code>.
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.bindGroupItems = function(sPath,oTemplate,oSorter,aFilters) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Binder for aggregation <code>presetFilterItems</code>.
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.bindPresetFilterItems = function(sPath,oTemplate,oSorter,aFilters) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Binder for aggregation <code>sortItems</code>.
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.bindSortItems = function(sPath,oTemplate,oSorter,aFilters) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Destroys all the filterItems in the aggregation 
 * named <code>filterItems</code>.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.destroyFilterItems = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Destroys all the groupItems in the aggregation 
 * named <code>groupItems</code>.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.destroyGroupItems = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Destroys all the presetFilterItems in the aggregation 
 * named <code>presetFilterItems</code>.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.destroyPresetFilterItems = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Destroys all the sortItems in the aggregation 
 * named <code>sortItems</code>.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.destroySortItems = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'cancel' event of this <code>sap.m.ViewSettingsDialog</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.detachCancel = function(fnFunction,oListener) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'confirm' event of this <code>sap.m.ViewSettingsDialog</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.detachConfirm = function(fnFunction,oListener) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'resetFilters' event of this <code>sap.m.ViewSettingsDialog</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.detachResetFilters = function(fnFunction,oListener) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Creates a new subclass of class sap.m.ViewSettingsDialog with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ViewSettingsDialog.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event cancel to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ViewSettingsDialog.prototype.fireCancel = function(mArguments) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Fire event confirm to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'sortItem' of type <code>sap.m.ViewSettingsItem</code> Selected sort item.</li>
 * <li>'sortDescending' of type <code>boolean</code> Selected sort order (true = descending, false = ascending).</li>
 * <li>'groupItem' of type <code>sap.m.ViewSettingsItem</code> Selected group item</li>
 * <li>'groupDescending' of type <code>boolean</code> Selected group order (true = descending, false = ascending).</li>
 * <li>'presetFilterItem' of type <code>sap.m.ViewSettingsItem</code> Selected preset filter item.</li>
 * <li>'filterItems' of type <code>sap.m.ViewSettingsItem[]</code> Selected filters in an array of ViewSettingsItem.</li>
 * <li>'filterKeys' of type <code>object</code> Selected filter items in an object notation format: { key: boolean }. If a custom control filter was displayed (e.g. the user clicked on the filter item), the value for its key is set to true to indicate that there has been an interaction with the control.</li>
 * <li>'filterString' of type <code>string</code> Selected filter items in string format to display in a control's header bar in format "Filtered by: key (subkey1, subkey2, subkey3)".</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ViewSettingsDialog.prototype.fireConfirm = function(mArguments) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Fire event resetFilters to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.ViewSettingsDialog.prototype.fireResetFilters = function(mArguments) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Getter for aggregation <code>filterItems</code>.<br/>
 * List of items with key and value that can be filtered on (e.g. a list of columns for a table). A filterItem is associated with one or more detail filters.
 * @return {sap.m.ViewSettingsItem[]}
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getFilterItems = function() { return new Array(); };

/**
 * 
 * Getter for property <code>groupDescending</code>.
 * If set to true, the group order is descending, otherwise ascending (default).
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>groupDescending</code>
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getGroupDescending = function() { return false; };

/**
 * 
 * Getter for aggregation <code>groupItems</code>.<br/>
 * List of items with key and value that can be grouped on (e.g. a list of columns for a table).
 * @return {sap.m.ViewSettingsItem[]}
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getGroupItems = function() { return new Array(); };

/**
 * 
 * Getter for aggregation <code>presetFilterItems</code>.<br/>
 * List of preset filter items that allow the selection of more complex or custom filters. These entries are displayed at the top of the filter tab.
 * @return {sap.m.ViewSettingsItem[]}
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getPresetFilterItems = function() { return new Array(); };

/**
 * 
 * Returns the selected filters in an array of ViewSettingsItem.
 * @overwrite
 * @public
 * @return {sap.m.ViewSettingsItem[]} an array of selected filter items
 */
sap.m.ViewSettingsDialog.prototype.getSelectedFilterItems = function() { return new Array(); };

/**
 * 
 * Get the selected filter object in format {key: boolean}
 * @public
 * @return {object} an object with item and subitem keys
 */
sap.m.ViewSettingsDialog.prototype.getSelectedFilterKeys = function() { return new Object(); };

/**
 * 
 * Returns the selected filters as an array of ViewSettingsItems. It can be used to create matching sorters and filters to apply the selected settings to the data.
 * @type sap.m.ViewSettingsItem[]
 * @public
 */
sap.m.ViewSettingsDialog.prototype.getSelectedFilters = function() { return new Array(); };

/**
 * 
 * Get the filter string in the format "filter name (subfilter1 name, subfilter2
 * name, ...), ..." For custom filters and preset filters it will only add the
 * filter name to the resulting string
 * @public
 * @return {string} the selected filter string
 */
sap.m.ViewSettingsDialog.prototype.getSelectedFilterString = function() { return ""; };

/**
 * 
 * Group item that is selected. It can be set by either passing a key or the item itself to the function "setSelectedGrouptItem"
 * @return {string} Id of the element which is the current target of the <code>selectedGroupItem</code> association, or null
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getSelectedGroupItem = function() { return ""; };

/**
 * 
 * Preset filter item that is selected. It can be set by either passing a key or the item itself to the function "setSelectedPresetFilterItem". Note that either a preset filter OR multiple detail filters can be active at the same time.
 * @return {string} Id of the element which is the current target of the <code>selectedPresetFilterItem</code> association, or null
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getSelectedPresetFilterItem = function() { return ""; };

/**
 * 
 * Sort item that is selected. It can be set by either passing a key or the item itself to the function "setSelectedSortItem"
 * @return {string} Id of the element which is the current target of the <code>selectedSortItem</code> association, or null
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getSelectedSortItem = function() { return ""; };

/**
 * 
 * Getter for property <code>sortDescending</code>.
 * If set to true, the sort order is descending, otherwise ascending (default).
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>sortDescending</code>
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getSortDescending = function() { return false; };

/**
 * 
 * Getter for aggregation <code>sortItems</code>.<br/>
 * List of items with key and value that can be sorted over (e.g. a list of columns for a table).
 * @return {sap.m.ViewSettingsItem[]}
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getSortItems = function() { return new Array(); };

/**
 * 
 * Getter for property <code>title</code>.
 * Title of the dialog. If not set, the dialog uses the default "View" or "Sort", "Group", "Filter" respectively if there is only one active tab.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getTitle = function() { return ""; };

/**
 * 
 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation named <code>filterItems</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ViewSettingsItem}
 *            oFilterItem the filterItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.indexOfFilterItem = function(oFilterItem) { return 0; };

/**
 * 
 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation named <code>groupItems</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ViewSettingsItem}
 *            oGroupItem the groupItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.indexOfGroupItem = function(oGroupItem) { return 0; };

/**
 * 
 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation named <code>presetFilterItems</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ViewSettingsItem}
 *            oPresetFilterItem the presetFilterItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.indexOfPresetFilterItem = function(oPresetFilterItem) { return 0; };

/**
 * 
 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation named <code>sortItems</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ViewSettingsItem}
 *            oSortItem the sortItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.indexOfSortItem = function(oSortItem) { return 0; };

/**
 * 
 * Inserts a filterItem into the aggregation named <code>filterItems</code>.
 * @param {sap.m.ViewSettingsItem}
 *          oFilterItem the filterItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the filterItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the filterItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the filterItem is inserted at 
 *             the last position        
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.insertFilterItem = function(oFilterItem,iIndex) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Inserts a groupItem into the aggregation named <code>groupItems</code>.
 * @param {sap.m.ViewSettingsItem}
 *          oGroupItem the groupItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the groupItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the groupItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the groupItem is inserted at 
 *             the last position        
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.insertGroupItem = function(oGroupItem,iIndex) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Inserts a presetFilterItem into the aggregation named <code>presetFilterItems</code>.
 * @param {sap.m.ViewSettingsItem}
 *          oPresetFilterItem the presetFilterItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the presetFilterItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the presetFilterItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the presetFilterItem is inserted at 
 *             the last position        
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.insertPresetFilterItem = function(oPresetFilterItem,iIndex) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Inserts a sortItem into the aggregation named <code>sortItems</code>.
 * @param {sap.m.ViewSettingsItem}
 *          oSortItem the sortItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the sortItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the sortItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the sortItem is inserted at 
 *             the last position        
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.insertSortItem = function(oSortItem,iIndex) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Opens the view settings dialog relative to the parent control
 * @public
 * @param {sap.ui.core.Control}
 *            oParentControl the parent control
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 */
sap.m.ViewSettingsDialog.prototype.open = function(oParentControl) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>filterItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ViewSettingsItem[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeAllFilterItems = function() { return new Array(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>groupItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ViewSettingsItem[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeAllGroupItems = function() { return new Array(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>presetFilterItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ViewSettingsItem[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeAllPresetFilterItems = function() { return new Array(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>sortItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ViewSettingsItem[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeAllSortItems = function() { return new Array(); };

/**
 * 
 * Removes an filterItem from the aggregation named <code>filterItems</code>.
 * @param {int | string | sap.m.ViewSettingsItem} vFilterItem the filterItem to remove or its index or id
 * @return {sap.m.ViewSettingsItem} the removed filterItem or null
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeFilterItem = function(vFilterItem) { return new sap.m.ViewSettingsItem(); };

/**
 * 
 * Removes an groupItem from the aggregation named <code>groupItems</code>.
 * @param {int | string | sap.m.ViewSettingsItem} vGroupItem the groupItem to remove or its index or id
 * @return {sap.m.ViewSettingsItem} the removed groupItem or null
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeGroupItem = function(vGroupItem) { return new sap.m.ViewSettingsItem(); };

/**
 * 
 * Removes an presetFilterItem from the aggregation named <code>presetFilterItems</code>.
 * @param {int | string | sap.m.ViewSettingsItem} vPresetFilterItem the presetFilterItem to remove or its index or id
 * @return {sap.m.ViewSettingsItem} the removed presetFilterItem or null
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removePresetFilterItem = function(vPresetFilterItem) { return new sap.m.ViewSettingsItem(); };

/**
 * 
 * Removes an sortItem from the aggregation named <code>sortItems</code>.
 * @param {int | string | sap.m.ViewSettingsItem} vSortItem the sortItem to remove or its index or id
 * @return {sap.m.ViewSettingsItem} the removed sortItem or null
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeSortItem = function(vSortItem) { return new sap.m.ViewSettingsItem(); };

/**
 * 
 * Setter for property <code>groupDescending</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bGroupDescending  new value for property <code>groupDescending</code>
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.setGroupDescending = function(bGroupDescending) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Set the selected filter object in format {key: boolean}
 * @public
 * @param {object}
 *            oAny an object with filter item and sub keys
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 */
sap.m.ViewSettingsDialog.prototype.setSelectedFilterKeys = function(oAny) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Set the selected group item (either by key or by item)
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem}
 *            oItem the selected item or a string with the key
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 */
sap.m.ViewSettingsDialog.prototype.setSelectedGroupItem = function(oItem) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Set the selected preset filter item
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem}
 *            oItem the selected item or a string with the key
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 */
sap.m.ViewSettingsDialog.prototype.setSelectedPresetFilterItem = function(oItem) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Set the selected sort item (either by key or by item)
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem}
 *            oItem the selected item or a string with the key
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 */
sap.m.ViewSettingsDialog.prototype.setSelectedSortItem = function(oItem) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Setter for property <code>sortDescending</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bSortDescending  new value for property <code>sortDescending</code>
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.setSortDescending = function(bSortDescending) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Set the title of the internal dialog
 * @overwrite
 * @public
 * @param {string}
 *            sTitle the title text for the dialog
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 */
sap.m.ViewSettingsDialog.prototype.setTitle = function(sTitle) { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Unbinder for aggregation <code>filterItems</code>.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.unbindFilterItems = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Unbinder for aggregation <code>groupItems</code>.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.unbindGroupItems = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Unbinder for aggregation <code>presetFilterItems</code>.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.unbindPresetFilterItems = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * 
 * Unbinder for aggregation <code>sortItems</code>.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.unbindSortItems = function() { return new sap.m.ViewSettingsDialog(); };


// ---- sap.m.ViewSettingsFilterItem --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ViewSettingsFilterItem.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMultiSelect multiSelect} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.ViewSettingsItem[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.m.ViewSettingsItem#constructor sap.m.ViewSettingsItem}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A ViewSettingsFilterItem is used for modelling filter behaviour in the ViewSettingsDialog.
 * @extends sap.m.ViewSettingsItem
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.16
 * 
 */
sap.m.ViewSettingsFilterItem = function(sId,mSettings) {};
/**
 * 
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 * @param {sap.m.ViewSettingsItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.m.ViewSettingsFilterItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.addItem = function(oItem) { return new sap.m.ViewSettingsFilterItem(); };

/**
 * 
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.m.ViewSettingsFilterItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.destroyItems = function() { return new sap.m.ViewSettingsFilterItem(); };

/**
 * 
 * Creates a new subclass of class sap.m.ViewSettingsFilterItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ViewSettingsFilterItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>items</code>.<br/>
 * Items that are logically grouped under this filter item. They are used to display filter details in the ViewSettingsDialog.
 * @return {sap.m.ViewSettingsItem[]}
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.getItems = function() { return new Array(); };

/**
 * 
 * Getter for property <code>multiSelect</code>.
 * If set to (true), multi selection will be allowed for the items aggregation.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>multiSelect</code>
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.getMultiSelect = function() { return false; };

/**
 * 
 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ViewSettingsItem}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * 
 * Inserts a item into the aggregation named <code>items</code>.
 * @param {sap.m.ViewSettingsItem}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.m.ViewSettingsFilterItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.insertItem = function(oItem,iIndex) { return new sap.m.ViewSettingsFilterItem(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ViewSettingsItem[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.removeAllItems = function() { return new Array(); };

/**
 * 
 * Removes an item from the aggregation named <code>items</code>.
 * @param {int | string | sap.m.ViewSettingsItem} vItem the item to remove or its index or id
 * @return {sap.m.ViewSettingsItem} the removed item or null
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.removeItem = function(vItem) { return new sap.m.ViewSettingsItem(); };

/**
 * 
 * Setter for property <code>multiSelect</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bMultiSelect  new value for property <code>multiSelect</code>
 * @return {sap.m.ViewSettingsFilterItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.setMultiSelect = function(bMultiSelect) { return new sap.m.ViewSettingsFilterItem(); };


// ---- sap.m.ViewSettingsItem --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ViewSettingsItem.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSelected selected} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * ViewSettingsItem is used for modelling filter behaviour in the ViewSettingsDialog.
 * @extends sap.ui.core.Item
 * @version 1.20.7
 * @constructor   
 * @public
 * @since 1.16
 * 
 */
sap.m.ViewSettingsItem = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.m.ViewSettingsItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ViewSettingsItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>selected</code>.
 * Selected state of the item. If set to "true", the item will be displayed as selected in the view settings dialog.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * 
 */
sap.m.ViewSettingsItem.prototype.getSelected = function() { return false; };

/**
 * 
 * Setter for property <code>selected</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bSelected  new value for property <code>selected</code>
 * @return {sap.m.ViewSettingsItem} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsItem.prototype.setSelected = function(bSelected) { return new sap.m.ViewSettingsItem(); };

// ---- static fields of namespaces ---------------------------------------------------------------------

// ---- sap.m --------------------------------------------------------------------------

/**
 * 
 * Hide the soft keyboard
 * @public
 * @since 1.20
 * @memberOf sap.m
 */
sap.m.closeKeyboard = null;

/**
 * 
 * Search given control's parents and try to find iScroll
 * @param {sap.ui.core.Control} oControl
 * @return {iScroll|undefined} iScroll reference or undefined if cannot find
 * @public
 * @since 1.11
 * @memberOf sap.m
 */
sap.m.getIScroll = null;

/**
 * 
 * Search given control's parents and try to find ScrollDelegate
 * @param {sap.ui.core.Control} oControl
 * @return {Object|undefined} ScrollDelegate or undefined if cannot find
 * @public
 * @since 1.11
 * @memberOf sap.m
 */
sap.m.getScrollDelegate = null;


// ---- sap.m.BackgroundDesign --------------------------------------------------------------------------

/**
 * 
 * A solid background color dependent on the theme. 
 * @public
 * @memberOf sap.m.BackgroundDesign
 */
sap.m.BackgroundDesign.Solid = null;

/**
 * 
 * A translucent background depending on the opacity value of the theme. 
 * @public
 * @memberOf sap.m.BackgroundDesign
 */
sap.m.BackgroundDesign.Translucent = null;

/**
 * 
 * Transparent background. 
 * @public
 * @memberOf sap.m.BackgroundDesign
 */
sap.m.BackgroundDesign.Transparent = null;


// ---- sap.m.ButtonType --------------------------------------------------------------------------

/**
 * 
 * accept type (blue button) 
 * @public
 * @memberOf sap.m.ButtonType
 */
sap.m.ButtonType.Accept = null;

/**
 * 
 * back type (back navigation button for header) 
 * @public
 * @memberOf sap.m.ButtonType
 */
sap.m.ButtonType.Back = null;

/**
 * 
 * default type (no special styling) 
 * @public
 * @memberOf sap.m.ButtonType
 */
sap.m.ButtonType.Default = null;

/**
 * 
 * emphasized type 
 * @public
 * @memberOf sap.m.ButtonType
 */
sap.m.ButtonType.Emphasized = null;

/**
 * 
 * reject style (red button) 
 * @public
 * @memberOf sap.m.ButtonType
 */
sap.m.ButtonType.Reject = null;

/**
 * 
 * transparent type 
 * @public
 * @memberOf sap.m.ButtonType
 */
sap.m.ButtonType.Transparent = null;

/**
 * 
 * Unstyled type (no styling) 
 * @public
 * @memberOf sap.m.ButtonType
 */
sap.m.ButtonType.Unstyled = null;

/**
 * 
 * up type (up navigation button for header) 
 * @public
 * @memberOf sap.m.ButtonType
 */
sap.m.ButtonType.Up = null;


// ---- sap.m.DateTimeInputType --------------------------------------------------------------------------

/**
 * 
 * An input control for specifying a date value. The user can select a month, day of the month, and year. 
 * @public
 * @memberOf sap.m.DateTimeInputType
 */
sap.m.DateTimeInputType.Date = null;

/**
 * 
 * An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day. 
 * @public
 * @memberOf sap.m.DateTimeInputType
 */
sap.m.DateTimeInputType.DateTime = null;

/**
 * 
 * An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM. 
 * @public
 * @memberOf sap.m.DateTimeInputType
 */
sap.m.DateTimeInputType.Time = null;


// ---- sap.m.DialogType --------------------------------------------------------------------------

/**
 * 
 * Dialog with type Message looks the same as the Stardard Dialog in Android. And it puts the left, right buttons to the bottom of the Dialog in iOS. 
 * @public
 * @memberOf sap.m.DialogType
 */
sap.m.DialogType.Message = null;

/**
 * 
 * This is the default value for Dialog type. Stardard dialog in iOS has a header on the top and the left, right buttons are put inside the header. In android, the left, right buttons are put to the bottom of the Dialog. 
 * @public
 * @memberOf sap.m.DialogType
 */
sap.m.DialogType.Standard = null;


// ---- sap.m.FacetFilterType --------------------------------------------------------------------------

/**
 * 
 * Forces FacetFilter to display in light mode. 
 * @public
 * @memberOf sap.m.FacetFilterType
 */
sap.m.FacetFilterType.Light = null;

/**
 * 
 * Forces FacetFilter to display facet lists as a row of buttons, one button per facet. The FacetFilter will automatically adapt to the Light type when it detects smart phone sized displays. 
 * @public
 * @memberOf sap.m.FacetFilterType
 */
sap.m.FacetFilterType.Simple = null;


// ---- sap.m.FlexAlignItems --------------------------------------------------------------------------

/**
 * 
 * If the box items' inline axes are the same as the cross axis, this value is identical to ?start?. Otherwise, it participates in baseline alignment: all participating box items on the line are aligned such that their baselines align, and the item with the largest distance between its baseline and its cross-start margin edge is placed flush against the cross-start edge of the line. 
 * @public
 * @memberOf sap.m.FlexAlignItems
 */
sap.m.FlexAlignItems.Baseline = null;

/**
 * 
 * The box items' margin boxes are centered in the cross axis within the line. 
 * @public
 * @memberOf sap.m.FlexAlignItems
 */
sap.m.FlexAlignItems.Center = null;

/**
 * 
 * The cross-start margin edges of the box items are placed flush with the cross-end edge of the line. 
 * @public
 * @memberOf sap.m.FlexAlignItems
 */
sap.m.FlexAlignItems.End = null;

/**
 * 
 * Inherits the value from its parent. 
 * @public
 * @memberOf sap.m.FlexAlignItems
 */
sap.m.FlexAlignItems.Inherit = null;

/**
 * 
 * The cross-start margin edges of the box items are placed flush with the cross-start edge of the line. 
 * @public
 * @memberOf sap.m.FlexAlignItems
 */
sap.m.FlexAlignItems.Start = null;

/**
 * 
 * Make the cross size of the items' margin boxes as close to the same size as the line as possible. 
 * @public
 * @memberOf sap.m.FlexAlignItems
 */
sap.m.FlexAlignItems.Stretch = null;


// ---- sap.m.FlexAlignSelf --------------------------------------------------------------------------

/**
 * 
 * Takes up the value of alignItems from the parent FlexBox 
 * @public
 * @memberOf sap.m.FlexAlignSelf
 */
sap.m.FlexAlignSelf.Auto = null;

/**
 * 
 * If the box item's inline axis is the same as the cross axis, this value is identical to ?start?. Otherwise, it participates in baseline alignment: all participating box items on the line are aligned such that their baselines align, and the item with the largest distance between its baseline and its cross-start margin edge is placed flush against the cross-start edge of the line. 
 * @public
 * @memberOf sap.m.FlexAlignSelf
 */
sap.m.FlexAlignSelf.Baseline = null;

/**
 * 
 * The box item's margin box is centered in the cross axis within the line. 
 * @public
 * @memberOf sap.m.FlexAlignSelf
 */
sap.m.FlexAlignSelf.Center = null;

/**
 * 
 * The cross-start margin edges of the box item is placed flush with the cross-end edge of the line. 
 * @public
 * @memberOf sap.m.FlexAlignSelf
 */
sap.m.FlexAlignSelf.End = null;

/**
 * 
 * Inherits the value from its parent. 
 * @public
 * @memberOf sap.m.FlexAlignSelf
 */
sap.m.FlexAlignSelf.Inherit = null;

/**
 * 
 * The cross-start margin edges of the box item is placed flush with the cross-start edge of the line. 
 * @public
 * @memberOf sap.m.FlexAlignSelf
 */
sap.m.FlexAlignSelf.Start = null;

/**
 * 
 * Make the cross size of the item's margin box as close to the same size as the line as possible. 
 * @public
 * @memberOf sap.m.FlexAlignSelf
 */
sap.m.FlexAlignSelf.Stretch = null;


// ---- sap.m.FlexDirection --------------------------------------------------------------------------

/**
 * 
 * Elements are layed out along the direction of the block axis (usually top to bottom). 
 * @public
 * @memberOf sap.m.FlexDirection
 */
sap.m.FlexDirection.Column = null;

/**
 * 
 * Elements are layed out along the reverse direction of the block axis (usually bottom to top). 
 * @public
 * @memberOf sap.m.FlexDirection
 */
sap.m.FlexDirection.ColumnReverse = null;

/**
 * 
 * Inherits the value from its parent. 
 * @public
 * @memberOf sap.m.FlexDirection
 */
sap.m.FlexDirection.Inherit = null;

/**
 * 
 * Elements are layed out along the direction of the inline axis (text direction). 
 * @public
 * @memberOf sap.m.FlexDirection
 */
sap.m.FlexDirection.Row = null;

/**
 * 
 * Elements are layed out along the reverse direction of the inline axis (against the text direction). 
 * @public
 * @memberOf sap.m.FlexDirection
 */
sap.m.FlexDirection.RowReverse = null;


// ---- sap.m.FlexJustifyContent --------------------------------------------------------------------------

/**
 * 
 * Box items are packed toward the center of the line. 
 * @public
 * @memberOf sap.m.FlexJustifyContent
 */
sap.m.FlexJustifyContent.Center = null;

/**
 * 
 * Box items are packed toward the end of the line. 
 * @public
 * @memberOf sap.m.FlexJustifyContent
 */
sap.m.FlexJustifyContent.End = null;

/**
 * 
 * Inherits the value from its parent. 
 * @public
 * @memberOf sap.m.FlexJustifyContent
 */
sap.m.FlexJustifyContent.Inherit = null;

/**
 * 
 * Box items are evenly distributed in the line, with half-size spaces on either end. 
 * @public
 * @memberOf sap.m.FlexJustifyContent
 */
sap.m.FlexJustifyContent.SpaceAround = null;

/**
 * 
 * Box items are evenly distributed in the line. 
 * @public
 * @memberOf sap.m.FlexJustifyContent
 */
sap.m.FlexJustifyContent.SpaceBetween = null;

/**
 * 
 * Box items are packed toward the start of the line. 
 * @public
 * @memberOf sap.m.FlexJustifyContent
 */
sap.m.FlexJustifyContent.Start = null;


// ---- sap.m.FlexRendertype --------------------------------------------------------------------------

/**
 * 
 * DIV elements are used for rendering 
 * @public
 * @memberOf sap.m.FlexRendertype
 */
sap.m.FlexRendertype.Div = null;

/**
 * 
 * Unordered lists are used for rendering. 
 * @public
 * @memberOf sap.m.FlexRendertype
 */
sap.m.FlexRendertype.List = null;


// ---- sap.m.HeaderLevel --------------------------------------------------------------------------

/**
 * 
 * Header level 1 
 * @public
 * @memberOf sap.m.HeaderLevel
 */
sap.m.HeaderLevel.H1 = null;

/**
 * 
 * Header level 2 
 * @public
 * @memberOf sap.m.HeaderLevel
 */
sap.m.HeaderLevel.H2 = null;

/**
 * 
 * Header level 3 
 * @public
 * @memberOf sap.m.HeaderLevel
 */
sap.m.HeaderLevel.H3 = null;

/**
 * 
 * Header level 4 
 * @public
 * @memberOf sap.m.HeaderLevel
 */
sap.m.HeaderLevel.H4 = null;

/**
 * 
 * Header level 5 
 * @public
 * @memberOf sap.m.HeaderLevel
 */
sap.m.HeaderLevel.H5 = null;

/**
 * 
 * Header level 6 
 * @public
 * @memberOf sap.m.HeaderLevel
 */
sap.m.HeaderLevel.H6 = null;


// ---- sap.m.IconTabFilterDesign --------------------------------------------------------------------------

/**
 * 
 * A horizontally layouted design providing more space for texts. 
 * @public
 * @memberOf sap.m.IconTabFilterDesign
 */
sap.m.IconTabFilterDesign.Horizontal = null;

/**
 * 
 * A vertically layouted design using minimum horizontal space. 
 * @public
 * @memberOf sap.m.IconTabFilterDesign
 */
sap.m.IconTabFilterDesign.Vertical = null;


// ---- sap.m.InputType --------------------------------------------------------------------------

/**
 * 
 * An input control for specifying a date value. The user can select a month, day of the month, and year. 
 * @public
 * @deprecated Since version 1.9.1. 
 * Please use sap.m.DateTimeInput control with type "Date" to create date input.
 * @memberOf sap.m.InputType
 */
sap.m.InputType.Date = null;

/**
 * 
 * An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day. 
 * @public
 * @deprecated Since version 1.9.1. 
 * Please use dedicated sap.m.DateTimeInput control with type "DateTime" to create date-time input.
 * @memberOf sap.m.InputType
 */
sap.m.InputType.Datetime = null;

/**
 * 
 * An input control for specifying a date and time value where the format depends on the locale. 
 * @public
 * @deprecated Since version 1.9.1. 
 * Please use dedicated sap.m.DateTimeInput control with type "DateTime" to create date-time input.
 * @memberOf sap.m.InputType
 */
sap.m.InputType.DatetimeLocale = null;

/**
 * 
 * A text field for specifying an email address. Brings up a keyboard optimized for email address entry. 
 * @public
 * @memberOf sap.m.InputType
 */
sap.m.InputType.Email = null;

/**
 * 
 * An input control for selecting a month. 
 * @public
 * @deprecated Since version 1.9.1. 
 * There is no cross-platform support. Please do not use this Input type.
 * @memberOf sap.m.InputType
 */
sap.m.InputType.Month = null;

/**
 * 
 * A text field for specifying a number. Brings up a number pad keyboard. Specifying an input type of \d* or [0-9]* is equivalent to using this type. 
 * @public
 * @memberOf sap.m.InputType
 */
sap.m.InputType.Number = null;

/**
 * 
 * Password input where the user entry cannot be seen. 
 * @public
 * @memberOf sap.m.InputType
 */
sap.m.InputType.Password = null;

/**
 * 
 * A text field for specifying a phone number. Brings up a phone pad keyboard. 
 * @public
 * @memberOf sap.m.InputType
 */
sap.m.InputType.Tel = null;

/**
 * 
 * default (text) 
 * @public
 * @memberOf sap.m.InputType
 */
sap.m.InputType.Text = null;

/**
 * 
 * An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM. 
 * @public
 * @deprecated Since version 1.9.1. 
 * Please use dedicated sap.m.DateTimeInput control with type "Time" to create time input.
 * @memberOf sap.m.InputType
 */
sap.m.InputType.Time = null;

/**
 * 
 * A text field for specifying a URL. Brings up a keyboard optimized for URL entry. 
 * @public
 * @memberOf sap.m.InputType
 */
sap.m.InputType.Url = null;

/**
 * 
 * An input control for selecting a week. 
 * @public
 * @deprecated Since version 1.9.1. 
 * There is no cross-platform support. Please do not use this Input type.
 * @memberOf sap.m.InputType
 */
sap.m.InputType.Week = null;


// ---- sap.m.LabelDesign --------------------------------------------------------------------------

/**
 * 
 * Displays the label in bold. 
 * @public
 * @memberOf sap.m.LabelDesign
 */
sap.m.LabelDesign.Bold = null;

/**
 * 
 * Displays the label in normal mode. 
 * @public
 * @memberOf sap.m.LabelDesign
 */
sap.m.LabelDesign.Standard = null;


// ---- sap.m.ListHeaderDesign --------------------------------------------------------------------------

/**
 * 
 * Plain header style 
 * @public
 * @memberOf sap.m.ListHeaderDesign
 */
sap.m.ListHeaderDesign.Plain = null;

/**
 * 
 * Standard header style 
 * @public
 * @memberOf sap.m.ListHeaderDesign
 */
sap.m.ListHeaderDesign.Standard = null;


// ---- sap.m.ListMode --------------------------------------------------------------------------

/**
 * 
 * delete mode (only one list item can be deleted) 
 * @public
 * @memberOf sap.m.ListMode
 */
sap.m.ListMode.Delete = null;

/**
 * 
 * multi selection mode (whole list item including checkbox will be selected) 
 * @public
 * @memberOf sap.m.ListMode
 */
sap.m.ListMode.MultiSelect = null;

/**
 * 
 * default mode (no selection) 
 * @public
 * @memberOf sap.m.ListMode
 */
sap.m.ListMode.None = null;

/**
 * 
 * right positioned single selection mode (only one list item can be selected) 
 * @public
 * @memberOf sap.m.ListMode
 */
sap.m.ListMode.SingleSelect = null;

/**
 * 
 * left positioned single selection mode (only one list item can be selected) 
 * @public
 * @memberOf sap.m.ListMode
 */
sap.m.ListMode.SingleSelectLeft = null;

/**
 * 
 * Single selection master mode (only one list item can be selected), selected item is highlighted but no radiobutton is visible. 
 * @public
 * @memberOf sap.m.ListMode
 */
sap.m.ListMode.SingleSelectMaster = null;


// ---- sap.m.ListSeparators --------------------------------------------------------------------------

/**
 * 
 * Separators around all items. 
 * @public
 * @memberOf sap.m.ListSeparators
 */
sap.m.ListSeparators.All = null;

/**
 * 
 * Separators only between the items. 
 * @public
 * @memberOf sap.m.ListSeparators
 */
sap.m.ListSeparators.Inner = null;

/**
 * 
 * No Separators are used. 
 * @public
 * @memberOf sap.m.ListSeparators
 */
sap.m.ListSeparators.None = null;


// ---- sap.m.ListType --------------------------------------------------------------------------

/**
 * 
 * Active 
 * @public
 * @memberOf sap.m.ListType
 */
sap.m.ListType.Active = null;

/**
 * 
 * Detail 
 * @public
 * @memberOf sap.m.ListType
 */
sap.m.ListType.Detail = null;

/**
 * 
 * DetailAndActive 
 * @public
 * @memberOf sap.m.ListType
 */
sap.m.ListType.DetailAndActive = null;

/**
 * 
 * Inactive 
 * @public
 * @memberOf sap.m.ListType
 */
sap.m.ListType.Inactive = null;

/**
 * 
 * Navigation 
 * @public
 * @memberOf sap.m.ListType
 */
sap.m.ListType.Navigation = null;


// ---- sap.m.MessageBox.Action --------------------------------------------------------------------------

/**
 * 
 * Adds an "Abort" button to the message box.
 * @public
 * @memberOf sap.m.MessageBox.Action
 */
sap.m.MessageBox.Action.ABORT = null;

/**
 * 
 * Adds a "Cancel" button to the message box.
 * @public
 * @memberOf sap.m.MessageBox.Action
 */
sap.m.MessageBox.Action.CANCEL = null;

/**
 * 
 * Adds a "Close" button to the message box.
 * @public
 * @memberOf sap.m.MessageBox.Action
 */
sap.m.MessageBox.Action.CLOSE = null;

/**
 * 
 * Adds a "Delete" button to the message box.
 * @public
 * @memberOf sap.m.MessageBox.Action
 */
sap.m.MessageBox.Action.DELETE = null;

/**
 * 
 * Adds an "Ignore" button to the message box.
 * @public
 * @memberOf sap.m.MessageBox.Action
 */
sap.m.MessageBox.Action.IGNORE = null;

/**
 * 
 * Adds a "No" button to the message box.
 * @public
 * @memberOf sap.m.MessageBox.Action
 */
sap.m.MessageBox.Action.NO = null;

/**
 * 
 * Adds an "Ok" button to the message box.
 * @public
 * @memberOf sap.m.MessageBox.Action
 */
sap.m.MessageBox.Action.OK = null;

/**
 * 
 * Adds a "Retry" button to the message box.
 * @public
 * @memberOf sap.m.MessageBox.Action
 */
sap.m.MessageBox.Action.RETRY = null;

/**
 * 
 * Adds a "Yes" button to the message box.
 * @public
 * @memberOf sap.m.MessageBox.Action
 */
sap.m.MessageBox.Action.YES = null;


// ---- sap.m.MessageBox.Icon --------------------------------------------------------------------------

/**
 * 
 * Shows the error icon in the message box.
 * @public
 * @memberOf sap.m.MessageBox.Icon
 */
sap.m.MessageBox.Icon.ERROR = null;

/**
 * 
 * Shows the information icon in the message box.
 * @public
 * @memberOf sap.m.MessageBox.Icon
 */
sap.m.MessageBox.Icon.INFORMATION = null;

/**
 * 
 * Shows no icon in the message box.
 * @public
 * @memberOf sap.m.MessageBox.Icon
 */
sap.m.MessageBox.Icon.NONE = null;

/**
 * 
 * Shows the question icon in the message box.
 * @public
 * @memberOf sap.m.MessageBox.Icon
 */
sap.m.MessageBox.Icon.QUESTION = null;

/**
 * 
 * Shows the success icon in the message box.
 * @public
 * @memberOf sap.m.MessageBox.Icon
 */
sap.m.MessageBox.Icon.SUCCESS = null;

/**
 * 
 * Shows the warning icon in the message box.
 * @public
 * @memberOf sap.m.MessageBox.Icon
 */
sap.m.MessageBox.Icon.WARNING = null;


// ---- sap.m.PageBackgroundDesign --------------------------------------------------------------------------

/**
 * 
 * Page background color when a List is set as the Page content. 
 * @public
 * @memberOf sap.m.PageBackgroundDesign
 */
sap.m.PageBackgroundDesign.List = null;

/**
 * 
 * A solid background color dependent on the theme. 
 * @public
 * @memberOf sap.m.PageBackgroundDesign
 */
sap.m.PageBackgroundDesign.Solid = null;

/**
 * 
 * Standard Page background color. 
 * @public
 * @memberOf sap.m.PageBackgroundDesign
 */
sap.m.PageBackgroundDesign.Standard = null;

/**
 * 
 * Transparent background for the page. 
 * @public
 * @memberOf sap.m.PageBackgroundDesign
 */
sap.m.PageBackgroundDesign.Transparent = null;


// ---- sap.m.PlacementType --------------------------------------------------------------------------

/**
 * 
 * Popover will be placed automatically at the reference control. 
 * @public
 * @memberOf sap.m.PlacementType
 */
sap.m.PlacementType.Auto = null;

/**
 * 
 * Popover will be placed at the bottom of the reference control. 
 * @public
 * @memberOf sap.m.PlacementType
 */
sap.m.PlacementType.Bottom = null;

/**
 * 
 * Popover will be placed at the right or left side of the reference control. 
 * @public
 * @memberOf sap.m.PlacementType
 */
sap.m.PlacementType.Horizontal = null;

/**
 * 
 * Popover will be placed at the left side of the reference control. 
 * @public
 * @memberOf sap.m.PlacementType
 */
sap.m.PlacementType.Left = null;

/**
 * 
 * Popover will be placed at the right side of the reference control. 
 * @public
 * @memberOf sap.m.PlacementType
 */
sap.m.PlacementType.Right = null;

/**
 * 
 * Popover will be placed at the top of the reference control. 
 * @public
 * @memberOf sap.m.PlacementType
 */
sap.m.PlacementType.Top = null;

/**
 * 
 * Popover will be placed at the top or bottom of the reference control. 
 * @public
 * @memberOf sap.m.PlacementType
 */
sap.m.PlacementType.Vertical = null;


// ---- sap.m.PopinDisplay --------------------------------------------------------------------------

/**
 * 
 * Inside the table popin, header is displayed in first line and value field is displayed in next line. 
 * @public
 * @memberOf sap.m.PopinDisplay
 */
sap.m.PopinDisplay.Block = null;

/**
 * 
 * Inside the table popin, value field is displayed next to the header in the same line. Note: If there is no enough space for the value field then goes to next line. 
 * @public
 * @memberOf sap.m.PopinDisplay
 */
sap.m.PopinDisplay.Inline = null;


// ---- sap.m.RatingIndicatorVisualMode --------------------------------------------------------------------------

/**
 * 
 * Values are rounded to the nearest integer value (e.g. 1.7 -> 2). 
 * @public
 * @memberOf sap.m.RatingIndicatorVisualMode
 */
sap.m.RatingIndicatorVisualMode.Full = null;

/**
 * 
 * Values are rounded to the nearest half value (e.g. 1.7 -> 1.5). 
 * @public
 * @memberOf sap.m.RatingIndicatorVisualMode
 */
sap.m.RatingIndicatorVisualMode.Half = null;


// ---- sap.m.ScreenSize --------------------------------------------------------------------------

/**
 * 
 * 1024px wide 
 * @public
 * @memberOf sap.m.ScreenSize
 */
sap.m.ScreenSize.Desktop = null;

/**
 * 
 * 768px wide 
 * @public
 * @memberOf sap.m.ScreenSize
 */
sap.m.ScreenSize.Large = null;

/**
 * 
 * 560px wide 
 * @public
 * @memberOf sap.m.ScreenSize
 */
sap.m.ScreenSize.Medium = null;

/**
 * 
 * 240px wide 
 * @public
 * @memberOf sap.m.ScreenSize
 */
sap.m.ScreenSize.Phone = null;

/**
 * 
 * 480px wide 
 * @public
 * @memberOf sap.m.ScreenSize
 */
sap.m.ScreenSize.Small = null;

/**
 * 
 * 600px wide 
 * @public
 * @memberOf sap.m.ScreenSize
 */
sap.m.ScreenSize.Tablet = null;

/**
 * 
 * 960px wide 
 * @public
 * @memberOf sap.m.ScreenSize
 */
sap.m.ScreenSize.XLarge = null;

/**
 * 
 * 320px wide 
 * @public
 * @memberOf sap.m.ScreenSize
 */
sap.m.ScreenSize.XSmall = null;

/**
 * 
 * 1120px wide 
 * @public
 * @memberOf sap.m.ScreenSize
 */
sap.m.ScreenSize.XXLarge = null;

/**
 * 
 * 240px wide 
 * @public
 * @memberOf sap.m.ScreenSize
 */
sap.m.ScreenSize.XXSmall = null;


// ---- sap.m.SelectType --------------------------------------------------------------------------

/**
 * 
 * Will show the text. 
 * @public
 * @memberOf sap.m.SelectType
 */
sap.m.SelectType.Default = null;

/**
 * 
 * Will show only the specified icon. 
 * @public
 * @memberOf sap.m.SelectType
 */
sap.m.SelectType.IconOnly = null;


// ---- sap.m.SplitAppMode --------------------------------------------------------------------------

/**
 * 
 * Master area is hidden initially both in portrait and landscape. Master area can be opened by clicking on the top left corner button or swiping right. Swipe is only enabled on mobile devices. Master will keep the open state when changing the orientation of the device. 
 * @public
 * @memberOf sap.m.SplitAppMode
 */
sap.m.SplitAppMode.HideMode = null;

/**
 * 
 * Master will be shown inside a Popover when in portrait mode 
 * @public
 * @memberOf sap.m.SplitAppMode
 */
sap.m.SplitAppMode.PopoverMode = null;

/**
 * 
 * Master will automatically be hidden in portrait mode. 
 * @public
 * @memberOf sap.m.SplitAppMode
 */
sap.m.SplitAppMode.ShowHideMode = null;

/**
 * 
 * Master will always be shown but in a compressed version when in portrait mode. 
 * @public
 * @memberOf sap.m.SplitAppMode
 */
sap.m.SplitAppMode.StretchCompressMode = null;


// ---- sap.m.StandardTileType --------------------------------------------------------------------------

/**
 * 
 * Tile representing that something needs to be created 
 * @public
 * @memberOf sap.m.StandardTileType
 */
sap.m.StandardTileType.Create = null;

/**
 * 
 * Monitor tile 
 * @public
 * @memberOf sap.m.StandardTileType
 */
sap.m.StandardTileType.Monitor = null;

/**
 * 
 * Default type 
 * @public
 * @memberOf sap.m.StandardTileType
 */
sap.m.StandardTileType.None = null;


// ---- sap.m.SwipeDirection --------------------------------------------------------------------------

/**
 * 
 * Both directions (left to right or right to left) 
 * @public
 * @memberOf sap.m.SwipeDirection
 */
sap.m.SwipeDirection.Both = null;

/**
 * 
 * Swipe from left to right 
 * @public
 * @memberOf sap.m.SwipeDirection
 */
sap.m.SwipeDirection.LeftToRight = null;

/**
 * 
 * Swipe from right to left. 
 * @public
 * @memberOf sap.m.SwipeDirection
 */
sap.m.SwipeDirection.RightToLeft = null;


// ---- sap.m.SwitchType --------------------------------------------------------------------------

/**
 * 
 * Switch with accept and reject icons 
 * @public
 * @memberOf sap.m.SwitchType
 */
sap.m.SwitchType.AcceptReject = null;

/**
 * 
 * Will show "ON" and "OFF" translated to the current language or the custom text if provided 
 * @public
 * @memberOf sap.m.SwitchType
 */
sap.m.SwitchType.Default = null;


// ---- sap.m.ToolbarDesign --------------------------------------------------------------------------

/**
 * 
 * The toolbar can be inserted into other controls and if the design is "Auto" then it inherits the design from parent control. 
 * @public
 * @memberOf sap.m.ToolbarDesign
 */
sap.m.ToolbarDesign.Auto = null;

/**
 * 
 * The toolbar appears smaller than the regular size to show information(e.g: text, icon). 
 * @public
 * @memberOf sap.m.ToolbarDesign
 */
sap.m.ToolbarDesign.Info = null;

/**
 * 
 * The toolbar and its content will be displayed transparent. 
 * @public
 * @memberOf sap.m.ToolbarDesign
 */
sap.m.ToolbarDesign.Transparent = null;

